*****************************************************************************
*** THIS IS A LIST OF THINGS THAT NEED TO BE DONE                         ***
*** PUT YOUR NAME NEXT TO SOMETHING IF YOU'RE WORKING ON IT               ***
*** DELETE THE LINE FROM THE LIST IF IT'S DONE AND WORKING                ***
*** NOTHING IS DONE UNTIL YOU'VE ALSO CREATED A REGRESSION TEST FOR IT!!! ***
*****************************************************************************

=> General <=
- *Need a better/good way to report errors*
- ** Col & line numbers are "wrong" for multiple AST nodes **
- Command-line args for each stage of the compile
- Better over-all compiler interface/Main method

=> Barry <=
- Check the equals & hashCode methods I've created for MethodSignature & Type

=> PARSING <=
- Add errors and exceptions to parsing
- Check literals to see if they can be divided into double and float, int and long, etc.
  - So this is an issue for now with type-checking because we don't have promotion from float -> double
    I don't think -- without a ton of effort that isn't worth it -- that we can determine that 1 is a ubyte but 2^20 must be an in
    So I think we should make these things whatever the architecture provides. So for 64-bit it's a long and double(??) and for 32-bit it's an int and float
    We could also make everything an int & float unless you specify a l/L or d/D after the literal... I like this idea    
    - Yuck.  That means the same code means different things.  Almost as bad as int being 64 bits one place and 32 bits another.  
    - Also, to be compatible with C++ and Java, 4 is an int and 3.6 is a double.  Those are the defaults.  Longs and floats have to be separately marked: 4L and 3.6f.
    It's sensible: Normal size int unless you need more space, precision on your floating-point values unless you are trying to save space.  Remember, in binary, 0.1 is a repeating decimal...
- Should string be listed as a primitive type when its semantics will always be reference style?
- Should we add modifiers to views ??  - Probably not?


=> TYPE CHECKING <=
** TO DO **
Add visitor methods in ClassChecker for:

*************************************************************************
* NOTE: For most of these, we want to do our work on the second pass.   *
*       Otherwise, we won't have type info for lower nodes yet.         *
*************************************************************************

* I don't think we need to type-check these in any way *
  ASTCompilationUnit
  ASTPackageDeclaration
  ASTImportDeclaration
  ASTClassOrInterfaceBody
  ASTClassOrInterfaceBodyDeclaration
  ASTModifiers
  ASTContinueStatement
  
* Version 2 *
  ASTViewDeclaration
  ASTStaticArrayType
  ASTAssertStatement
  ASTEnumDeclaration
  ASTEnumBody
  ASTEnumConstant
  ASTTypeParameters
  ASTTypeParameter
  ASTTypeBound
  ASTTypeArguments
  ASTTypeArgument
  

Bill do these:

  ASTTypeDeclaration
DONE - ASTClassOrInterfaceDeclaration
DONE - ASTExtendsList
DONE - ASTImplementsList
DONE - ASTFieldDeclaration
DONE - ASTMethodDeclaration
DONE - ASTMethodDeclarator
DONE - ASTConstructorDeclaration
DONE - ASTDestructorDeclaration
DONE - ASTLocalVariableDeclaration
DONE - ASTVariableDeclarator
DONE - ASTVariableDeclaratorId -- just a place-holder for the var name, no type-checking needed
DONE - ASTVariableInitializer
  ASTArrayInitializer
  ASTFormalParameters
  ASTFormalParameter
  ASTExplicitConstructorInvocation
  ASTInitializer -- do we even want these??
DONE - ASTType
  ASTReferenceType -- these should always get flattened, I can't seem to create one in the parse tree
DONE - ASTFunctionType
  ASTClassOrInterfaceType
  ASTWildcardBounds
DONE - ASTPrimitiveType
  ASTResultType -- I think we can remove this from the grammar... it's just Type()
DONE - ASTResultTypes
DONE - ASTName
  ASTNameList -- ?? don't think we need to type-check this
DONE - ASTPrimaryExpression
  
  
Barry do these:
  
DONE - ASTAdditiveExpression
DONE - ASTMultiplicativeExpression
DONE - ASTUnaryExpression
DONE - ASTUnaryExpressionNotPlusMinus
DONE - ASTConditionalExpression
DONE - ASTConditionalOrExpression
DONE - ASTConditionalExclusiveOrExpression
DONE - ASTConditionalAndExpression
DONE - ASTBitwiseOrExpression
DONE - ASTBitwiseExclusiveOrExpression
DONE - ASTBitwiseAndExpression
DONE - ASTExpression - Still needs to handle the different assignment types, maybe?
  ASTIsExpression	//needs richer type information
  ASTCastExpression //needs richer type information
  ASTSequence
  ASTMemberSelector
  ASTPrimaryPrefix
  ASTPrimarySuffix
  ASTLiteral
  ASTBooleanLiteral
  ASTNullLiteral
  ASTArguments
  ASTArgumentList
  ASTAllocationExpression
  ASTArrayDimsAndInits
  ASTStatement
  ASTLabeledStatement
DONE? - ASTBlock
  ASTBlockStatement
  ASTEmptyStatement
  ASTStatementExpression
  ASTSwitchStatement
  ASTSwitchLabel
  ASTIfStatement
  ASTWhileStatement
  ASTDoStatement
  ASTForeachStatement
  ASTForStatement
  ASTForInit
  ASTStatementExpressionList
  ASTForUpdate
  ASTBreakStatement
  ASTReturnStatement
  ASTThrowStatement
  ASTSynchronizedStatement
  ASTTryStatement
  ASTMemberValuePairs
  ASTMemberValuePair
  ASTMemberValue
  ASTMemberValueArrayInitializer
  ASTDefaultValue
