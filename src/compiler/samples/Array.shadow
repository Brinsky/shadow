class Array<T> implements Iterable<T>, Sortable<T>
{
	immutable int size;
	
	public create( int size )
	{
		this.size = size;
	}	
	
	public getSize() => (int)
	{
		return size;
	}
	
	private class ArrayIterator<T> implements BidirectionalIterator<T>
	{
		int index = 0;
	
		immutable getValue() => (T)
		{
			return Array<T>.this[index];
		}
		
		immutable getNext() => (ArrayIterator<T>)
		{
			ArrayIterator<T> next = new ArrayIterator<T>();
			next.index = index + 1;
		}
		
		immutable getPrevious() => (ArrayIterator<T>)
		{
			ArrayIterator<T> next = new ArrayIterator<T>();
			next.index = index - 1;
		}
		
		immutable isValid() => (boolean)
		{
			return index >= 0 && index < data.length;		
		}
	}
	
	public getIterator() => (BidirectionalIterator<T>)
	{
		return ArrayIterator<T>:contruct();
	}
	
	public sort( (T,T)=>(int) compare ) => ()
	{
		Collections.sort( this, compare );
	}
	
}