class shadow.utility@LinkedList<V> implements List<V>
{
	get int size = 0;
	Node header = Node:create();
	int modifications = 0;

	private class Node
	{
		get Node prev = this, next = this;
		get set nullable V value = null;
		public create() { }
		public create( V initialValue, Node after )
		{
			( after:prev:next, prev,       next,  after:prev ) =
			( this,            after:prev, after, this       );
			value = initialValue;
			size += 1;
			modifications += 1;
		}
		public set value( V initialValue ) => ()
		{
			value = initialValue;
			modifications += 1;
		}
		public clear() => ()
		{
			( prev, next ) = ( this, this );
			size = 0;
			modifications += 1;
		}
		public delete() => ()
		{
			( prev:next, next:prev ) = ( next, prev );
			size -= 1;
			modifications += 1;
		}
	}
	private findIndex( int index ) => ( Node node )
	{
		if ( cast<uint>index >= cast<uint>size )
			throw IndexOutOfBoundsException:create();
		Node current = header;
		if ( index < size / 2 )
			while ( index != 0 )
			{
				current = current->next;
				index -= 1;
			}
		else
			while ( index != size )
			{
				current = current->prev;
				index += 1;
			}
		return current;
	}
	private findNode( V value ) => ( int index, nullable Node node )
	{
		int index = 0;
		Node current = header;
		while (true)
		{
			current = current->next;
			if ( current === header )
				return ( -1, null );
			if ( current->value == value )
				return ( index, current );
			index += 1;
		}
	}

	public index( int index ) => ( nullable V value )
	{
		return findIndex(index)->value;
	}
	public index( int index, V value ) => ()
	{
		if ( index == size )
			Node:create(value, header);
		else
			findIndex(index)->value = value;
	}

	public add( V value ) => ( boolean added )
	{
		Node:create(value, header);
		return true;
	}
	public remove( V value ) => ( boolean removed )
	{
		try
		{
			nullable Node node;
			(, node) = findNode(value);
			check(node).delete();
			return true;
		}
		recover
		{
			return false;
		}
	}
	public delete( int index ) => (V value)
	{
		Node node = findIndex(index);
		try
		{
			V value = check(node->value);
			node.delete();
			return value;
		}
		recover
		{
			throw UnexpectedNullException:create();
		}
	}
	public indexOf( V value ) => ( int index )
	{
		int index;
		(index, ) = findNode(value);
		return index;
	}
	public contains( V value ) => ( boolean found )
	{		 
		return indexOf(value) != -1;
	}
	public clear() => ()
	{
		header.clear();
	}

	public immutable iterator() => ( Iterator<V> )
	{
		return LinkedListIterator:create();
	}
	
	private class LinkedListIterator implements Iterator<V>
	{
		Node current = header->next;
		int expectedModifications = modifications;

		private immutable checkForModifications() => ()
		{
			if ( modifications != expectedModifications )
				throw IllegalModificationException:create();
		}
		public immutable hasNext() => ( boolean )
		{
			checkForModifications();
			return current !== header;
		}
		public next() => ( V value )
		{
			checkForModifications();
			if ( !hasNext() )
				throw IndexOutOfBoundsException:create();
			try
			{
				V value = check(current->value);
				current = current->next;			
				return value;
			}
			recover
			{
				throw UnexpectedNullException:create();
			}
		}
	}
}
