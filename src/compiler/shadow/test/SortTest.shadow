import shadow.utility@Random;

class SortTest {
	int[] array = int:create[0];
	int min, max;
	ulong startTime;
	public create(int length, int min, int max) {
		int[] array = int:create[length];
		Random random = Random:create();
		for (int i = 0; i < array->length; i += 1)
			array[i] = random.nextInt(max - min + 1) + min;
		this:array = array;
		this:min = min;
		this:max = max;
		this:startTime = 0UL;
	}

	public getArray() => (int[]) {
		return cast<int[]>(cast<Object>array.copy());
	}
	public getArrayStart() => (int) {
		return 0;
	}
	public getArrayEnd() => (int) {
		return this:array->length;
	}
	public getArrayLength() => (int) {
		return this:array->length;
	}
	public getMinimum() => (int) {
		return this:min;
	}
	public getMaximum() => (int) {
		return this:max;
	}
	public getTime() => (double) {
		return (System:instance.nanoTime() - startTime) / 1000000000.0;
	}

	public run() => () {
		Console:instance.printLine("Array length:\t\t" # getArrayLength());
		quickSort();
		mergeSort();
		heapSort();
		bucketSort();
		Console:instance.printLine();
	}

	private quickSort() => () {
		int[] array = getArray();
		start();
		quickSort(array, 0, getArrayLength());
		stop(array, "Quicksort");
	}
	private mergeSort() => () {
		int[] array = getArray();
		start();
		array = mergeSort(array);
		stop(array, "Merge Sort");
	}
	private heapSort() => () {
		int[] array = getArray();
		start();
		heapSort(array);
		stop(array, "Heap Sort");
	}
	private bucketSort() => () {
		int[] array = getArray();
		start();
		bucketSort(array, getMinimum(), getMaximum());
		stop(array, "Bucket Sort");
	}

	private start() => () {
		this:startTime = System:instance.nanoTime();
	}
	private stop(int[] array, String name) => () {
		double time = getTime();
		if (checkArray(array))
			Console:instance.printLine(name # ":\t\t" # time # " seconds");
		else
			Console:instance.printErrorLine(name # ":\t\t" # time # " seconds");
		this:startTime = 0UL;
	}
	private checkArray(int[] array) => (boolean) {
		int last = getMinimum();
		for (int i = 0; i < array->length; last = array[i], i += 1)
			if (array[i] < last)
				return false;
		return true;
	}

	public quickSort(int[] array, int start, int end) => () {
		if (end - start > 1) {
			int pivot = array[start], left = start;
			for (int right = left + 1; right < end; right += 1)
				if (array[right] < pivot) {
					array[left] = array[right];
					left += 1;
					array[right] = array[left];
				}
			array[left] = pivot;
			quickSort(array, start, left);
			quickSort(array, left + 1, end);
		}
	}

	/*public mergeSort(int[] array) => () {
		if (array->length > 1) {
			int[] left = int:create[array->length >> 1],
					right = int:create[array->length + 1 >> 1];
			for (int i = 0; i < left->length; i += 1)
				left[i] = array[i];
			for (int i = 0; i < right->length; i += 1)
				right[i] = array[i + left->length];
			mergeSort(left);
			mergeSort(right);
			for (int index = 0, leftIndex = 0, rightIndex = 0;
					index < array->length; index += 1)
				if (leftIndex != left->length and
						(rightIndex == right->length or
								left[leftIndex] < right[rightIndex]))
				{
					array[index] = left[leftIndex];
					leftIndex += 1;
				}
				else
				{
					array[index] = right[rightIndex];
					rightIndex += 1;
				}
		}
	}*/

	public mergeSort(int[] array) => (int[]) {
		if (array->length > 1) {
			int[] left = mergeSort(cast<int[]>(cast<Object>array.subarray(0, array->length >> 1)));
			int[] right = mergeSort(cast<int[]>(cast<Object>array.subarray(array->length >> 1, array->length)));
			array = int:create[array->length];
			for (int index = 0, leftIndex = 0, rightIndex = 0;
					index < array->length; index += 1)
				if (leftIndex != left->length and
						(rightIndex == right->length or
								left[leftIndex] < right[rightIndex]))
				{
					array[index] = left[leftIndex];
					leftIndex += 1;
				}
				else
				{
					array[index] = right[rightIndex];
					rightIndex += 1;
				}
		}
		return array;
	}

	public heapSort(int[] array) => () {
		for (int i = 1; i < array->length; i += 1)
			for (int j = i - 1; array[j / 2] < array[j + 1]; j = j / 2 - 1)
				(array[j / 2], array[j + 1]) = (array[j + 1], array[j / 2]);
		for (int length = array->length - 1; length >= 0; length -= 1) {
			int temp = array[length], i = length, j = 0;
			do {
				array[i] = array[j];
				i = j;
				j = i * 2 + 1;
				if (j + 1 < length and array[j + 1] > array[j])
					j += 1;
			} while (j < length and array[j] > temp);
			array[i] = temp;
		}
	}

	public bucketSort(int[] array, int min, int max) => () {
		int[] values = int:create[max - min + 1];
		for (int i = 0; i < array->length; i += 1)
			values[array[i] - min] += 1;
		int index = 0;
		for (int valueIndex = 0; valueIndex < values->length; valueIndex += 1)
			for (int i = values[valueIndex]; i > 0; i -= 1, index += 1)
				array[index] = valueIndex + min;
	}
}
