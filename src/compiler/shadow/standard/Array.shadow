abstract final class shadow.standard@Array<T> implements CanIndex<int[],T>
{
	get immutable int[] lengths = int:create[0];
	nullable Object data = null;
	private create( int[] lengths, Object data )
	{
		this:lengths = lengths;
		this:data = data;
	}
	public create( int[] lengths )
	{
		this:lengths = cast<int[]>(cast<Object>lengths.copy());
		this:data = allocate(T:class, this->size); // T:class.allocate(this->size);
	}
	private immutable native allocate( Class type, int size ) => ( Object );

	public immutable get size() => ( int )
	{
		int size = lengths[0];
		for ( int i = 1; i < lengths->lengths[0]; i += 1 )
			size *= lengths[i];
		return size;
	}
	public immutable get dims() => ( int )
	{
		return lengths->lengths[0];
	}

	public immutable copy() => ( Array<T> )
	{
		Array<T> copy = Array<T>:create(this->lengths, allocate(T:class, this->size));
		int[] indicies = int:create[this->dims];
		while ( indicies[0] != this->lengths[0] )
		{
			copy.index(indicies, index(indicies));
			int i = indicies->size - 1;
			for ( indicies[i] += 1; i > 0 and indicies[i] == this->lengths[i];
					i -= 1, indicies[i] += 1 )
				indicies[i] = 0;
		}
		return copy;
	}
	public immutable native subarray( int start, int end ) => ( Array<T> );

	public immutable native index( int[] indicies ) => (T);
	public native index( int[] indicies, T value ) => ();

	public immutable getBaseClass() => ( Class )
	{
		return T:class;
	}

	public immutable toString() => ( String )
	{
		if ( this->size == 0 )
			return "[]";
		MutableString string = MutableString:create("[ ");
		int[] indicies = int:create[this->dims];
		boolean first = true;
		while ( indicies[0] != this->lengths[0] )
		{
			if ( first )
				first = false;
			else
				string.append(", ");
			string.append(index(indicies));
			int i = indicies->size - 1;
			for ( indicies[i] += 1; i > 0 and indicies[i] == this->lengths[i];
					i -= 1, indicies[i] += 1 )
				indicies[i] = 0;
		}
		return string.append(" ]").toString();
	}
}
