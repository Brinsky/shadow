import shadow.io@Console;

immutable class shadow.standard@
	Double
implements
	Number<double>,
	CanNegate<double>,	
	CanHash
{
	constant double PI = 3.141592653589793;
	constant double E = 2.718281828459045;

	constant double NaN = 0d / 0d;
	constant double INFINITY = 1d / 0d;
	constant double NEGATIVE_INFINITY = -1d / 0d;

	constant long SIGN_MASK = 0x8000000000000000L;
	constant long EXPONENT_MASK = 0x7ff0000000000000L;
	constant long SIGNIFICAND_MASK = 0xfffffffffffffL;

	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);

	// implement CanAdd<double>
	public native add(double other) => (double);
	// implement CanSubtract<double>
	public native subtract(double other) => (double);
	// implement CanMultiply<double>
	public native multiply(double other) => (double);
	// implement CanDivide<double>
	public native divide(double other) => (double);
	// implement CanModulus<double>
	public native modulus(double other) => (double);
	// implement CanCompare<double>
	public native compare(double other) => (int);
	// implement CanEqual<double>
	public native equal(double other) => (boolean);

	// implement CanHash
	public get hash() => (int)
	{
		return this->bits->hash;
	}

	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0l;
	}
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0l;
	}
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}
	
/*	
	
private cut(ulong f, int e) => (ulong, ulong, ulong)
{
	ulong TEN7 = 10000000L;
	ulong part2 = (f % (TEN7 >> e)) << e;
	ulong tmp = f / (TEN7 >> e);
	ulong part1 = tmp % TEN7;
	ulong part0 = tmp / TEN7;
	
	return (part0, part1, part2);
}

//based on the paper 
//Printing Floating-Point Numbers Quickly and Accurately with Integers
//by Florian Loitsch
void grisu(double v, StringBuilder buffer)
{ 
 ulong f;
 int e;
 ulong part0, part1, part2;
int q = 64, alpha = 0, gamma = 3;
w = normalize diy fp(double2diy fp(v));
 int mk = k comp(w.e + q, alpha, gamma);
13: diy fp c mk = cached power(mk);
14: diy fp D = multiply(w, c mk);
(part0, part1, part2) = cut(D, ps);
sprintf(buffer, "%u%07u%07ue%d", ps[0], ps[1], ps[2], -mk);
}
	
	*/
	
	public  toString() => (String)
	{
		return toString(1, 16, 7, 3);
	}	
	
	public  toString(int minPrecision, int maxPrecision, int integerThreshold, int fractionalThreshold ) => (String)
	{
		if( isNaN() )
			return "NaN";
			
		if( this === INFINITY )
			return "Infinity";
		
		if( this === NEGATIVE_INFINITY )
			return "-Infinity";
	
		boolean negative = false;
		
		long bits = this->bits;
		if( (bits & SIGN_MASK) != 0L )
			negative = true;
							
		int exponent = cast<int>((bits & EXPONENT_MASK) >> 52);
		long significand = bits & SIGNIFICAND_MASK;	
		
		if( exponent == 0 )
		{
			if( significand == 0L )
				 return negative ? "-0.0", "0.0";
									
			exponent = -1022 - 52; 			
		}
		else
		{
			significand |= (SIGNIFICAND_MASK + 1L);			
			exponent -= (1023 + 52);
		}
		
		Console out = Console:instance;
		
		//out.printLine("Significand: " # significand);
		//out.printLine("Exponent: " # exponent);
		
		//There are faster ways to do double output, but this is a hack for now
		BigInteger result = BigInteger:create(significand);						
		int base10Shift = 0;
		
		//out.printLine("Result before: " # result);
		
		if( exponent < 0 )
		{				
			base10Shift = cast<int>(-exponent * 0.3010299956639812) + 1;  //ceiling of log_10(2) times exponent
			//left shift
			BigInteger ten = BigInteger:create(10);
			BigInteger tenPower = ten.power(BigInteger:create(base10Shift));			
			result = result * tenPower;
			result = result.bitShiftLeft(exponent); //shifts right because exponent is negative
		}		 
		else
		{
			base10Shift = 0;
			result = result.bitShiftLeft(exponent);
		}
		
		//out.printLine("Result after shift: " # result);
		//out.printLine("Exponent: " # exponent );
		
		MutableString output = MutableString:create(#result);
				
		int rightZeroes = 0;
		for( int i = output->size - 1; i >= 0 and output[i] == '0'; i -= 1 )
			rightZeroes += 1;

		int integerDigits = output->size - base10Shift;
		int fractionalDigits = (output->size - integerDigits - rightZeroes).max(0);
		int length = 0;		
				
		if( integerDigits > integerThreshold or (integerDigits <= 0 and fractionalDigits > fractionalThreshold))
		{
			length = maxPrecision + 1;						 
			length = length.min(output->size - rightZeroes);
			length = length.max( minPrecision + 1 );
			
			//out.printLine( output );			
			
			if( round( output, length ) )
			{
				integerDigits += 1;
				fractionalDigits -= 1;
			}
			
		 	output.insert(cast<byte>('.'), 1);
		 	removeZeroes( output );
		 	
		 	if( output->size - 1 + (integerDigits - 1).abs() <=  fractionalThreshold )
		 	{
		 		output.delete(1); //remove decimal
		 	
		 		if( integerDigits >= 1 )
		 		{
		 			while( output->size < integerDigits + 1 )
		 				output.append(cast<byte>('0'));
		 				
		 			output.insert(cast<byte>('.'), integerDigits);
		 		}
		 		else
		 		{
		 			for( int i = 0; i < -integerDigits; i += 1 )
		 				output.prepend(cast<byte>('0'));
		 				
		 			output.insert(cast<byte>('.'), 1);
		 			removeZeroes( output );		 						 		
		 		}
		 	
		 	}
		 	else
		 	{		 			 	
			 	output.append(cast<byte>('E'));
				output.append(#(integerDigits - 1));
			}		 		 		
		}
		else if( integerDigits <= 0 )
		{
			for( int i = 0; i <= -integerDigits; i += 1 )			
				output.prepend(cast<byte>('0'));
				
			length = maxPrecision + 1;						 
			length = length.min(output->size - rightZeroes);
			length = length.max( minPrecision + 1 );
			
			//out.printLine( output );	
				
			round( output, length );			
			output.insert(cast<byte>('.'), 1);
			removeZeroes( output );	
		}
		else
		{		
			length = maxPrecision + integerDigits; 		
			length = length.min(output->size - rightZeroes);
			length = length.max( minPrecision + integerDigits  );
			
			//out.printLine( output );
			
			if( round( output, length ) )
			{
				integerDigits += 1;
				fractionalDigits -= 1;
			}		
		 	
		 	output.insert('.', integerDigits);
		 	removeZeroes( output );
		}		
			
		if( negative )	
			return output.prepend(cast<byte>('-')).toString();
		else
			return output.toString();
	}
	
	private round(MutableString number, int length) => (boolean)
	{
		if( length == number->size )
			return false;			
		else if( length > number->size )
		{
			while( length > number->size )
				number.append(cast<byte>('0'));
			return false;
		}
		else
		{
			if( length < 18 and number[length] >= '5' )
			{
				number.index( length - 1, number[length - 1] + 1y );
			
				while( number[length] > '9' and length > 0 )
				{
					number.index( length, cast<byte>('0') );
					length -= 1;
					number.index( length, number[length] + 1y);
				}
				
				if( number[0] > '9' )
				{				
					number.index( 0, cast<byte>('0'));				
					number.prepend(cast<byte>('1'));
					number.delete(length, number->size);
					return true;	
				}
			}
			
			number.delete(length, number->size);
			return false;
		}	
	} 
	
	private removeZeroes( MutableString string ) => ()
	{
		int index = string->size - 1;
		while( index > 1 and string[index] == '0' and string[index - 1] != '.' )
			index -= 1;
		
		if( index < string->size - 1 )
			string.delete( index + 1, string->size ); 
	}

	public native get raw() => (long);
	public get bits() => (long)
	{
		if (isNaN())
			return NaN->raw;
		return this->raw;
	}
	
	// implement CanNegate<double>
	public native negate() => (double);	
}
