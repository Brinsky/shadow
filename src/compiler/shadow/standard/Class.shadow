import shadow.io@Console;

immutable class shadow.standard@Class extends AbstractClass
{
	String name = "";
	get nullable Class parent = null;
	Class[] interfaces = Class:create[0];
	Object[] data = freeze(Object:create[0]);

	protected create(int flags, int size, String name, Class parent, Class[] interfaces, immutable Object[] data ) 
	{
		super( flags, size );
		this:name = name;
		this:parent = parent;
		this:interfaces = interfaces;
		this:data = data;
	}
	
	protected interfaceData( Class interfaceClass ) => ( immutable nullable Object )
	{
		for ( int i = 0; i < interfaces->size; i += 1 )
		{		
			if ( interfaces[i] === interfaceClass )
				return data[i];
		}
		
		Console:instance.printLine( interfaceClass # " not found!");
	}

	public isSubtype( AbstractClass other ) => ( boolean )
	{
		if( other.isArray() or other.isMethod() )
			return false;
	
		if ( this === other )
			return true;
		if ( !other.isInterface() )
			try
			{
				return check(parent).isSubtype(other);
			}
			recover
			{
			}
		else for ( int i = 0; i < interfaces->size; i += 1 )
			try
			{
				if ( check(interfaces[i]).isSubtype(other) )
					return true;
			}
			recover
			{
			}
		return false;
	}

	public toString() => ( String )
	{
		return name;
	}	
}
