immutable class shadow.standard@
	Byte
implements
	Integer<byte>,
	Integer<short>,
	Integer<int>,
	Integer<long>,
	Number<float>,
	Number<double>,
	CanHash
{
	// implement Integer<byte>
	public native bitOr(byte other) => (byte);
	public native bitXor(byte other) => (byte);
	public native bitAnd(byte other) => (byte);

	// implement Number<byte>
	public native add(byte other) => (byte);
	public native subtract(byte other) => (byte);
	public native multiply(byte other) => (byte);
	public native divide(byte other) => (byte);
	public native modulus(byte other) => (byte);

	// implement CanCompare<byte>
	public native compare(byte other) => (int);

	// implement CanEqual<byte>
	public native equals(byte other) => (boolean);


	// implement Integer<short>
	public bitOr(short other) => (short)
	{
		return cast<short>(this) | other;
	}
	public bitXor(short other) => (short)
	{
		return cast<short>(this) ^ other;
	}
	public bitAnd(short other) => (short)
	{
		return cast<short>(this) & other;
	}

	// implement Number<short>
	public add(short other) => (short)
	{
		return cast<short>(this) + other;
	}
	public subtract(short other) => (short)
	{
		return cast<short>(this) - other;
	}
	public multiply(short other) => (short)
	{
		return cast<short>(this) * other;
	}
	public divide(short other) => (short)
	{
		return cast<short>(this) / other;
	}
	public modulus(short other) => (short)
	{
		return cast<short>(this) % other;
	}

	// implement CanCompare<short>
	public compare(short other) => (int)
	{
		return cast<short>(this).compare(other);
	}


	// implement Integer<int>
	public bitOr(int other) => (int)
	{
		return cast<int>(this) | other;
	}
	public bitXor(int other) => (int)
	{
		return cast<int>(this) ^ other;
	}
	public bitAnd(int other) => (int)
	{
		return cast<int>(this) & other;
	}

	// implement Number<int>
	public add(int other) => (int)
	{
		return cast<int>(this) + other;
	}
	public subtract(int other) => (int)
	{
		return cast<int>(this) - other;
	}
	public multiply(int other) => (int)
	{
		return cast<int>(this) * other;
	}
	public divide(int other) => (int)
	{
		return cast<int>(this) / other;
	}
	public modulus(int other) => (int)
	{
		return cast<int>(this) % other;
	}

	// implement CanCompare<int>
	public compare(int other) => (int)
	{
		return cast<int>(this).compare(other);
	}


	// implement Integer<long>
	public bitOr(long other) => (long)
	{
		return cast<long>(this) | other;
	}
	public bitXor(long other) => (long)
	{
		return cast<long>(this) ^ other;
	}
	public bitAnd(long other) => (long)
	{
		return cast<long>(this) & other;
	}

	// implement Number<long>
	public add(long other) => (long)
	{
		return cast<long>(this) + other;
	}
	public subtract(long other) => (long)
	{
		return cast<long>(this) - other;
	}
	public multiply(long other) => (long)
	{
		return cast<long>(this) * other;
	}
	public divide(long other) => (long)
	{
		return cast<long>(this) / other;
	}
	public modulus(long other) => (long)
	{
		return cast<long>(this) % other;
	}

	// implement CanCompare<long>
	public compare(long other) => (int)
	{
		return cast<long>(this).compare(other);
	}


	// implement Number<float>
	public add(float other) => (float)
	{
		return cast<float>(this) + other;
	}
	public subtract(float other) => (float)
	{
		return cast<float>(this) - other;
	}
	public multiply(float other) => (float)
	{
		return cast<float>(this) * other;
	}
	public divide(float other) => (float)
	{
		return cast<float>(this) / other;
	}
	public modulus(float other) => (float)
	{
		return cast<float>(this) % other;
	}

	// implement CanCompare<float>
	public compare(float other) => (int)
	{
		return cast<float>(this).compare(other);
	}

	// implement CanEqual<float>
	public equals(float other) => (boolean)
	{
		return cast<float>(this) == other;
	}


	// implement Number<double>
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}

	// implement CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}

	// implement CanEqual<double>
	public equals(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}


	// implement CanHash
	public get hash() => (int)
	{
		return cast<int>(this);
	}


	public abs() => (ubyte)
	{
		return cast<ubyte>(this < 0y ? -this, this);
	}
	public min(byte other) => (byte)
	{
		return this < other ? this, other;
	}
	public max(byte other) => (byte)
	{
		return this > other ? this, other;
	}


	public toString() => (String)
	{
		return toString(10uy);
	}
	public toString(ubyte base) => (String)
	{
		String string = abs().toString(base);
		return this >= 0 ? string, '-' # string;
	}
}
