package shadow.standard;

immutable final class String //implements Parsable<String> //, Collection<code>
{

	private ubyte[] data = new ubyte[0];
	private boolean ascii = true;

	public getByte( int index ) => ( ubyte )
	{
		return data[index];
	}

	public getCode( int index ) => ( code )
	{
		if ( ascii )
			return data[index];
	// FIXME:
		return -1;
	}

	public getLength() => ( int )
	{
		return Array.getLength(data);
	}

	public compareTo( String other ) => ( int )
	{
		if ( other == null )
			return 1;
		if ( ascii and other.ascii )
		{
			int count = Math.min( Array.getLength(data), Array.getLength(other.data) );
			for ( int i = 0; i < count; i += 1 )
				if ( data[i] != other.data[i] )
					return data[i] < other.data[i] ? -1 : 1;
			return count == Array.getLength(data) ? -1 : 1; 
		}
	// FIXME:
		return -1;
	}
	
/*
	public constructor( code[] codes )
	{
		
	}
	
	public constructor( ubyte[] bytes )
	{
		boolean isValid = false;
		data = new ubyte[bytes.size];
		(isValid, isAscii) = checkAndCopy( data, bytes );
		
		if( !isValid )
	
	}
	
	public constructor( String other )
	{
		
		
	}
	
	
	public static parse<String>(String value) => (String)
	{
		return value;
	}	
	*/
	public toString () => (String)
	{
		return this;
	}

}