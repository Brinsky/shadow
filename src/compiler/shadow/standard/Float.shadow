immutable class shadow.standard@
	Float
implements
	Number<float>,
	Number<double>,
	CanNegate<float>,
	CanHash
{
	constant float PI = 3.1415927f;
	constant float E = 2.7182817f;

	constant float NaN = 0f / 0f;
	constant float INFINITY = 1f / 0f;
	constant float NEGATIVE_INFINITY = -1f / 0f;

	constant int SIGN_MASK = 0x80000000;
	constant int EXPONENT_MASK = 0x78000000;
	constant int SIGNIFICAND_MASK = 0x7ffffff;

	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);

	// implement CanAdd<float>
	public native add(float other) => (float);
	// implement CanSubtract<float>
	public native subtract(float other) => (float);
	// implement CanMultiply<float>
	public native multiply(float other) => (float);
	// implement CanDivide<float>
	public native divide(float other) => (float);
	// implement CanModulus<float>
	public native modulus(float other) => (float);
	// implement CanCompare<float>
	public native compare(float other) => (int);
	// implement CanEqual<float>
	public native equal(float other) => (boolean);

	// implement CanAdd<double>
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	// implement CanSubtract<double>
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	// implement CanMultiply<double>
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	// implement CanDivide<double>
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	// implement CanModulus<double>
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}
	// implement CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}
	// implement CanEqual<double>
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}
	
	//other math operations
	public native squareRoot() => (float);
	public native power(int value) => (float);
	public native power(float value) => (float);
	public native sin() => (float);
	public native cos() => (float);
	public native logBaseE() => (float);
	public native logBase2() => (float);
	public native logBase10() => (float);
	public native multiplyAdd(float multiplicand, float addend) => (float);
	public native floor() => (float);
	public native ceiling() => (float);
	public native round() => (float);	
	

	// implement CanHash
	public get hash() => (uint)
	{
		return this->bits->hash;
	}

	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0;
	}
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0;
	}
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}
	
	// implement CanNegate<float>
	public native negate() => (float);

	public native get raw() => (int);
	public get bits() => (int)
	{
		if (isNaN())
			return NaN->raw;
		return this->raw;	
	}
	
	public  toString() => (String)
	{
		return toDouble().toString(1, 16, 7, 3);
	}	
	
	public  toString(int minPrecision, int maxPrecision, int integerThreshold, int fractionalThreshold ) => (String)
	{
		return toDouble().toString(minPrecision, maxPrecision, integerThreshold, fractionalThreshold);
	}
	
	
}
