immutable class shadow.standard@
	Float
implements
	Number<float>,
	Number<double>,
	CanHash
{
	constant float PI = 3.1415927f;
	constant float E = 2.7182817f;

	constant float NaN = 0f / 0f;
	constant float INFINITY = 1f / 0f;
	constant float NEGATIVE_INFINITY = -1f / 0f;

	constant int SIGN_MASK = 0x80000000;
	constant int EXPONENT_MASK = 0x78000000;
	constant int SIGNIFICAND_MASK = 0x7ffffff;

	// implement Number<float>
	public native add(float other) => (float);
	public native subtract(float other) => (float);
	public native multiply(float other) => (float);
	public native divide(float other) => (float);
	public native modulus(float other) => (float);

	// implement CanCompare<float>
	public native compare(float other) => (int);

	// implement CanEqual<float>
	public native equal(float other) => (boolean);


	// implement Number<double>
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}

	// implement CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}

	// implement CanEqual<double>
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}


	// implement CanHash
	public get hash() => (int)
	{
		return this->bits->hash;
	}


	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0;
	}
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0;
	}
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}


	public native get raw() => (int);
	public get bits() => (int)
	{
		if (isNaN())
			return NaN->raw;
		return this->raw;
	}
}
