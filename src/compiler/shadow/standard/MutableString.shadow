class shadow.standard@MutableString implements CanIndex<int, byte>
{
	get int size = 0;
	byte[] data = byte:create[10];
	public create()
	{
	}
	public create( int initialSize )
	{
		data = byte:create[initialSize];
	}
	public create( nullable Object initialValue )
	{
		append(initialValue);
	}

	public ensureCapacity( int size ) => ( MutableString )
	{
		if ( this->capacity < size )
		{
			byte[] data = byte:create[size];
			for ( int i = 0; i < this->size; i += 1 )
				data[i] = this:data[i];
			this:data = data;
		}
		return this;
	}
	public immutable get capacity() => ( int )
	{
		return data->size;
	}

	public immutable index( int index ) => ( byte value )
	{
		if ( index < 0 or index > size )
			throw IndexOutOfBoundsException:create();
		return data[index];
	}
	public index( int index, byte value ) => ()
	{
		if ( index < 0 or index > size )
			throw IndexOutOfBoundsException:create();
		data[index] = value;
	}

	public append( nullable Object value ) => ( MutableString )
	{
		String string = # value;
		ensureCapacity( size + string->size );
		for ( int i = 0; i < string->size; i += 1, size += 1 )
			data[size] = string.getChar(i);
		return this;
	}
	public reverse() => ( MutableString )
	{
		for ( int left = 0, right = size - 1; left < right;
				left += 1, right -= 1 )
			( data[left], data[right] ) = ( data[right], data[left] );
		return this;
	}

	public immutable toString() => ( String )
	{
		return String:create(cast<byte[]>(cast<Object>(data.subarray(0, size))));
	}
}
