immutable class shadow.standard@UInt implements Number<uint>, CanCompare<uint>, CanHash
{	
	public native add(uint other) => (uint);
	public native subtract(uint other) => (uint);
	public native multiply(uint other) => (uint);
	public native divide(uint other) => (uint);
	public native modulus(uint other) => (uint);
	
	public native compare(uint other ) => (int);

	public min( uint other ) => ( uint )
	{
		return this < other ? this, other;
	}

	public max( uint other ) => ( uint )
	{
		return this > other ? this, other;
	}

	public toString() => ( String )
	{
		return toString(10u);
	}
	public toString( uint base ) => ( String )
	{
		MutableString string = MutableString:create();
		uint value = this;
		do
		{
			string.append(digit(value % base));
			value /= base;
		}
		while ( value != 0u );
		return string.reverse().toString();
	}
	private digit( uint digit ) => ( code )
	{
		if ( digit < 10u )
			return cast<code>(digit + '0');
		return cast<code>(digit - 10u + 'a');
	}
	
	public get hash() => ( int )
	{
		return cast<int>this;
	}
}