	.file	"<stdin>"
	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
	.cfi_personality 3, __shadow_personality_v0
.Leh_func_begin0:
	.cfi_lsda 3, .Lexception0
# BB#0:
	pushq	%rbp
.Ltmp10:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp11:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp12:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp13:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp14:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp15:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp16:
	.cfi_def_cfa_offset 64
.Ltmp17:
	.cfi_offset %rbx, -56
.Ltmp18:
	.cfi_offset %r12, -48
.Ltmp19:
	.cfi_offset %r13, -40
.Ltmp20:
	.cfi_offset %r14, -32
.Ltmp21:
	.cfi_offset %r15, -24
.Ltmp22:
	.cfi_offset %rbp, -16
	movq	%rsi, %r13
	movl	%edi, %r15d
	decl	%r15d
	movl	_Pshadow_Pstandard_CString_Mclass+56(%rip), %esi
	movl	%r15d, %edi
	callq	calloc
	movq	%rax, (%rsp)            # 8-byte Spill
	movq	8(%r13), %rbp
	testq	%rbp, %rbp
	je	.LBB0_3
# BB#1:                                 # %.lr.ph
	addq	$16, %r13
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %r12d
	movq	(%rsp), %r14            # 8-byte Reload
	.align	16, 0x90
.LBB0_2:                                # =>This Inner Loop Header: Depth=1
	movl	%r12d, %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movq	%rbp, 8(%rbx)
	movq	%rbp, %rdi
	callq	strlen
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movl	%eax, 16(%rbx)
	movq	%rbx, (%r14)
	addq	$8, %r14
	movq	(%r13), %rbp
	addq	$8, %r13
	testq	%rbp, %rbp
	jne	.LBB0_2
.LBB0_3:                                # %._crit_edge
	movl	_Pshadow_Ptest_CConsoleTest_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Ptest_CConsoleTest_Mclass, (%rax)
.Ltmp0:
	movq	%rax, %rdi
	movq	(%rsp), %rsi            # 8-byte Reload
	movl	%r15d, %edx
	callq	_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1
.Ltmp1:
.LBB0_4:
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB0_5:
.Ltmp2:
	movq	32(%rax), %r14
	movq	%rax, %rdi
	callq	free
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbx
	testq	%rbx, %rbx
	jne	.LBB0_7
# BB#6:
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbx)
	movb	$0, 8(%rbx)
	movq	%rbx, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB0_7:
	movq	(%rbx), %rax
	movq	136(%rax), %rbp
	movq	(%r14), %rdi
	movl	$.L_string1470, %eax
	testq	%rdi, %rdi
	je	.LBB0_9
# BB#8:                                 # %_label1.i
	movq	(%rdi), %rax
	callq	*104(%rax)
.LBB0_9:                                # %_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject.exit
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	8(%r14), %rbx
	cmpl	$0, 16(%rbx)
	je	.LBB0_11
# BB#10:
	movq	.Lseparator+8(%rip), %rsi
	movl	.Lseparator+16(%rip), %edx
	movl	$2, %edi
	callq	write
	movl	16(%rbx), %edx
	movq	8(%rbx), %rsi
	movl	$2, %edi
	callq	write
.LBB0_11:
	movl	$2, %edi
	movl	$.Lnewline, %esi
	movl	$1, %edx
	callq	write
	movl	$1, %eax
	jmp	.LBB0_4
.Ltmp23:
	.size	main, .Ltmp23-main
	.cfi_endproc
.Leh_func_end0:
	.section	.gcc_except_table,"a",@progbits
	.align	4
GCC_except_table0:
.Lexception0:
	.byte	255                     # @LPStart Encoding = omit
	.byte	3                       # @TType Encoding = udata4
	.asciz	 "\242\200\200"         # @TType base offset
	.byte	3                       # Call site Encoding = udata4
	.byte	26                      # Call site table length
.Lset0 = .Ltmp0-.Leh_func_begin0        # >> Call Site 1 <<
	.long	.Lset0
.Lset1 = .Ltmp1-.Ltmp0                  #   Call between .Ltmp0 and .Ltmp1
	.long	.Lset1
.Lset2 = .Ltmp2-.Leh_func_begin0        #     jumps to .Ltmp2
	.long	.Lset2
	.byte	1                       #   On action: 1
.Lset3 = .Ltmp1-.Leh_func_begin0        # >> Call Site 2 <<
	.long	.Lset3
.Lset4 = .Leh_func_end0-.Ltmp1          #   Call between .Ltmp1 and .Leh_func_end0
	.long	.Lset4
	.long	0                       #     has no landing pad
	.byte	0                       #   On action: cleanup
	.byte	1                       # >> Action Record 1 <<
                                        #   Catch TypeInfo 1
	.byte	0                       #   No further actions
                                        # >> Catch TypeInfos <<
	.long	0                       # TypeInfo 1
	.align	4

	.text
	.globl	_Pshadow_Ptest_CConsoleTest_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Ptest_CConsoleTest_Mcreate,@function
_Pshadow_Ptest_CConsoleTest_Mcreate:    # @_Pshadow_Ptest_CConsoleTest_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Ptest_CConsoleTest_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp24:
	.size	_Pshadow_Ptest_CConsoleTest_Mcreate, .Ltmp24-_Pshadow_Ptest_CConsoleTest_Mcreate

	.globl	_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1
	.align	16, 0x90
	.type	_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1,@function
_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1: # @_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp31:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp32:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp33:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp34:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp35:
	.cfi_def_cfa_offset 48
.Ltmp36:
	.cfi_offset %rbx, -48
.Ltmp37:
	.cfi_offset %r12, -40
.Ltmp38:
	.cfi_offset %r14, -32
.Ltmp39:
	.cfi_offset %r15, -24
.Ltmp40:
	.cfi_offset %rbp, -16
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbx
	testq	%rbx, %rbx
	movq	%rbx, %rbp
	jne	.LBB2_3
# BB#1:                                 # %_label1
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %r14d
	movl	%r14d, %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbx)
	movb	$0, 8(%rbx)
	movq	%rbx, _Pshadow_Pio_CConsole_Minstance(%rip)
	testq	%rbx, %rbx
	movq	%rbx, %rbp
	jne	.LBB2_3
# BB#2:                                 # %_label2
	movl	%r14d, %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_3:                                # %_label3
	movq	(%rbp), %rax
	movq	160(%rax), %r14
	movl	_Pshadow_Pstandard_Cint_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movl	$12345, 8(%rax)         # imm = 0x3039
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r14
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r14d
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$72, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_5
# BB#4:                                 # %_label4
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_5:                                # %_label5
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$101, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$108, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_7
# BB#6:                                 # %_label6
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_7:                                # %_label7
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$108, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$111, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_9
# BB#8:                                 # %_label8
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_9:                                # %_label9
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$32, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$87, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_11
# BB#10:                                # %_label10
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_11:                               # %_label11
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$111, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$114, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_13
# BB#12:                                # %_label12
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_13:                               # %_label13
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$108, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$100, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbp
	testq	%rbp, %rbp
	jne	.LBB2_15
# BB#14:                                # %_label14
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbp)
	movb	$0, 8(%rbp)
	movq	%rbp, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_15:                               # %_label15
	movq	(%rbp), %rax
	movq	112(%rax), %r15
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$33, 8(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%r15
	movq	(%rbx), %rax
	movq	112(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$10, 8(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rax
	testq	%rax, %rax
	jne	.LBB2_17
# BB#16:                                # %_label16
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rax)
	movb	$0, 8(%rax)
	movq	%rax, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_17:                               # %_label17
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*168(%rcx)
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rax
	testq	%rax, %rax
	jne	.LBB2_19
# BB#18:                                # %_label18
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rax)
	movb	$0, 8(%rax)
	movq	%rax, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB2_19:                               # %_label19
	movq	(%rax), %rcx
	movq	%rax, %rdi
	movl	$.L_string1, %esi
	callq	*120(%rcx)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*168(%rax)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	movl	$.L_string2, %esi
	callq	*120(%rax)
	movq	.L_string3(%rip), %rax
	movq	(%rbx), %rcx
	movq	160(%rcx), %r15
	movl	$.L_string3, %edi
	callq	*104(%rax)
	movq	%rax, %rbp
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*192(%rax)
	movq	%rax, %rcx
	movl	$.L_string1470, %eax
	testq	%rcx, %rcx
	je	.LBB2_21
# BB#20:                                # %_label24
	movq	(%rcx), %rax
	movq	%rcx, %rdi
	callq	*104(%rax)
.LBB2_21:                               # %_label25
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rax, %r12
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$33, 8(%rax)
	movq	(%rax), %rax
	movq	104(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$33, 8(%rax)
	movq	%rax, %rdi
	callq	*%rbp
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%r15
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp41:
	.size	_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1, .Ltmp41-_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CSystem_MnanoTime
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CSystem_MnanoTime,@function
_Pshadow_Pstandard_CSystem_MnanoTime:   # @_Pshadow_Pstandard_CSystem_MnanoTime
# BB#0:
	subq	$24, %rsp
	leaq	8(%rsp), %rsi
	movl	$1, %edi
	callq	clock_gettime
	testl	%eax, %eax
	je	.LBB3_1
# BB#2:
	xorl	%eax, %eax
	addq	$24, %rsp
	ret
.LBB3_1:
	imulq	$1000000000, 8(%rsp), %rax # imm = 0x3B9ACA00
	addq	16(%rsp), %rax
	addq	$24, %rsp
	ret
.Ltmp42:
	.size	_Pshadow_Pstandard_CSystem_MnanoTime, .Ltmp42-_Pshadow_Pstandard_CSystem_MnanoTime

	.globl	_Pshadow_Pio_CConsole_MreadByte
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MreadByte,@function
_Pshadow_Pio_CConsole_MreadByte:        # @_Pshadow_Pio_CConsole_MreadByte
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp44:
	.cfi_def_cfa_offset 16
	leaq	7(%rsp), %rsi
	xorl	%edi, %edi
	movl	$1, %edx
	callq	read
	movl	%eax, %ecx
	xorb	%al, %al
	cmpl	$1, %ecx
	jne	.LBB4_2
# BB#1:
	movb	7(%rsp), %al
.LBB4_2:
	sete	%dl
	popq	%rcx
	ret
.Ltmp45:
	.size	_Pshadow_Pio_CConsole_MreadByte, .Ltmp45-_Pshadow_Pio_CConsole_MreadByte
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString,@function
_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString: # @_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp48:
	.cfi_def_cfa_offset 16
.Ltmp49:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	16(%rsi), %edx
	movq	8(%rsi), %rsi
	movl	$1, %edi
	callq	write
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp50:
	.size	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString, .Ltmp50-_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MprintLine
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintLine,@function
_Pshadow_Pio_CConsole_MprintLine:       # @_Pshadow_Pio_CConsole_MprintLine
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp53:
	.cfi_def_cfa_offset 16
.Ltmp54:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$1, %edi
	movl	$.Lnewline, %esi
	movl	$1, %edx
	callq	write
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp55:
	.size	_Pshadow_Pio_CConsole_MprintLine, .Ltmp55-_Pshadow_Pio_CConsole_MprintLine
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString,@function
_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString: # @_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp58:
	.cfi_def_cfa_offset 16
.Ltmp59:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	16(%rsi), %edx
	movq	8(%rsi), %rsi
	movl	$2, %edi
	callq	write
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp60:
	.size	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString, .Ltmp60-_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MprintErrorLine
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintErrorLine,@function
_Pshadow_Pio_CConsole_MprintErrorLine:  # @_Pshadow_Pio_CConsole_MprintErrorLine
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp63:
	.cfi_def_cfa_offset 16
.Ltmp64:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$2, %edi
	movl	$.Lnewline, %esi
	movl	$1, %edx
	callq	write
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp65:
	.size	_Pshadow_Pio_CConsole_MprintErrorLine, .Ltmp65-_Pshadow_Pio_CConsole_MprintErrorLine
	.cfi_endproc

	.align	16, 0x90
	.type	.Lshadow.exception.cleanup,@function
.Lshadow.exception.cleanup:             # @shadow.exception.cleanup
# BB#0:                                 # %entry
	movq	%rsi, %rdi
	jmp	free                    # TAILCALL
.Ltmp66:
	.size	.Lshadow.exception.cleanup, .Ltmp66-.Lshadow.exception.cleanup

	.align	16, 0x90
	.type	.Lread_encoded_value_with_base,@function
.Lread_encoded_value_with_base:         # @read_encoded_value_with_base
# BB#0:                                 # %entry
	pushq	%rax
	movq	%rcx, %r8
	cmpb	$80, %dil
	jne	.LBB10_2
# BB#1:                                 # %aligned
	addq	$7, %rdx
	andq	$-8, %rdx
	movq	(%rdx), %rax
	addq	$8, %rdx
	jmp	.LBB10_20
.LBB10_2:                               # %unaligned
	movb	%dil, %al
	andb	$15, %al
	cmpb	$12, %al
	ja	.LBB10_21
# BB#3:                                 # %unaligned
	movzbl	%al, %eax
	xorl	%ecx, %ecx
	movq	%rdx, %r10
	xorl	%r9d, %r9d
	xorl	%r11d, %r11d
	jmpq	*.LJTI10_0(,%rax,8)
.LBB10_14:                              # %slong
	leaq	8(%rdx), %r10
	movq	(%rdx), %r9
	jmp	.LBB10_15
	.align	16, 0x90
.LBB10_4:                               # %loop.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r10), %r11d
	movq	%r11, %rax
	andq	$127, %rax
	shlq	%cl, %rax
	orq	%rax, %r9
	addq	$7, %rcx
	incq	%r10
	testb	%r11b, %r11b
	js	.LBB10_4
	jmp	.LBB10_15
	.align	16, 0x90
.LBB10_5:                               # %loop.i12
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r10), %r9d
	movq	%r9, %rax
	andq	$127, %rax
	shlq	%cl, %rax
	orq	%rax, %r11
	addq	$7, %rcx
	incq	%r10
	testb	%r9b, %r9b
	js	.LBB10_5
# BB#6:                                 # %loop.end.i
	cmpq	$63, %rcx
	ja	.LBB10_9
# BB#7:                                 # %continue.i
	testb	$64, %r9b
	je	.LBB10_9
# BB#8:                                 # %negate.i
	movq	$-1, %rax
                                        # kill: CL<def> CL<kill> RCX<kill>
	shlq	%cl, %rax
	orq	%rax, %r11
.LBB10_9:                               # %negate.i
	movq	%r11, %r9
	jmp	.LBB10_15
.LBB10_10:                              # %ushort
	leaq	2(%rdx), %r10
	movzwl	(%rdx), %r9d
	jmp	.LBB10_15
.LBB10_11:                              # %uint
	leaq	4(%rdx), %r10
	movl	(%rdx), %r9d
	jmp	.LBB10_15
.LBB10_12:                              # %sshort
	leaq	2(%rdx), %r10
	movswq	(%rdx), %r9
	jmp	.LBB10_15
.LBB10_13:                              # %sint
	leaq	4(%rdx), %r10
	movslq	(%rdx), %r9
.LBB10_15:                              # %continue
	xorl	%eax, %eax
	testq	%r9, %r9
	je	.LBB10_19
# BB#16:                                # %relative
	movb	%dil, %al
	andb	$112, %al
	cmpb	$16, %al
	cmoveq	%rdx, %rsi
	addq	%rsi, %r9
	testb	%dil, %dil
	js	.LBB10_18
# BB#17:
	movq	%r10, %rdx
	movq	%r9, %rax
	jmp	.LBB10_20
.LBB10_18:                              # %indirect
	movq	(%r9), %rax
.LBB10_19:                              # %indirect
	movq	%r10, %rdx
.LBB10_20:                              # %return
	movq	%rax, (%r8)
	movq	%rdx, %rax
	popq	%rdx
	ret
.LBB10_21:                              # %abort
	callq	abort
.Ltmp67:
	.size	.Lread_encoded_value_with_base, .Ltmp67-.Lread_encoded_value_with_base
	.section	.rodata,"a",@progbits
	.align	8
.LJTI10_0:
	.quad	.LBB10_14
	.quad	.LBB10_4
	.quad	.LBB10_10
	.quad	.LBB10_11
	.quad	.LBB10_14
	.quad	.LBB10_21
	.quad	.LBB10_21
	.quad	.LBB10_21
	.quad	.LBB10_21
	.quad	.LBB10_5
	.quad	.LBB10_12
	.quad	.LBB10_13
	.quad	.LBB10_14

	.text
	.globl	__shadow_personality_v0
	.align	16, 0x90
	.type	__shadow_personality_v0,@function
__shadow_personality_v0:                # @__shadow_personality_v0
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbp
.Ltmp75:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp76:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp77:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp78:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp79:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp80:
	.cfi_def_cfa_offset 56
	subq	$120, %rsp
.Ltmp81:
	.cfi_def_cfa_offset 176
.Ltmp82:
	.cfi_offset %rbx, -56
.Ltmp83:
	.cfi_offset %r12, -48
.Ltmp84:
	.cfi_offset %r13, -40
.Ltmp85:
	.cfi_offset %r14, -32
.Ltmp86:
	.cfi_offset %r15, -24
.Ltmp87:
	.cfi_offset %rbp, -16
	movq	%r8, %rbx
	movq	%rdx, 8(%rsp)           # 8-byte Spill
	movl	%esi, %r12d
	cmpl	$1, %edi
	jne	.LBB11_1
# BB#3:                                 # %version.valid
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rbx, %rdi
	callq	_Unwind_GetLanguageSpecificData
	movq	%rax, %r13
	movl	$8, %eax
	testq	%r13, %r13
	je	.LBB11_2
# BB#4:                                 # %lsda.valid
	movq	%rbx, %rdi
	callq	_Unwind_GetRegionStart
	movb	(%r13), %r14b
	incq	%r13
	cmpb	$-1, %r14b
	jne	.LBB11_6
# BB#5:
	movq	%rax, %rcx
	movq	%rax, %rbp
	jmp	.LBB11_19
.LBB11_6:                               # %continue.i.i
	movq	%rax, %rbp
	movb	%r14b, %cl
	andb	$112, %cl
	xorl	%eax, %eax
	cmpb	$15, %cl
	ja	.LBB11_8
# BB#7:                                 # %continue.i.i
	testb	%cl, %cl
	je	.LBB11_18
	jmp	.LBB11_16
.LBB11_8:                               # %continue.i.i
	cmpb	$31, %cl
	ja	.LBB11_10
# BB#9:                                 # %continue.i.i
	cmpb	$16, %cl
	je	.LBB11_18
	jmp	.LBB11_16
.LBB11_10:                              # %continue.i.i
	cmpb	$47, %cl
	ja	.LBB11_13
# BB#11:                                # %continue.i.i
	cmpb	$32, %cl
	jne	.LBB11_16
# BB#12:                                # %ret.text.i.i
	movq	%rbx, %rdi
	callq	_Unwind_GetTextRelBase
	jmp	.LBB11_18
.LBB11_13:                              # %continue.i.i
	cmpb	$48, %cl
	je	.LBB11_17
# BB#14:                                # %continue.i.i
	cmpb	$64, %cl
	jne	.LBB11_15
# BB#122:                               # %ret.func.i.i
	movq	%rbx, %rdi
	callq	_Unwind_GetRegionStart
	jmp	.LBB11_18
.LBB11_17:                              # %ret.data.i.i
	movq	%rbx, %rdi
	callq	_Unwind_GetDataRelBase
	jmp	.LBB11_18
.LBB11_15:                              # %continue.i.i
	cmpb	$80, %cl
	jne	.LBB11_16
.LBB11_18:                              # %read_encoded_value.exit
	movzbl	%r14b, %edi
	leaq	112(%rsp), %rcx
	movq	%rax, %rsi
	movq	%r13, %rdx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %r13
	movq	112(%rsp), %rcx
.LBB11_19:                              # %landing_pad.start.done
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movb	(%r13), %r14b
	incq	%r13
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	cmpb	$-1, %r14b
	je	.LBB11_22
	.align	16, 0x90
.LBB11_20:                              # %loop.i
                                        # =>This Inner Loop Header: Depth=1
	movzbl	(%r13), %eax
	movq	%rax, %rdx
	andq	$127, %rdx
	shlq	%cl, %rdx
	orq	%rdx, %rsi
	addq	$7, %rcx
	incq	%r13
	testb	%al, %al
	js	.LBB11_20
# BB#21:                                # %read_uleb128.exit
	movq	%rsi, 112(%rsp)
	addq	%r13, %rsi
.LBB11_22:                              # %ttype.done
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movl	%r12d, %eax
	andl	$8, %eax
	movl	%eax, (%rsp)            # 4-byte Spill
	andl	$1, %r12d
	movb	(%r13), %r15b
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	.align	16, 0x90
.LBB11_23:                              # %loop.i12
                                        # =>This Inner Loop Header: Depth=1
	movzbl	1(%r13), %eax
	movq	%rax, %rdx
	andq	$127, %rdx
	shlq	%cl, %rdx
	orq	%rdx, %rsi
	incq	%r13
	addq	$7, %rcx
	testb	%al, %al
	js	.LBB11_23
# BB#24:                                # %read_uleb128.exit14
	movq	%rsi, 112(%rsp)
	movq	$0, 72(%rsp)            # 8-byte Folded Spill
	cmpb	$-1, %r14b
	jne	.LBB11_26
# BB#25:
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jmp	.LBB11_39
.LBB11_26:                              # %continue.i
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	movb	%r14b, %al
	andb	$112, %al
	cmpb	$15, %al
	ja	.LBB11_28
# BB#27:                                # %continue.i
	testb	%al, %al
	je	.LBB11_39
	jmp	.LBB11_36
.LBB11_28:                              # %continue.i
	cmpb	$31, %al
	ja	.LBB11_30
# BB#29:                                # %continue.i
	cmpb	$16, %al
	je	.LBB11_39
	jmp	.LBB11_36
.LBB11_30:                              # %continue.i
	cmpb	$47, %al
	ja	.LBB11_33
# BB#31:                                # %continue.i
	cmpb	$32, %al
	jne	.LBB11_36
# BB#32:                                # %ret.text.i
	movq	%rbx, %rdi
	callq	_Unwind_GetTextRelBase
	jmp	.LBB11_38
.LBB11_33:                              # %continue.i
	cmpb	$48, %al
	je	.LBB11_37
# BB#34:                                # %continue.i
	cmpb	$64, %al
	jne	.LBB11_35
# BB#123:                               # %ret.func.i
	movq	%rbx, %rdi
	callq	_Unwind_GetRegionStart
	jmp	.LBB11_38
.LBB11_37:                              # %ret.data.i
	movq	%rbx, %rdi
	callq	_Unwind_GetDataRelBase
.LBB11_38:                              # %ret.data.i
	movq	%rax, 72(%rsp)          # 8-byte Spill
.LBB11_39:                              # %base_of_encoded_value.exit
	movb	%r14b, 7(%rsp)          # 1-byte Spill
	movq	24(%rsp), %rax          # 8-byte Reload
	leaq	(%r13,%rax), %rax
	movq	%rax, 96(%rsp)          # 8-byte Spill
	leaq	1(%r13), %r14
	movq	%rbx, %rdi
	movq	%rbx, 16(%rsp)          # 8-byte Spill
	callq	_Unwind_GetIP
	movq	%rax, 88(%rsp)          # 8-byte Spill
	cmpb	$-1, %r15b
	jne	.LBB11_46
# BB#40:
	movl	%r12d, 44(%rsp)         # 4-byte Spill
	movq	%rbp, %r12
	.align	16, 0x90
.LBB11_41:                              # %find.action.cond.us
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_43 Depth 2
	cmpq	96(%rsp), %r14          # 8-byte Folded Reload
	ja	.LBB11_1
# BB#42:                                # %read_encoded_value.exit54.us
                                        #   in Loop: Header=BB11_41 Depth=1
	xorl	%ebx, %ebx
	movl	$255, %edi
	xorl	%esi, %esi
	movq	%r14, %rdx
	leaq	112(%rsp), %rbp
	movq	%rbp, %rcx
	callq	.Lread_encoded_value_with_base
	movq	112(%rsp), %r15
	movl	$255, %edi
	xorl	%esi, %esi
	movq	%rax, %rdx
	movq	%rbp, %rcx
	callq	.Lread_encoded_value_with_base
	movq	112(%rsp), %rcx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movl	$255, %edi
	xorl	%esi, %esi
	movq	%rax, %rdx
	movq	%rbp, %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %r14
	movq	112(%rsp), %rdx
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB11_43:                              # %loop.i66.us
                                        #   Parent Loop BB11_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r14), %esi
	movq	%rsi, %rdi
	andq	$127, %rdi
	movb	%bl, %cl
	shlq	%cl, %rdi
	orq	%rdi, %rbp
	addq	$7, %rbx
	incq	%r14
	testb	%sil, %sil
	js	.LBB11_43
# BB#44:                                # %read_uleb128.exit68.us
                                        #   in Loop: Header=BB11_41 Depth=1
	movq	%rbp, 112(%rsp)
	leaq	(%r12,%r15), %rcx
	movq	88(%rsp), %rax          # 8-byte Reload
	cmpq	%rcx, %rax
	jbe	.LBB11_1
# BB#45:                                # %find.action.check.us
                                        #   in Loop: Header=BB11_41 Depth=1
	addq	104(%rsp), %r15         # 8-byte Folded Reload
	addq	%r12, %r15
	cmpq	%r15, %rax
	ja	.LBB11_41
	jmp	.LBB11_91
.LBB11_46:
	movl	%r12d, 44(%rsp)         # 4-byte Spill
	movzbl	%r15b, %eax
	movl	%eax, 104(%rsp)         # 4-byte Spill
	andb	$112, %r15b
	movq	%rbp, %rax
	movq	%rax, 56(%rsp)          # 8-byte Spill
	.align	16, 0x90
.LBB11_47:                              # %find.action.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_88 Depth 2
	cmpq	96(%rsp), %r14          # 8-byte Folded Reload
	ja	.LBB11_1
# BB#48:                                # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$15, %r15b
	ja	.LBB11_50
# BB#49:                                # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	testb	%r15b, %r15b
	je	.LBB11_60
	jmp	.LBB11_52
	.align	16, 0x90
.LBB11_50:                              # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$31, %r15b
	ja	.LBB11_53
# BB#51:                                # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$16, %r15b
	jne	.LBB11_52
.LBB11_60:                              # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%ebp, %ebp
	movl	104(%rsp), %edi         # 4-byte Reload
	xorl	%esi, %esi
	movq	%r14, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %rbx
	movq	112(%rsp), %r12
	cmpb	$15, %r15b
	ja	.LBB11_62
# BB#61:                                # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	testb	%r15b, %r15b
	je	.LBB11_75
	jmp	.LBB11_69
	.align	16, 0x90
.LBB11_62:                              # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$31, %r15b
	ja	.LBB11_64
# BB#63:                                # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$16, %r15b
	je	.LBB11_75
	jmp	.LBB11_69
	.align	16, 0x90
.LBB11_53:                              # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$47, %r15b
	ja	.LBB11_57
# BB#54:                                # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$32, %r15b
	jne	.LBB11_52
# BB#55:                                # %continue.i.i31.thread
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetTextRelBase
	movl	104(%rsp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	movq	%r14, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %rbx
	movq	112(%rsp), %r12
	jmp	.LBB11_56
.LBB11_64:                              # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$47, %r15b
	ja	.LBB11_66
# BB#65:                                # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$32, %r15b
	jne	.LBB11_69
.LBB11_56:                              # %ret.text.i.i33
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetTextRelBase
	jmp	.LBB11_74
.LBB11_57:                              # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$48, %r15b
	je	.LBB11_70
# BB#58:                                # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$64, %r15b
	jne	.LBB11_59
# BB#72:                                # %continue.i.i31.thread143
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetRegionStart
	movl	104(%rsp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	movq	%r14, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %rbx
	movq	112(%rsp), %r12
	jmp	.LBB11_73
.LBB11_66:                              # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$48, %r15b
	je	.LBB11_71
# BB#67:                                # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$64, %r15b
	jne	.LBB11_68
.LBB11_73:                              # %ret.func.i.i37
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetRegionStart
	jmp	.LBB11_74
.LBB11_70:                              # %continue.i.i31.thread138
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetDataRelBase
	movl	104(%rsp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	movq	%r14, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %rbx
	movq	112(%rsp), %r12
.LBB11_71:                              # %ret.data.i.i35
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetDataRelBase
	.align	16, 0x90
.LBB11_74:                              # %ret.func.i.i37
                                        #   in Loop: Header=BB11_47 Depth=1
	movq	%rax, %rbp
.LBB11_75:                              # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	104(%rsp), %edi         # 4-byte Reload
	movq	%rbp, %rsi
	movq	%rbx, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %rbx
	xorl	%eax, %eax
	movq	112(%rsp), %rcx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	cmpb	$15, %r15b
	ja	.LBB11_77
# BB#76:                                # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	testb	%r15b, %r15b
	je	.LBB11_87
	jmp	.LBB11_85
	.align	16, 0x90
.LBB11_77:                              # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$31, %r15b
	ja	.LBB11_79
# BB#78:                                # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$16, %r15b
	je	.LBB11_87
	jmp	.LBB11_85
	.align	16, 0x90
.LBB11_79:                              # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$47, %r15b
	ja	.LBB11_82
# BB#80:                                # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$32, %r15b
	jne	.LBB11_85
# BB#81:                                # %ret.text.i.i46
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetTextRelBase
	jmp	.LBB11_87
.LBB11_82:                              # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$48, %r15b
	je	.LBB11_86
# BB#83:                                # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$64, %r15b
	jne	.LBB11_84
# BB#124:                               # %ret.func.i.i50
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetRegionStart
	jmp	.LBB11_87
.LBB11_59:                              # %continue.i.i18
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$80, %r15b
	jne	.LBB11_52
	jmp	.LBB11_60
.LBB11_86:                              # %ret.data.i.i48
                                        #   in Loop: Header=BB11_47 Depth=1
	xorl	%edi, %edi
	callq	_Unwind_GetDataRelBase
	jmp	.LBB11_87
.LBB11_84:                              # %continue.i.i44
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$80, %r15b
	jne	.LBB11_85
	.align	16, 0x90
.LBB11_87:                              # %read_encoded_value.exit54
                                        #   in Loop: Header=BB11_47 Depth=1
	movl	104(%rsp), %edi         # 4-byte Reload
	movq	%rax, %rsi
	movq	%rbx, %rdx
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	%rax, %r14
	xorl	%ecx, %ecx
	movq	112(%rsp), %rdx
	xorl	%ebp, %ebp
	.align	16, 0x90
.LBB11_88:                              # %loop.i66
                                        #   Parent Loop BB11_47 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r14), %esi
	movq	%rsi, %rdi
	andq	$127, %rdi
	shlq	%cl, %rdi
	orq	%rdi, %rbp
	addq	$7, %rcx
	incq	%r14
	testb	%sil, %sil
	js	.LBB11_88
# BB#89:                                # %read_uleb128.exit68
                                        #   in Loop: Header=BB11_47 Depth=1
	movq	%rbp, 112(%rsp)
	movq	56(%rsp), %rsi          # 8-byte Reload
	leaq	(%rsi,%r12), %rcx
	movq	88(%rsp), %rax          # 8-byte Reload
	cmpq	%rcx, %rax
	jbe	.LBB11_1
# BB#90:                                # %find.action.check
                                        #   in Loop: Header=BB11_47 Depth=1
	addq	80(%rsp), %r12          # 8-byte Folded Reload
	addq	%rsi, %r12
	cmpq	%r12, %rax
	ja	.LBB11_47
	jmp	.LBB11_91
.LBB11_68:                              # %continue.i.i31
                                        #   in Loop: Header=BB11_47 Depth=1
	cmpb	$80, %r15b
	je	.LBB11_75
.LBB11_69:                              # %abort.i.i38
	callq	abort
.LBB11_1:
	movl	$3, %eax
.LBB11_2:                               # %return.error
	addq	$120, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB11_91:                              # %find.action.success
	testq	%rdx, %rdx
	je	.LBB11_92
# BB#93:                                # %landing_pad.valid
	addq	%rdx, 32(%rsp)          # 8-byte Folded Spill
	testq	%rbp, %rbp
	je	.LBB11_119
# BB#94:                                # %action_record.valid
	xorl	%r15d, %r15d
	movb	7(%rsp), %bl            # 1-byte Reload
	cmpb	$-1, %bl
	movq	24(%rsp), %rsi          # 8-byte Reload
	je	.LBB11_100
# BB#95:                                # %continue.i71
	movb	%bl, %cl
	andb	$7, %cl
	cmpb	$4, %cl
	ja	.LBB11_98
# BB#96:                                # %continue.i71
	movzbl	%cl, %ecx
	movl	$8, %r15d
	jmpq	*.LJTI11_0(,%rcx,8)
.LBB11_99:                              # %return.2.i
	movl	$2, %r15d
	jmp	.LBB11_100
.LBB11_92:
	movl	$8, %eax
	jmp	.LBB11_2
.LBB11_35:                              # %continue.i
	cmpb	$80, %al
	je	.LBB11_39
.LBB11_36:                              # %abort.i
	callq	abort
.LBB11_97:                              # %return.4.i
	movl	$4, %r15d
.LBB11_100:                             # %size_of_encoded_value.exit
	xorl	%ecx, %ecx
	cmpl	$0, (%rsp)              # 4-byte Folded Reload
	movl	$0, %r12d
	jne	.LBB11_103
# BB#101:                               # %exception.class.check
	movq	8(%rsp), %rdx           # 8-byte Reload
	cmpq	%rdx, .Lshadow.exception.class(%rip)
	movl	$0, %r12d
	jne	.LBB11_103
# BB#102:                               # %thrown.class.get
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	32(%rdx), %rdx
	movq	(%rdx), %r12
.LBB11_103:                             # %find.catch.preheader
	addq	%rbp, %rsi
	addq	%rsi, %r13
	negl	%r15d
	movzbl	%bl, %r14d
	jmp	.LBB11_104
	.align	16, 0x90
.LBB11_117:                             # %action_record.next.valid
                                        #   in Loop: Header=BB11_104 Depth=1
	incl	%eax
	movslq	%eax, %rax
	addq	%rax, %rbp
	xorl	%ecx, %ecx
	movq	%rbp, %r13
.LBB11_104:                             # %find.catch.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_105 Depth 2
                                        #     Child Loop BB11_111 Depth 2
	xorl	%ebx, %ebx
.LBB11_105:                             # %loop.i84
                                        #   Parent Loop BB11_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	%r13, %rbp
	movzbl	(%rbp), %eax
	movq	%rax, %rdx
	andq	$127, %rdx
	shlq	%cl, %rdx
	orq	%rdx, %rbx
	addq	$7, %rcx
	leaq	1(%rbp), %r13
	testb	%al, %al
	js	.LBB11_105
# BB#106:                               # %loop.end.i
                                        #   in Loop: Header=BB11_104 Depth=1
	cmpq	$63, %rcx
	ja	.LBB11_109
# BB#107:                               # %continue.i85
                                        #   in Loop: Header=BB11_104 Depth=1
	testb	$64, %al
	je	.LBB11_109
# BB#108:                               # %negate.i
                                        #   in Loop: Header=BB11_104 Depth=1
                                        # kill: CL<def> CL<kill> RCX<kill>
	movq	$-1, %rax
	shlq	%cl, %rax
	orq	%rax, %rbx
.LBB11_109:                             # %read_sleb128.exit
                                        #   in Loop: Header=BB11_104 Depth=1
	movq	%rbx, 112(%rsp)
	testl	%ebx, %ebx
	je	.LBB11_119
# BB#110:                               # %find.catch.check
                                        #   in Loop: Header=BB11_104 Depth=1
	movl	%ebx, %eax
	imull	%r15d, %eax
	movslq	%eax, %rdx
	addq	64(%rsp), %rdx          # 8-byte Folded Reload
	movl	%r14d, %edi
	movq	72(%rsp), %rsi          # 8-byte Reload
	leaq	112(%rsp), %rcx
	callq	.Lread_encoded_value_with_base
	movq	112(%rsp), %rsi
	movq	%r12, %rdi
	callq	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$0, %eax
	jne	.LBB11_118
	.align	16, 0x90
.LBB11_111:                             # %loop.i97
                                        #   Parent Loop BB11_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movzbl	(%r13), %edx
	movq	%rdx, %rsi
	andq	$127, %rsi
	shlq	%cl, %rsi
	orq	%rsi, %rax
	addq	$7, %rcx
	incq	%r13
	testb	%dl, %dl
	js	.LBB11_111
# BB#112:                               # %loop.end.i99
                                        #   in Loop: Header=BB11_104 Depth=1
	cmpq	$63, %rcx
	ja	.LBB11_115
# BB#113:                               # %continue.i102
                                        #   in Loop: Header=BB11_104 Depth=1
	testb	$64, %dl
	je	.LBB11_115
# BB#114:                               # %negate.i105
                                        #   in Loop: Header=BB11_104 Depth=1
                                        # kill: CL<def> CL<kill> RCX<kill>
	movq	$-1, %rdx
	shlq	%cl, %rdx
	orq	%rdx, %rax
.LBB11_115:                             # %read_sleb128.exit108
                                        #   in Loop: Header=BB11_104 Depth=1
	movq	%rax, 112(%rsp)
	testq	%rax, %rax
	jne	.LBB11_117
# BB#116:
	movl	$8, %eax
	jmp	.LBB11_2
.LBB11_119:                             # %found.cleanup
	xorl	%ebx, %ebx
	cmpl	$0, 44(%rsp)            # 4-byte Folded Reload
	movq	16(%rsp), %rbp          # 8-byte Reload
	movl	$8, %eax
	jmp	.LBB11_120
.LBB11_118:                             # %found.catch
	movl	$6, %eax
	cmpl	$0, 44(%rsp)            # 4-byte Folded Reload
	movq	16(%rsp), %rbp          # 8-byte Reload
.LBB11_120:                             # %found.cleanup
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %r14          # 8-byte Reload
	jne	.LBB11_2
# BB#121:                               # %install.context
	movq	%rbp, %rdi
	xorl	%esi, %esi
	callq	_Unwind_SetGR
	movq	%rbp, %rdi
	movl	$1, %esi
	movq	%rbx, %rdx
	callq	_Unwind_SetGR
	movq	%rbp, %rdi
	movq	%r14, %rsi
	callq	_Unwind_SetIP
	movl	$7, %eax
	jmp	.LBB11_2
.LBB11_98:                              # %abort.i72
	callq	abort
.LBB11_16:                              # %abort.i.i
	callq	abort
.LBB11_52:                              # %abort.i.i25
	callq	abort
.LBB11_85:                              # %abort.i.i51
	callq	abort
.Ltmp88:
	.size	__shadow_personality_v0, .Ltmp88-__shadow_personality_v0
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI11_0:
	.quad	.LBB11_100
	.quad	.LBB11_98
	.quad	.LBB11_99
	.quad	.LBB11_97
	.quad	.LBB11_100

	.text
	.globl	__shadow_catch
	.align	16, 0x90
	.type	__shadow_catch,@function
__shadow_catch:                         # @__shadow_catch
# BB#0:                                 # %entry
	pushq	%rbx
	movq	32(%rdi), %rbx
	callq	free
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp89:
	.size	__shadow_catch, .Ltmp89-__shadow_catch

	.globl	_Pshadow_Pstandard_CException_Mthrow__
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CException_Mthrow__,@function
_Pshadow_Pstandard_CException_Mthrow__: # @_Pshadow_Pstandard_CException_Mthrow__
	.cfi_startproc
# BB#0:                                 # %entry
	pushq	%rbx
.Ltmp92:
	.cfi_def_cfa_offset 16
.Ltmp93:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movl	$40, %edi
	callq	malloc
	movq	.Lshadow.exception.class(%rip), %rcx
	movq	%rcx, (%rax)
	movq	$.Lshadow.exception.cleanup, 8(%rax)
	movq	%rbx, 32(%rax)
	movq	%rax, %rdi
	callq	_Unwind_RaiseException
	callq	abort
.Ltmp94:
	.size	_Pshadow_Pstandard_CException_Mthrow__, .Ltmp94-_Pshadow_Pstandard_CException_Mthrow__
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_MgetBaseClass
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_MgetBaseClass,@function
_Pshadow_Pstandard_CArray_MgetBaseClass: # @_Pshadow_Pstandard_CArray_MgetBaseClass
# BB#0:
	movq	24(%rdi), %rax
	ret
.Ltmp95:
	.size	_Pshadow_Pstandard_CArray_MgetBaseClass, .Ltmp95-_Pshadow_Pstandard_CArray_MgetBaseClass

	.globl	_Pshadow_Pstandard_CArray_Mdims
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mdims,@function
_Pshadow_Pstandard_CArray_Mdims:        # @_Pshadow_Pstandard_CArray_Mdims
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp103:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp104:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp105:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp106:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp107:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp108:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp109:
	.cfi_def_cfa_offset 64
.Ltmp110:
	.cfi_offset %rbx, -56
.Ltmp111:
	.cfi_offset %r12, -48
.Ltmp112:
	.cfi_offset %r13, -40
.Ltmp113:
	.cfi_offset %r14, -32
.Ltmp114:
	.cfi_offset %r15, -24
.Ltmp115:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %r12
	movl	16(%rdi), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	152(%rax), %r13
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*%r13
	movl	(%rax), %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp116:
	.size	_Pshadow_Pstandard_CArray_Mdims, .Ltmp116-_Pshadow_Pstandard_CArray_Mdims
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_Mlengths
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mlengths,@function
_Pshadow_Pstandard_CArray_Mlengths:     # @_Pshadow_Pstandard_CArray_Mlengths
# BB#0:
	movq	8(%rdi), %rax
	movl	16(%rdi), %edx
	ret
.Ltmp117:
	.size	_Pshadow_Pstandard_CArray_Mlengths, .Ltmp117-_Pshadow_Pstandard_CArray_Mlengths

	.globl	_Pshadow_Pstandard_CArray_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_MtoString,@function
_Pshadow_Pstandard_CArray_MtoString:    # @_Pshadow_Pstandard_CArray_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp125:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp126:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp127:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp128:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp129:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp130:
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
.Ltmp131:
	.cfi_def_cfa_offset 96
.Ltmp132:
	.cfi_offset %rbx, -56
.Ltmp133:
	.cfi_offset %r12, -48
.Ltmp134:
	.cfi_offset %r13, -40
.Ltmp135:
	.cfi_offset %r14, -32
.Ltmp136:
	.cfi_offset %r15, -24
.Ltmp137:
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	(%r14), %rax
	callq	*160(%rax)
	testl	%eax, %eax
	je	.LBB17_1
# BB#3:                                 # %_label2
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%rbp)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%rbp)
	movl	$10, 16(%rbp)
	movl	$0, 24(%rbp)
	movq	(%rbp), %rax
	movq	%rbp, %rdi
	movl	$.L_string230, %esi
	callq	*112(%rax)
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*120(%rax)
	movl	%eax, %ebx
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	%ebx, %edi
	callq	calloc
	movl	%ebx, 32(%rsp)
	movq	%rax, 24(%rsp)
	movq	(%r14), %rax
	movq	24(%rsp), %rbx
	movq	%r14, %rdi
	callq	*152(%rax)
	movl	(%rbx), %ecx
	cmpl	(%rax), %ecx
	je	.LBB17_12
# BB#4:
	movb	$1, %cl
	.align	16, 0x90
.LBB17_5:                               # %_label3
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_9 Depth 2
	testb	$1, %cl
	jne	.LBB17_7
# BB#6:                                 # %_label7
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	(%rbp), %rax
	movq	%rbp, %rdi
	movl	$.L_string332, %esi
	callq	*112(%rax)
.LBB17_7:                               # %_label8
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	(%rbp), %rax
	movq	112(%rax), %rbx
	movq	(%r14), %rax
	movl	32(%rsp), %r12d
	movq	24(%rsp), %r13
	movq	%r14, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	callq	*136(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	*%rbx
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebp
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %r15
	movl	%r12d, (%r15)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %ebx
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%r15, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r15
	movl	$1, %edi
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*%r15
	movl	%eax, %ebp
	jmp	.LBB17_9
	.align	16, 0x90
.LBB17_8:                               # %_label9
                                        #   in Loop: Header=BB17_9 Depth=2
	movl	$0, (%rbx,%rcx,4)
	movl	20(%rsp), %ebp
.LBB17_9:                               # %_label9
                                        #   Parent Loop BB17_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decl	%ebp
	movl	%ebp, 20(%rsp)
	movslq	%ebp, %rax
	movq	24(%rsp), %rbx
	incl	(%rbx,%rax,4)
	testl	%eax, %eax
	jle	.LBB17_11
# BB#10:                                # %_label12
                                        #   in Loop: Header=BB17_9 Depth=2
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*152(%rax)
	movslq	%ebp, %rcx
	movl	(%rbx,%rcx,4), %edx
	cmpl	(%rax,%rcx,4), %edx
	je	.LBB17_8
.LBB17_11:                              # %_label4.loopexit
                                        #   in Loop: Header=BB17_5 Depth=1
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*152(%rax)
	movl	(%rbx), %edx
	xorb	%cl, %cl
	cmpl	(%rax), %edx
	movq	8(%rsp), %rbp           # 8-byte Reload
	jne	.LBB17_5
.LBB17_12:                              # %_label5
	movq	(%rbp), %rax
	movq	%rbp, %rdi
	movl	$.L_string434, %esi
	callq	*112(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*104(%rcx)
	jmp	.LBB17_2
.LBB17_1:                               # %_label0
	movl	$.L_string128, %eax
.LBB17_2:                               # %_label0
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp138:
	.size	_Pshadow_Pstandard_CArray_MtoString, .Ltmp138-_Pshadow_Pstandard_CArray_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject,@function
_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject: # @_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rdi)
	movq	%rsi, 24(%rdi)
	movl	%ecx, 16(%rdi)
	movq	%rdx, 8(%rdi)
	movq	%r8, 32(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp139:
	.size	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject, .Ltmp139-_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1_Pshadow_Pstandard_CObject

	.globl	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1,@function
_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1: # @_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp147:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp148:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp149:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp150:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp151:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp152:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp153:
	.cfi_def_cfa_offset 64
.Ltmp154:
	.cfi_offset %rbx, -56
.Ltmp155:
	.cfi_offset %r12, -48
.Ltmp156:
	.cfi_offset %r13, -40
.Ltmp157:
	.cfi_offset %r14, -32
.Ltmp158:
	.cfi_offset %r15, -24
.Ltmp159:
	.cfi_offset %rbp, -16
	movl	%ecx, %r15d
	movq	%rdx, %r12
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rbx)
	movq	%rsi, 24(%rbx)
	movq	$0, 32(%rbx)
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebp
	xorl	%edi, %edi
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$0, 16(%rbx)
	movl	$1, %edi
	movl	%ebp, %esi
	movl	%ebp, %r14d
	callq	calloc
	movq	%rax, %rbp
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%r15d, (%rbp)
	movl	%r15d, %r13d
	movl	%edi, %r15d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	64(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r13d, (%rbp)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*(%rsp)                 # 8-byte Folded Reload
	movq	8(%rax), %rcx
	movq	32(%rax), %rax
	movl	(%rcx), %ecx
	movl	%ecx, 16(%rbx)
	movq	%rax, 8(%rbx)
	movq	(%rbx), %rax
	movq	24(%rbx), %rbp
	movq	%rbx, %rdi
	callq	*160(%rax)
	movl	56(%rbp), %esi
	movl	%eax, %edi
	callq	calloc
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp160:
	.size	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1, .Ltmp160-_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_Mcopy
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mcopy,@function
_Pshadow_Pstandard_CArray_Mcopy:        # @_Pshadow_Pstandard_CArray_Mcopy
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp168:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp169:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp170:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp171:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp172:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp173:
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
.Ltmp174:
	.cfi_def_cfa_offset 96
.Ltmp175:
	.cfi_offset %rbx, -56
.Ltmp176:
	.cfi_offset %r12, -48
.Ltmp177:
	.cfi_offset %r13, -40
.Ltmp178:
	.cfi_offset %r14, -32
.Ltmp179:
	.cfi_offset %r15, -24
.Ltmp180:
	.cfi_offset %rbp, -16
	movq	%rdi, %r12
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbp
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rbp)
	movq	(%r12), %rax
	movq	24(%r12), %rbx
	movq	%r12, %rdi
	callq	*160(%rax)
	movl	56(%rbx), %esi
	movl	%eax, %edi
	callq	calloc
	movq	%rax, %r14
	movq	(%r12), %rax
	movq	24(%r12), %rbx
	movq	%r12, %rdi
	callq	*152(%rax)
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rbp)
	movq	%rbx, 24(%rbp)
	movl	%edx, 16(%rbp)
	movq	%rax, 8(%rbp)
	movq	%r14, 32(%rbp)
	movq	(%r12), %rax
	movq	%r12, %rdi
	callq	*120(%rax)
	movl	%eax, %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	%ebp, %edi
	callq	calloc
	movl	%ebp, 32(%rsp)
	movq	%rax, 24(%rsp)
	movq	(%r12), %rax
	movq	24(%rsp), %rbx
	jmp	.LBB20_1
	.align	16, 0x90
.LBB20_6:                               # %_label15.loopexit
                                        #   in Loop: Header=BB20_1 Depth=1
	movq	(%r12), %rax
.LBB20_1:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_4 Depth 2
	movq	%r12, %rdi
	callq	*152(%rax)
	movl	(%rbx), %ecx
	cmpl	(%rax), %ecx
	je	.LBB20_7
# BB#2:                                 # %_label14
                                        #   in Loop: Header=BB20_1 Depth=1
	movq	8(%rsp), %rbp           # 8-byte Reload
	movq	(%rbp), %rax
	movq	144(%rax), %rbx
	movq	(%r12), %rax
	movl	32(%rsp), %r15d
	movq	24(%rsp), %r13
	movq	%r12, %rdi
	movq	%r13, %rsi
	movl	%r15d, %edx
	callq	*136(%rax)
	movq	%rbp, %rdi
	movq	%r13, %rsi
	movl	%r15d, %edx
	movq	%rax, %rcx
	callq	*%rbx
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebp
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %r14
	movl	%r15d, (%r14)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %ebx
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%r14, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r14
	movl	$1, %edi
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*%r14
	movl	%eax, %ebp
	jmp	.LBB20_4
	.align	16, 0x90
.LBB20_3:                               # %_label17
                                        #   in Loop: Header=BB20_4 Depth=2
	movl	$0, (%rbx,%rcx,4)
	movl	20(%rsp), %ebp
.LBB20_4:                               # %_label17
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	decl	%ebp
	movl	%ebp, 20(%rsp)
	movslq	%ebp, %rax
	movq	24(%rsp), %rbx
	incl	(%rbx,%rax,4)
	testl	%eax, %eax
	jle	.LBB20_6
# BB#5:                                 # %_label20
                                        #   in Loop: Header=BB20_4 Depth=2
	movq	(%r12), %rax
	movq	%r12, %rdi
	callq	*152(%rax)
	movslq	%ebp, %rcx
	movl	(%rbx,%rcx,4), %edx
	cmpl	(%rax,%rcx,4), %edx
	je	.LBB20_3
	jmp	.LBB20_6
.LBB20_7:                               # %_label16
	movq	8(%rsp), %rax           # 8-byte Reload
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp181:
	.size	_Pshadow_Pstandard_CArray_Mcopy, .Ltmp181-_Pshadow_Pstandard_CArray_Mcopy
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_Msize
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Msize,@function
_Pshadow_Pstandard_CArray_Msize:        # @_Pshadow_Pstandard_CArray_Msize
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp189:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp190:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp191:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp192:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp193:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp194:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp195:
	.cfi_def_cfa_offset 80
.Ltmp196:
	.cfi_offset %rbx, -56
.Ltmp197:
	.cfi_offset %r12, -48
.Ltmp198:
	.cfi_offset %r13, -40
.Ltmp199:
	.cfi_offset %r14, -32
.Ltmp200:
	.cfi_offset %r15, -24
.Ltmp201:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %rax
	movl	(%rax), %eax
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	$1, 16(%rsp)            # 4-byte Folded Spill
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r13d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebx
	jmp	.LBB21_2
	.align	16, 0x90
.LBB21_1:                               # %_label22
                                        #   in Loop: Header=BB21_2 Depth=1
	movslq	%esi, %rax
	movq	%r12, %rdi
	movq	8(%rdi), %rcx
	movl	20(%rsp), %edx          # 4-byte Reload
	imull	(%rcx,%rax,4), %edx
	movl	%edx, 20(%rsp)          # 4-byte Spill
	incl	%esi
	movl	%esi, 16(%rsp)          # 4-byte Spill
.LBB21_2:                               # %_label23
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %r14
	movl	16(%rdi), %r15d
	movq	%rdi, %r12
	movl	$1, %edi
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	(%rax), %rax
	movq	152(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	$1, %edi
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	%rax, %rdi
	callq	*8(%rsp)                # 8-byte Folded Reload
	movl	16(%rsp), %esi          # 4-byte Reload
	cmpl	(%rax), %esi
	jl	.LBB21_1
# BB#3:                                 # %_label24
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp202:
	.size	_Pshadow_Pstandard_CArray_Msize, .Ltmp202-_Pshadow_Pstandard_CArray_Msize
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint
# BB#0:
	movl	56(%rsi), %esi
	movl	%edx, %edi
	jmp	calloc                  # TAILCALL
.Ltmp203:
	.size	_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint, .Ltmp203-_Pshadow_Pstandard_CArray_Mallocate_Pshadow_Pstandard_CClass_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1,@function
_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1: # @_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1
# BB#0:
	pushq	%rax
	callq	abort
.Ltmp204:
	.size	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1, .Ltmp204-_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1

	.globl	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT,@function
_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT: # @_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT
# BB#0:
	pushq	%rax
	callq	abort
.Ltmp205:
	.size	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT, .Ltmp205-_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT

	.globl	_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
# BB#0:
	pushq	%rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	movl	%edx, %ebp
	movl	%esi, %r14d
	movq	%rdi, %r13
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	24(%r13), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	16(%r13), %r15d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	%r15d, %edi
	callq	calloc
	movq	%rax, %r12
	subl	%r14d, %ebp
	movl	%ebp, (%r12)
	leaq	4(%r12), %rdi
	movq	8(%r13), %rsi
	leal	-1(%r15), %edx
	addq	$4, %rsi
	callq	memcpy
	movq	(%rsp), %rcx            # 8-byte Reload
	imull	56(%rcx), %r14d
	movq	32(%r13), %rax
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rbx)
	movq	%rcx, 24(%rbx)
	movl	%r15d, 16(%rbx)
	movq	%r12, 8(%rbx)
	movslq	%r14d, %rcx
	addq	%rax, %rcx
	movq	%rcx, 32(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp206:
	.size	_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint, .Ltmp206-_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cboolean_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cboolean_MtoString,@function
_Pshadow_Pstandard_Cboolean_MtoString:  # @_Pshadow_Pstandard_Cboolean_MtoString
# BB#0:                                 # %_label2
	movb	8(%rdi), %dl
	movl	$.L_string164, %ecx
	movl	$.L_string266, %eax
	testb	%dl, %dl
	cmovneq	%rcx, %rax
	ret
.Ltmp207:
	.size	_Pshadow_Pstandard_Cboolean_MtoString, .Ltmp207-_Pshadow_Pstandard_Cboolean_MtoString

	.globl	_Pshadow_Pstandard_Cboolean_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cboolean_Mcreate,@function
_Pshadow_Pstandard_Cboolean_Mcreate:    # @_Pshadow_Pstandard_Cboolean_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cboolean_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp208:
	.size	_Pshadow_Pstandard_Cboolean_Mcreate, .Ltmp208-_Pshadow_Pstandard_Cboolean_Mcreate

	.globl	_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte
# BB#0:                                 # %_label2
	movb	8(%rdi), %al
	cmpb	%sil, %al
	jle	.LBB28_2
# BB#1:                                 # %_label2
	movb	%sil, %al
.LBB28_2:                               # %_label2
	ret
.Ltmp209:
	.size	_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte, .Ltmp209-_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte
# BB#0:                                 # %_label5
	movb	8(%rdi), %al
	cmpb	%sil, %al
	jge	.LBB29_2
# BB#1:                                 # %_label5
	movb	%sil, %al
.LBB29_2:                               # %_label5
	ret
.Ltmp210:
	.size	_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte, .Ltmp210-_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mabs
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mabs,@function
_Pshadow_Pstandard_Cbyte_Mabs:          # @_Pshadow_Pstandard_Cbyte_Mabs
# BB#0:                                 # %_label8
	movb	8(%rdi), %al
	movb	%al, %cl
	sarb	$7, %cl
	addb	%cl, %al
	xorb	%cl, %al
	ret
.Ltmp211:
	.size	_Pshadow_Pstandard_Cbyte_Mabs, .Ltmp211-_Pshadow_Pstandard_Cbyte_Mabs

	.globl	_Pshadow_Pstandard_Cbyte_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_MtoString,@function
_Pshadow_Pstandard_Cbyte_MtoString:     # @_Pshadow_Pstandard_Cbyte_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp214:
	.cfi_def_cfa_offset 16
.Ltmp215:
	.cfi_offset %rbx, -16
	movb	8(%rdi), %bl
	movl	_Pshadow_Pstandard_Cbyte_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, (%rax)
	movb	%bl, 8(%rax)
	movq	%rax, %rdi
	movl	$10, %esi
	popq	%rbx
	jmp	_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte # TAILCALL
.Ltmp216:
	.size	_Pshadow_Pstandard_Cbyte_MtoString, .Ltmp216-_Pshadow_Pstandard_Cbyte_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp221:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp222:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp223:
	.cfi_def_cfa_offset 32
.Ltmp224:
	.cfi_offset %rbx, -32
.Ltmp225:
	.cfi_offset %r14, -24
.Ltmp226:
	.cfi_offset %rbp, -16
	movl	%esi, %ebp
	movb	8(%rdi), %bl
	movl	_Pshadow_Pstandard_Cubyte_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cubyte_Mclass, (%rax)
	movb	%bl, %cl
	sarb	$7, %cl
	movb	%bl, %dl
	addb	%cl, %dl
	xorb	%cl, %dl
	movb	%dl, 8(%rax)
	movq	%rax, %rdi
	movl	%ebp, %esi
	callq	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte
	movq	%rax, %rbp
	testb	%bl, %bl
	jns	.LBB32_4
# BB#1:                                 # %_label10
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r14d
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	(%rax), %rax
	movq	104(%rax), %rbx
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	%rax, %rdi
	callq	*%rbx
	movq	%rax, %r14
	movl	$.L_string1470, %eax
	testq	%rbp, %rbp
	je	.LBB32_3
# BB#2:                                 # %_label13
	movq	(%rbp), %rax
	movq	%rbp, %rdi
	callq	*104(%rax)
.LBB32_3:                               # %_label14
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rax, %rbp
.LBB32_4:                               # %_label11
	movq	%rbp, %rax
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp227:
	.size	_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte, .Ltmp227-_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cbyte_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mcreate,@function
_Pshadow_Pstandard_Cbyte_Mcreate:       # @_Pshadow_Pstandard_Cbyte_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp228:
	.size	_Pshadow_Pstandard_Cbyte_Mcreate, .Ltmp228-_Pshadow_Pstandard_Cbyte_Mcreate

	.globl	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass,@function
_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass: # @_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp236:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp237:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp238:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp239:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp240:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp241:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp242:
	.cfi_def_cfa_offset 80
.Ltmp243:
	.cfi_offset %rbx, -56
.Ltmp244:
	.cfi_offset %r12, -48
.Ltmp245:
	.cfi_offset %r13, -40
.Ltmp246:
	.cfi_offset %r14, -32
.Ltmp247:
	.cfi_offset %r15, -24
.Ltmp248:
	.cfi_offset %rbp, -16
	movq	%rsi, %rbp
	movq	%rdi, %rbx
	movq	%rbx, (%rsp)            # 8-byte Spill
	testq	%rbx, %rbx
	je	.LBB34_2
# BB#1:                                 # %_label4
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	movq	%rbp, %rsi
	callq	*80(%rax)
	movb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	je	.LBB34_3
	jmp	.LBB34_11
.LBB34_2:                               # %_label5
	movb	$1, %al
	testq	%rbp, %rbp
	je	.LBB34_11
.LBB34_3:                               # %_label2
	testb	$1, 48(%rbp)
	je	.LBB34_5
# BB#4:                                 # %_label13.preheader
	movq	%rbp, 8(%rsp)           # 8-byte Spill
	movl	$0, 20(%rsp)            # 4-byte Folded Spill
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r13d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	jmp	.LBB34_10
	.align	16, 0x90
.LBB34_9:                               # %_label15
                                        #   in Loop: Header=BB34_10 Depth=1
	incl	%ebp
	movl	%ebp, 20(%rsp)          # 4-byte Spill
.LBB34_10:                              # %_label13
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rbx), %r15
	movl	16(%rbx), %r12d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CClass_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rbx
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CClass_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	%rax, %rdi
	callq	*%rbx
	movq	(%rsp), %rbx            # 8-byte Reload
	movl	%eax, %ecx
	xorb	%al, %al
	movl	20(%rsp), %edx          # 4-byte Reload
	cmpl	%ecx, %edx
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%edx, %ebp
	jge	.LBB34_11
# BB#7:                                 # %_label12
                                        #   in Loop: Header=BB34_10 Depth=1
	movslq	%ebp, %rax
	movq	8(%rbx), %rcx
	movq	(%rcx,%rax,8), %rdi
	testq	%rdi, %rdi
	je	.LBB34_9
# BB#8:                                 # %_label20
                                        #   in Loop: Header=BB34_10 Depth=1
	callq	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	movb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	jne	.LBB34_11
	jmp	.LBB34_9
.LBB34_5:                               # %_label6
	movq	40(%rbx), %rdi
	xorb	%al, %al
	testq	%rdi, %rdi
	je	.LBB34_11
# BB#6:                                 # %_label11
	movq	%rbp, %rsi
	callq	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
.LBB34_11:                              # %_label0
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp249:
	.size	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass, .Ltmp249-_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CClass_MisInterface
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_MisInterface,@function
_Pshadow_Pstandard_CClass_MisInterface: # @_Pshadow_Pstandard_CClass_MisInterface
# BB#0:
	movb	48(%rdi), %al
	andb	$1, %al
	ret
.Ltmp250:
	.size	_Pshadow_Pstandard_CClass_MisInterface, .Ltmp250-_Pshadow_Pstandard_CClass_MisInterface

	.globl	_Pshadow_Pstandard_CClass_MisPrimitive
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_MisPrimitive,@function
_Pshadow_Pstandard_CClass_MisPrimitive: # @_Pshadow_Pstandard_CClass_MisPrimitive
# BB#0:
	movb	48(%rdi), %al
	andb	$2, %al
	shrb	%al
	ret
.Ltmp251:
	.size	_Pshadow_Pstandard_CClass_MisPrimitive, .Ltmp251-_Pshadow_Pstandard_CClass_MisPrimitive

	.globl	_Pshadow_Pstandard_CClass_Mparent
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_Mparent,@function
_Pshadow_Pstandard_CClass_Mparent:      # @_Pshadow_Pstandard_CClass_Mparent
# BB#0:
	movq	40(%rdi), %rax
	ret
.Ltmp252:
	.size	_Pshadow_Pstandard_CClass_Mparent, .Ltmp252-_Pshadow_Pstandard_CClass_Mparent

	.globl	_Pshadow_Pstandard_CClass_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_MtoString,@function
_Pshadow_Pstandard_CClass_MtoString:    # @_Pshadow_Pstandard_CClass_MtoString
# BB#0:
	movq	32(%rdi), %rax
	ret
.Ltmp253:
	.size	_Pshadow_Pstandard_CClass_MtoString, .Ltmp253-_Pshadow_Pstandard_CClass_MtoString

	.globl	_Pshadow_Pstandard_CClass_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_Mcreate,@function
_Pshadow_Pstandard_CClass_Mcreate:      # @_Pshadow_Pstandard_CClass_Mcreate
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CClass_Mclass, (%rbx)
	movl	$0, 48(%rbx)
	movl	$0, 56(%rbx)
	movq	$.L_string2136, 32(%rbx)
	movq	$0, 24(%rbx)
	movl	_Pshadow_Pstandard_CClass_Mclass+56(%rip), %esi
	xorl	%edi, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$0, 16(%rbx)
	movq	$0, 40(%rbx)
	movl	$0, 52(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp254:
	.size	_Pshadow_Pstandard_CClass_Mcreate, .Ltmp254-_Pshadow_Pstandard_CClass_Mcreate

	.globl	_Pshadow_Pstandard_CClass_Mallocate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_Mallocate,@function
_Pshadow_Pstandard_CClass_Mallocate:    # @_Pshadow_Pstandard_CClass_Mallocate
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movl	52(%rbx), %edi
	callq	malloc
	movq	%rbx, (%rax)
	popq	%rbx
	ret
.Ltmp255:
	.size	_Pshadow_Pstandard_CClass_Mallocate, .Ltmp255-_Pshadow_Pstandard_CClass_Mallocate

	.globl	_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint
# BB#0:
	movl	56(%rdi), %eax
	movl	%esi, %edi
	movl	%eax, %esi
	jmp	calloc                  # TAILCALL
.Ltmp256:
	.size	_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint, .Ltmp256-_Pshadow_Pstandard_CClass_Mallocate_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Ccode_MtoUpperCase
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Ccode_MtoUpperCase,@function
_Pshadow_Pstandard_Ccode_MtoUpperCase:  # @_Pshadow_Pstandard_Ccode_MtoUpperCase
# BB#0:
	movl	8(%rdi), %eax
	leal	-97(%rax), %ecx
	cmpl	$25, %ecx
	ja	.LBB42_2
# BB#1:                                 # %_label0
	addl	$-32, %eax
.LBB42_2:                               # %_label2
	ret
.Ltmp257:
	.size	_Pshadow_Pstandard_Ccode_MtoUpperCase, .Ltmp257-_Pshadow_Pstandard_Ccode_MtoUpperCase

	.globl	_Pshadow_Pstandard_Ccode_MtoLowerCase
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Ccode_MtoLowerCase,@function
_Pshadow_Pstandard_Ccode_MtoLowerCase:  # @_Pshadow_Pstandard_Ccode_MtoLowerCase
# BB#0:
	movl	8(%rdi), %eax
	leal	-65(%rax), %ecx
	cmpl	$25, %ecx
	ja	.LBB43_2
# BB#1:                                 # %_label5
	addl	$32, %eax
.LBB43_2:                               # %_label7
	ret
.Ltmp258:
	.size	_Pshadow_Pstandard_Ccode_MtoLowerCase, .Ltmp258-_Pshadow_Pstandard_Ccode_MtoLowerCase

	.globl	_Pshadow_Pstandard_Ccode_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Ccode_MtoString,@function
_Pshadow_Pstandard_Ccode_MtoString:     # @_Pshadow_Pstandard_Ccode_MtoString
	.cfi_startproc
# BB#0:
	pushq	%r14
.Ltmp262:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp263:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp264:
	.cfi_def_cfa_offset 32
.Ltmp265:
	.cfi_offset %rbx, -24
.Ltmp266:
	.cfi_offset %r14, -16
	movl	8(%rdi), %ebx
	movl	_Pshadow_Pstandard_Ccode_Mclass+56(%rip), %esi
	movl	$1, %edi
	callq	calloc
	movq	%rax, %r14
	movl	%ebx, (%r14)
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	$1, %edx
	callq	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp267:
	.size	_Pshadow_Pstandard_Ccode_MtoString, .Ltmp267-_Pshadow_Pstandard_Ccode_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Ccode_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Ccode_Mcreate,@function
_Pshadow_Pstandard_Ccode_Mcreate:       # @_Pshadow_Pstandard_Ccode_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp268:
	.size	_Pshadow_Pstandard_Ccode_Mcreate, .Ltmp268-_Pshadow_Pstandard_Ccode_Mcreate

	.globl	_Pshadow_Pstandard_Cdouble_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Mcreate,@function
_Pshadow_Pstandard_Cdouble_Mcreate:     # @_Pshadow_Pstandard_Cdouble_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cdouble_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp269:
	.size	_Pshadow_Pstandard_Cdouble_Mcreate, .Ltmp269-_Pshadow_Pstandard_Cdouble_Mcreate

	.globl	_Pshadow_Pstandard_Cdouble_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_MtoString,@function
_Pshadow_Pstandard_Cdouble_MtoString:   # @_Pshadow_Pstandard_Cdouble_MtoString
	.cfi_startproc
# BB#0:
	pushq	%r14
.Ltmp273:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp274:
	.cfi_def_cfa_offset 24
	subq	$24, %rsp
.Ltmp275:
	.cfi_def_cfa_offset 48
.Ltmp276:
	.cfi_offset %rbx, -24
.Ltmp277:
	.cfi_offset %r14, -16
	vmovsd	8(%rdi), %xmm0
	leaq	(%rsp), %r14
	movq	%r14, %rdi
	movl	$.Lformat, %esi
	movb	$1, %al
	callq	sprintf
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movq	%r14, %rdi
	callq	strlen
	movq	%rbx, %rdi
	movq	%r14, %rsi
	movl	%eax, %edx
	callq	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	addq	$24, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp278:
	.size	_Pshadow_Pstandard_Cdouble_MtoString, .Ltmp278-_Pshadow_Pstandard_Cdouble_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CException_Mmessage
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CException_Mmessage,@function
_Pshadow_Pstandard_CException_Mmessage: # @_Pshadow_Pstandard_CException_Mmessage
# BB#0:
	movq	8(%rdi), %rax
	ret
.Ltmp279:
	.size	_Pshadow_Pstandard_CException_Mmessage, .Ltmp279-_Pshadow_Pstandard_CException_Mmessage

	.globl	_Pshadow_Pstandard_CException_Mterminate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CException_Mterminate,@function
_Pshadow_Pstandard_CException_Mterminate: # @_Pshadow_Pstandard_CException_Mterminate
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp287:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp288:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp289:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp290:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp291:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp292:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp293:
	.cfi_def_cfa_offset 80
.Ltmp294:
	.cfi_offset %rbx, -56
.Ltmp295:
	.cfi_offset %r12, -48
.Ltmp296:
	.cfi_offset %r13, -40
.Ltmp297:
	.cfi_offset %r14, -32
.Ltmp298:
	.cfi_offset %r15, -24
.Ltmp299:
	.cfi_offset %rbp, -16
	movq	%rdi, %rbp
	movq	_Pshadow_Pio_CConsole_Minstance(%rip), %rbx
	testq	%rbx, %rbx
	jne	.LBB49_2
# BB#1:                                 # %_label0
	movl	_Pshadow_Pio_CConsole_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rbx)
	movb	$0, 8(%rbx)
	movq	%rbx, _Pshadow_Pio_CConsole_Minstance(%rip)
.LBB49_2:                               # %_label1
	movq	(%rbx), %rax
	movq	128(%rax), %r14
	movq	(%rbp), %rax
	movq	%rbp, %rdi
	callq	*96(%rax)
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%r14
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movq	8(%rbp), %rax
	movq	8(%rax), %r13
	movl	16(%rax), %r15d
	movl	$1, %edi
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	movl	%esi, %r14d
	callq	calloc
	movq	%rax, %rbp
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%r15d, (%rbp)
	movl	%edi, %r12d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*8(%rsp)                # 8-byte Folded Reload
	testl	%eax, %eax
	je	.LBB49_4
# BB#3:                                 # %_label2
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	movl	$.L_string1134, %esi
	callq	*136(%rax)
	movq	(%rax), %rcx
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %rsi
	movq	%rax, %rdi
	callq	*136(%rcx)
.LBB49_4:                               # %_label4
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*152(%rax)
	movl	$1, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp300:
	.size	_Pshadow_Pstandard_CException_Mterminate, .Ltmp300-_Pshadow_Pstandard_CException_Mterminate
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CException_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CException_Mcreate,@function
_Pshadow_Pstandard_CException_Mcreate:  # @_Pshadow_Pstandard_CException_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rdi)
	movq	$.L_string2136, 8(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp301:
	.size	_Pshadow_Pstandard_CException_Mcreate, .Ltmp301-_Pshadow_Pstandard_CException_Mcreate

	.globl	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString,@function
_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString: # @_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rdi)
	movq	%rsi, 8(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp302:
	.size	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString, .Ltmp302-_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString

	.globl	_Pshadow_Pstandard_Cfloat_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Mcreate,@function
_Pshadow_Pstandard_Cfloat_Mcreate:      # @_Pshadow_Pstandard_Cfloat_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cfloat_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp303:
	.size	_Pshadow_Pstandard_Cfloat_Mcreate, .Ltmp303-_Pshadow_Pstandard_Cfloat_Mcreate

	.globl	_Pshadow_Pstandard_CIllegalArgumentException_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CIllegalArgumentException_Mcreate,@function
_Pshadow_Pstandard_CIllegalArgumentException_Mcreate: # @_Pshadow_Pstandard_CIllegalArgumentException_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rdi)
	movq	$.L_string2136, 8(%rdi)
	movq	$_Pshadow_Pstandard_CIllegalArgumentException_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp304:
	.size	_Pshadow_Pstandard_CIllegalArgumentException_Mcreate, .Ltmp304-_Pshadow_Pstandard_CIllegalArgumentException_Mcreate

	.globl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate,@function
_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate: # @_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rdi)
	movq	$.L_string2136, 8(%rdi)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp305:
	.size	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate, .Ltmp305-_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate

	.globl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:                                 # %_label1
	pushq	%rbp
.Ltmp312:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp313:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp314:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp315:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp316:
	.cfi_def_cfa_offset 48
.Ltmp317:
	.cfi_offset %rbx, -48
.Ltmp318:
	.cfi_offset %r12, -40
.Ltmp319:
	.cfi_offset %r14, -32
.Ltmp320:
	.cfi_offset %r15, -24
.Ltmp321:
	.cfi_offset %rbp, -16
	movl	%esi, %ebp
	movq	%rdi, %rbx
	movq	.L_string1156(%rip), %rax
	movl	$.L_string1156, %edi
	callq	*104(%rax)
	movq	%rax, %r14
	movl	_Pshadow_Pstandard_Cint_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movl	%ebp, 8(%rax)
	movq	(%rax), %rax
	movq	104(%rax), %r12
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movl	%ebp, 8(%rax)
	movq	%rax, %rdi
	callq	*%r12
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rax, %rbp
	movq	.L_string3160(%rip), %rax
	movl	$.L_string3160, %edi
	callq	*104(%rax)
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rbx)
	movq	%rax, 8(%rbx)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rbx)
	movq	%rbx, %rax
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp322:
	.size	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint, .Ltmp322-_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint
# BB#0:                                 # %_label2
	movl	8(%rdi), %eax
	cmpl	%esi, %eax
	cmovgl	%esi, %eax
	ret
.Ltmp323:
	.size	_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint, .Ltmp323-_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint
# BB#0:                                 # %_label5
	movl	8(%rdi), %eax
	cmpl	%esi, %eax
	cmovll	%esi, %eax
	ret
.Ltmp324:
	.size	_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint, .Ltmp324-_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mabs
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mabs,@function
_Pshadow_Pstandard_Cint_Mabs:           # @_Pshadow_Pstandard_Cint_Mabs
# BB#0:                                 # %_label8
	movl	8(%rdi), %ecx
	movl	%ecx, %eax
	negl	%eax
	cmovll	%ecx, %eax
	ret
.Ltmp325:
	.size	_Pshadow_Pstandard_Cint_Mabs, .Ltmp325-_Pshadow_Pstandard_Cint_Mabs

	.globl	_Pshadow_Pstandard_Cint_Mhash
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mhash,@function
_Pshadow_Pstandard_Cint_Mhash:          # @_Pshadow_Pstandard_Cint_Mhash
# BB#0:
	movl	8(%rdi), %eax
	ret
.Ltmp326:
	.size	_Pshadow_Pstandard_Cint_Mhash, .Ltmp326-_Pshadow_Pstandard_Cint_Mhash

	.globl	_Pshadow_Pstandard_Cint_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_MtoString,@function
_Pshadow_Pstandard_Cint_MtoString:      # @_Pshadow_Pstandard_Cint_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp329:
	.cfi_def_cfa_offset 16
.Ltmp330:
	.cfi_offset %rbx, -16
	movl	8(%rdi), %ebx
	movl	_Pshadow_Pstandard_Cint_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rax)
	movl	%ebx, 8(%rax)
	movq	%rax, %rdi
	movl	$10, %esi
	popq	%rbx
	jmp	_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint # TAILCALL
.Ltmp331:
	.size	_Pshadow_Pstandard_Cint_MtoString, .Ltmp331-_Pshadow_Pstandard_Cint_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp339:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp340:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp341:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp342:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp343:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp344:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp345:
	.cfi_def_cfa_offset 64
.Ltmp346:
	.cfi_offset %rbx, -56
.Ltmp347:
	.cfi_offset %r12, -48
.Ltmp348:
	.cfi_offset %r13, -40
.Ltmp349:
	.cfi_offset %r14, -32
.Ltmp350:
	.cfi_offset %r15, -24
.Ltmp351:
	.cfi_offset %rbp, -16
	movl	%esi, %r15d
	movl	8(%rdi), %r14d
	movl	%r14d, 4(%rsp)          # 4-byte Spill
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$10, 16(%rbx)
	movl	%r14d, %ebp
	negl	%ebp
	movl	$0, 24(%rbx)
	cmovll	%r14d, %ebp
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r14d
	movl	$48, %r13d
	.align	16, 0x90
.LBB61_1:                               # %_label9.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rbx), %rax
	movq	112(%rax), %r12
	movl	%r14d, %edi
	callq	malloc
	movq	%rax, %rcx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movl	%ebp, %eax
	xorl	%edx, %edx
	divl	%r15d
	movl	%eax, %ebp
	cmpl	$10, %edx
	movl	$87, %eax
	cmovbl	%r13d, %eax
	addl	%edx, %eax
	movl	%eax, 8(%rcx)
	movq	%rbx, %rdi
	movq	%rcx, %rsi
	callq	*%r12
	testl	%ebp, %ebp
	jne	.LBB61_1
# BB#2:                                 # %_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint.exit
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*152(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*104(%rcx)
	movq	%rax, %rbx
	cmpl	$0, 4(%rsp)             # 4-byte Folded Reload
	jns	.LBB61_6
# BB#3:                                 # %_label10
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	(%rax), %rax
	movq	104(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	%rax, %rdi
	callq	*%rbp
	movq	%rax, %rbp
	movl	$.L_string1470, %eax
	testq	%rbx, %rbx
	je	.LBB61_5
# BB#4:                                 # %_label13
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*104(%rax)
.LBB61_5:                               # %_label14
	movq	%rbp, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rax, %rbx
.LBB61_6:                               # %_label11
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp352:
	.size	_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint, .Ltmp352-_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cint_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mcreate,@function
_Pshadow_Pstandard_Cint_Mcreate:        # @_Pshadow_Pstandard_Cint_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cint_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp353:
	.size	_Pshadow_Pstandard_Cint_Mcreate, .Ltmp353-_Pshadow_Pstandard_Cint_Mcreate

	.globl	_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong
# BB#0:                                 # %_label2
	movq	8(%rdi), %rax
	cmpq	%rsi, %rax
	cmovgq	%rsi, %rax
	ret
.Ltmp354:
	.size	_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong, .Ltmp354-_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong
# BB#0:                                 # %_label5
	movq	8(%rdi), %rax
	cmpq	%rsi, %rax
	cmovlq	%rsi, %rax
	ret
.Ltmp355:
	.size	_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong, .Ltmp355-_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mabs
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mabs,@function
_Pshadow_Pstandard_Clong_Mabs:          # @_Pshadow_Pstandard_Clong_Mabs
# BB#0:                                 # %_label8
	movq	8(%rdi), %rcx
	movq	%rcx, %rax
	negq	%rax
	cmovlq	%rcx, %rax
	ret
.Ltmp356:
	.size	_Pshadow_Pstandard_Clong_Mabs, .Ltmp356-_Pshadow_Pstandard_Clong_Mabs

	.globl	_Pshadow_Pstandard_Clong_Mhash
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mhash,@function
_Pshadow_Pstandard_Clong_Mhash:         # @_Pshadow_Pstandard_Clong_Mhash
# BB#0:
	movl	8(%rdi), %eax
	ret
.Ltmp357:
	.size	_Pshadow_Pstandard_Clong_Mhash, .Ltmp357-_Pshadow_Pstandard_Clong_Mhash

	.globl	_Pshadow_Pstandard_Clong_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_MtoString,@function
_Pshadow_Pstandard_Clong_MtoString:     # @_Pshadow_Pstandard_Clong_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp360:
	.cfi_def_cfa_offset 16
.Ltmp361:
	.cfi_offset %rbx, -16
	movq	8(%rdi), %rbx
	movl	_Pshadow_Pstandard_Clong_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Clong_Mclass, (%rax)
	movq	%rbx, 8(%rax)
	movq	%rax, %rdi
	movl	$10, %esi
	popq	%rbx
	jmp	_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong # TAILCALL
.Ltmp362:
	.size	_Pshadow_Pstandard_Clong_MtoString, .Ltmp362-_Pshadow_Pstandard_Clong_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp367:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp368:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp369:
	.cfi_def_cfa_offset 32
.Ltmp370:
	.cfi_offset %rbx, -32
.Ltmp371:
	.cfi_offset %r14, -24
.Ltmp372:
	.cfi_offset %rbp, -16
	movq	%rsi, %rbx
	movq	8(%rdi), %rbp
	movl	_Pshadow_Pstandard_Culong_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Culong_Mclass, (%rax)
	movq	%rbp, %rcx
	negq	%rcx
	cmovlq	%rbp, %rcx
	movq	%rcx, 8(%rax)
	movq	%rax, %rdi
	movq	%rbx, %rsi
	callq	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong
	movq	%rax, %rbx
	testq	%rbp, %rbp
	jns	.LBB68_4
# BB#1:                                 # %_label10
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r14d
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	(%rax), %rax
	movq	104(%rax), %rbp
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	$45, 8(%rax)
	movq	%rax, %rdi
	callq	*%rbp
	movq	%rax, %r14
	movl	$.L_string1470, %eax
	testq	%rbx, %rbx
	je	.LBB68_3
# BB#2:                                 # %_label13
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*104(%rax)
.LBB68_3:                               # %_label14
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	movq	%rax, %rbx
.LBB68_4:                               # %_label11
	movq	%rbx, %rax
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp373:
	.size	_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong, .Ltmp373-_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Clong_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mcreate,@function
_Pshadow_Pstandard_Clong_Mcreate:       # @_Pshadow_Pstandard_Clong_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Clong_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp374:
	.size	_Pshadow_Pstandard_Clong_Mcreate, .Ltmp374-_Pshadow_Pstandard_Clong_Mcreate

	.globl	_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject,@function
_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject: # @_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp382:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp383:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp384:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp385:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp386:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp387:
	.cfi_def_cfa_offset 56
	subq	$40, %rsp
.Ltmp388:
	.cfi_def_cfa_offset 96
.Ltmp389:
	.cfi_offset %rbx, -56
.Ltmp390:
	.cfi_offset %r12, -48
.Ltmp391:
	.cfi_offset %r13, -40
.Ltmp392:
	.cfi_offset %r14, -32
.Ltmp393:
	.cfi_offset %r15, -24
.Ltmp394:
	.cfi_offset %rbp, -16
	movq	%rdi, %rbx
	movl	$.L_string1470, %eax
	testq	%rsi, %rsi
	je	.LBB70_2
# BB#1:                                 # %_label1
	movq	(%rsi), %rax
	movq	%rsi, %rdi
	callq	*104(%rax)
.LBB70_2:                               # %_label2
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movq	%rbx, %rbp
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	movq	(%rbp), %rcx
	movq	144(%rcx), %rcx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movl	24(%rbp), %ecx
	movl	%ecx, 24(%rsp)          # 4-byte Spill
	movq	8(%rax), %rbx
	movl	16(%rax), %r15d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %r13
	movl	%r15d, (%r13)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r13, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %r12
	movl	%r15d, (%r12)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%edi, %r13d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r12, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	%rax, %rdi
	callq	*(%rsp)                 # 8-byte Folded Reload
	movl	24(%rsp), %esi          # 4-byte Reload
	addl	%eax, %esi
	movq	%rbp, %rdi
	callq	*32(%rsp)               # 8-byte Folded Reload
	movq	8(%rsp), %r15           # 8-byte Reload
	movl	$0, 32(%rsp)            # 4-byte Folded Spill
	jmp	.LBB70_4
	.align	16, 0x90
.LBB70_3:                               # %_label3
                                        #   in Loop: Header=BB70_4 Depth=1
	movslq	%edi, %rax
	movq	8(%r15), %rcx
	movb	(%rcx,%rax), %al
	movq	16(%rsp), %rsi          # 8-byte Reload
	movslq	24(%rsi), %rcx
	movq	8(%rsi), %rdx
	movb	%al, (%rdx,%rcx)
	incl	24(%rsi)
	incl	%edi
	movl	%edi, 32(%rsp)          # 4-byte Spill
.LBB70_4:                               # %_label4
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r15), %rbx
	movl	16(%r15), %r12d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	%rax, %rdi
	callq	*24(%rsp)               # 8-byte Folded Reload
	movl	32(%rsp), %edi          # 4-byte Reload
	cmpl	%eax, %edi
	jl	.LBB70_3
# BB#5:                                 # %_label5
	movq	16(%rsp), %rax          # 8-byte Reload
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp395:
	.size	_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject, .Ltmp395-_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CMutableString_Mreverse
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mreverse,@function
_Pshadow_Pstandard_CMutableString_Mreverse: # @_Pshadow_Pstandard_CMutableString_Mreverse
# BB#0:
	movl	24(%rdi), %r9d
	leal	-1(%r9), %ecx
	testl	%ecx, %ecx
	jle	.LBB71_3
# BB#1:                                 # %_label6.preheader
	addl	$-2, %r9d
	xorl	%ecx, %ecx
	.align	16, 0x90
.LBB71_2:                               # %_label6
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ecx, %rcx
	movq	8(%rdi), %rdx
	movb	(%rdx,%rcx), %r8b
	leal	1(%r9), %esi
	movslq	%esi, %rsi
	movb	(%rdx,%rsi), %al
	movb	%al, (%rdx,%rcx)
	movb	%r8b, (%rdx,%rsi)
	incl	%ecx
	cmpl	%r9d, %ecx
	leal	-1(%r9), %r9d
	jl	.LBB71_2
.LBB71_3:                               # %_label8
	movq	%rdi, %rax
	ret
.Ltmp396:
	.size	_Pshadow_Pstandard_CMutableString_Mreverse, .Ltmp396-_Pshadow_Pstandard_CMutableString_Mreverse

	.globl	_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp401:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp402:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp403:
	.cfi_def_cfa_offset 32
	subq	$16, %rsp
.Ltmp404:
	.cfi_def_cfa_offset 48
.Ltmp405:
	.cfi_offset %rbx, -32
.Ltmp406:
	.cfi_offset %r14, -24
.Ltmp407:
	.cfi_offset %rbp, -16
	movl	%esi, %ebp
	movq	%rdi, %rbx
	movq	(%rbx), %rax
	callq	*120(%rax)
	cmpl	%ebp, %eax
	jge	.LBB72_6
# BB#1:                                 # %_label9
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	%ebp, %edi
	callq	calloc
	movq	%rax, %r14
	movl	%ebp, 8(%rsp)
	movq	%r14, (%rsp)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*160(%rax)
	testl	%eax, %eax
	jle	.LBB72_5
# BB#2:                                 # %_label12.lr.ph
	xorl	%ebp, %ebp
	movq	(%rsp), %r14
	.align	16, 0x90
.LBB72_3:                               # %_label12
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebp, %rbp
	movq	8(%rbx), %rax
	movb	(%rax,%rbp), %al
	movb	%al, (%r14,%rbp)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*160(%rax)
	incl	%ebp
	cmpl	%eax, %ebp
	jl	.LBB72_3
# BB#4:                                 # %_label13._label14_crit_edge
	movl	8(%rsp), %ebp
	movq	(%rsp), %r14
.LBB72_5:                               # %_label14
	movq	%r14, 8(%rbx)
	movl	%ebp, 16(%rbx)
.LBB72_6:                               # %_label11
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp408:
	.size	_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint, .Ltmp408-_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CMutableString_Mcapacity
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mcapacity,@function
_Pshadow_Pstandard_CMutableString_Mcapacity: # @_Pshadow_Pstandard_CMutableString_Mcapacity
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp416:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp417:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp418:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp419:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp420:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp421:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp422:
	.cfi_def_cfa_offset 64
.Ltmp423:
	.cfi_offset %rbx, -56
.Ltmp424:
	.cfi_offset %r12, -48
.Ltmp425:
	.cfi_offset %r13, -40
.Ltmp426:
	.cfi_offset %r14, -32
.Ltmp427:
	.cfi_offset %r15, -24
.Ltmp428:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %r12
	movl	16(%rdi), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r13
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	movq	%r13, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmpq	*%rax  # TAILCALL
.Ltmp429:
	.size	_Pshadow_Pstandard_CMutableString_Mcapacity, .Ltmp429-_Pshadow_Pstandard_CMutableString_Mcapacity
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CMutableString_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_MtoString,@function
_Pshadow_Pstandard_CMutableString_MtoString: # @_Pshadow_Pstandard_CMutableString_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp437:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp438:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp439:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp440:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp441:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp442:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp443:
	.cfi_def_cfa_offset 64
.Ltmp444:
	.cfi_offset %rbx, -56
.Ltmp445:
	.cfi_offset %r12, -48
.Ltmp446:
	.cfi_offset %r13, -40
.Ltmp447:
	.cfi_offset %r14, -32
.Ltmp448:
	.cfi_offset %r15, -24
.Ltmp449:
	.cfi_offset %rbp, -16
	movq	%rdi, %rbx
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r14
	movq	$_Pshadow_Pstandard_CString_Mclass, (%r14)
	movq	8(%rbx), %r12
	movl	16(%rbx), %r15d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	$1, %edi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%edi, %r13d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	168(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movl	24(%rbx), %edx
	movq	%rax, %rdi
	xorl	%esi, %esi
	callq	*(%rsp)                 # 8-byte Folded Reload
	movq	8(%rax), %rcx
	movq	32(%rax), %rsi
	movl	(%rcx), %edx
	movq	%r14, %rdi
	callq	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	movq	%r14, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp450:
	.size	_Pshadow_Pstandard_CMutableString_MtoString, .Ltmp450-_Pshadow_Pstandard_CMutableString_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CMutableString_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mcreate,@function
_Pshadow_Pstandard_CMutableString_Mcreate: # @_Pshadow_Pstandard_CMutableString_Mcreate
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$10, 16(%rbx)
	movl	$0, 24(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp451:
	.size	_Pshadow_Pstandard_CMutableString_Mcreate, .Ltmp451-_Pshadow_Pstandard_CMutableString_Mcreate

	.globl	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint
# BB#0:
	pushq	%rbp
	pushq	%rbx
	pushq	%rax
	movl	%esi, %ebp
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%rbx)
	movl	$0, 24(%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	%ebp, %edi
	callq	calloc
	movl	%ebp, 16(%rbx)
	movq	%rax, 8(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp452:
	.size	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint, .Ltmp452-_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject,@function
_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject: # @_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%r14
.Ltmp456:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp457:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp458:
	.cfi_def_cfa_offset 32
.Ltmp459:
	.cfi_offset %rbx, -24
.Ltmp460:
	.cfi_offset %r14, -16
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$10, 16(%rbx)
	movl	$0, 24(%rbx)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	*112(%rax)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp461:
	.size	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject, .Ltmp461-_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CMutableString_Msize
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CMutableString_Msize,@function
_Pshadow_Pstandard_CMutableString_Msize: # @_Pshadow_Pstandard_CMutableString_Msize
# BB#0:
	movl	24(%rdi), %eax
	ret
.Ltmp462:
	.size	_Pshadow_Pstandard_CMutableString_Msize, .Ltmp462-_Pshadow_Pstandard_CMutableString_Msize

	.globl	_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte
# BB#0:
	addb	%dil, %sil
	movb	%sil, %al
	ret
.Ltmp463:
	.size	_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte, .Ltmp463-_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte
# BB#0:
	subb	%sil, %dil
	movb	%dil, %al
	ret
.Ltmp464:
	.size	_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte, .Ltmp464-_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte
# BB#0:
	movb	%sil, %al
	mulb	%dil
	ret
.Ltmp465:
	.size	_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte, .Ltmp465-_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte
# BB#0:
	movb	%dil, %al
	cbtw
	idivb	%sil
	ret
.Ltmp466:
	.size	_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte, .Ltmp466-_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte
# BB#0:
	movb	%dil, %al
	cbtw
	idivb	%sil
	shrw	$8, %ax
                                        # kill: AL<def> AL<kill> AX<kill>
	ret
.Ltmp467:
	.size	_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte, .Ltmp467-_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte,@function
_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte: # @_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte
# BB#0:
	cmpb	%sil, %dil
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovgel	%ecx, %eax
	ret
.Ltmp468:
	.size	_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte, .Ltmp468-_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte

	.globl	_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte
# BB#0:
	addb	%dil, %sil
	movb	%sil, %al
	ret
.Ltmp469:
	.size	_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte, .Ltmp469-_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte
# BB#0:
	subb	%sil, %dil
	movb	%dil, %al
	ret
.Ltmp470:
	.size	_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte, .Ltmp470-_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte
# BB#0:
	movb	%sil, %al
	mulb	%dil
	ret
.Ltmp471:
	.size	_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte, .Ltmp471-_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte
# BB#0:
	movzbl	%dil, %eax
                                        # kill: EAX<def> EAX<kill> AX<def>
	divb	%sil
	ret
.Ltmp472:
	.size	_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte, .Ltmp472-_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte
# BB#0:
	movzbl	%dil, %eax
                                        # kill: EAX<def> EAX<kill> AX<def>
	divb	%sil
	shrw	$8, %ax
                                        # kill: AL<def> AL<kill> AX<kill>
	ret
.Ltmp473:
	.size	_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte, .Ltmp473-_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte
# BB#0:
	cmpb	%sil, %dil
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovael	%ecx, %eax
	ret
.Ltmp474:
	.size	_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte, .Ltmp474-_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort
# BB#0:
	addl	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp475:
	.size	_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort, .Ltmp475-_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort
# BB#0:
	subl	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp476:
	.size	_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort, .Ltmp476-_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort
# BB#0:
	imull	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp477:
	.size	_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort, .Ltmp477-_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort
# BB#0:
	movw	%di, %ax
	cwtd
	idivw	%si
	ret
.Ltmp478:
	.size	_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort, .Ltmp478-_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort
# BB#0:
	movw	%di, %ax
	cwtd
	idivw	%si
	movw	%dx, %ax
	ret
.Ltmp479:
	.size	_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort, .Ltmp479-_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort,@function
_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort: # @_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort
# BB#0:
	cmpw	%si, %di
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovgel	%ecx, %eax
	ret
.Ltmp480:
	.size	_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort, .Ltmp480-_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort

	.globl	_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort
# BB#0:
	addl	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp481:
	.size	_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort, .Ltmp481-_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort
# BB#0:
	subl	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp482:
	.size	_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort, .Ltmp482-_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort
# BB#0:
	imull	%esi, %edi
	movw	%di, %ax
	ret
.Ltmp483:
	.size	_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort, .Ltmp483-_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort
# BB#0:
	movw	%di, %ax
	xorl	%edx, %edx
	divw	%si
	ret
.Ltmp484:
	.size	_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort, .Ltmp484-_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort
# BB#0:
	movw	%di, %ax
	xorl	%edx, %edx
	divw	%si
	movw	%dx, %ax
	ret
.Ltmp485:
	.size	_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort, .Ltmp485-_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort,@function
_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort: # @_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort
# BB#0:
	cmpw	%si, %di
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovael	%ecx, %eax
	ret
.Ltmp486:
	.size	_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort, .Ltmp486-_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort

	.globl	_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint
# BB#0:
	addl	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp487:
	.size	_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint, .Ltmp487-_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint
# BB#0:
	subl	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp488:
	.size	_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint, .Ltmp488-_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint
# BB#0:
	imull	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp489:
	.size	_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint, .Ltmp489-_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint
# BB#0:
	movl	%edi, %eax
	cltd
	idivl	%esi
	ret
.Ltmp490:
	.size	_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint, .Ltmp490-_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint
# BB#0:
	movl	%edi, %eax
	cltd
	idivl	%esi
	movl	%edx, %eax
	ret
.Ltmp491:
	.size	_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint, .Ltmp491-_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint
# BB#0:
	cmpl	%esi, %edi
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovgel	%ecx, %eax
	ret
.Ltmp492:
	.size	_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint, .Ltmp492-_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint
# BB#0:
	addl	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp493:
	.size	_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint, .Ltmp493-_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint
# BB#0:
	subl	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp494:
	.size	_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint, .Ltmp494-_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint
# BB#0:
	imull	%esi, %edi
	movl	%edi, %eax
	ret
.Ltmp495:
	.size	_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint, .Ltmp495-_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint
# BB#0:
	movl	%edi, %eax
	xorl	%edx, %edx
	divl	%esi
	ret
.Ltmp496:
	.size	_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint, .Ltmp496-_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint
# BB#0:
	movl	%edi, %eax
	xorl	%edx, %edx
	divl	%esi
	movl	%edx, %eax
	ret
.Ltmp497:
	.size	_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint, .Ltmp497-_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint
# BB#0:
	cmpl	%esi, %edi
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovael	%ecx, %eax
	ret
.Ltmp498:
	.size	_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint, .Ltmp498-_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong
# BB#0:
	addq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp499:
	.size	_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong, .Ltmp499-_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong
# BB#0:
	subq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp500:
	.size	_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong, .Ltmp500-_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong
# BB#0:
	imulq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp501:
	.size	_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong, .Ltmp501-_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong
# BB#0:
	movq	%rdi, %rax
	cqto
	idivq	%rsi
	ret
.Ltmp502:
	.size	_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong, .Ltmp502-_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong
# BB#0:
	movq	%rdi, %rax
	cqto
	idivq	%rsi
	movq	%rdx, %rax
	ret
.Ltmp503:
	.size	_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong, .Ltmp503-_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong,@function
_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong: # @_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong
# BB#0:
	cmpq	%rsi, %rdi
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovgel	%ecx, %eax
	ret
.Ltmp504:
	.size	_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong, .Ltmp504-_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong

	.globl	_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong
# BB#0:
	addq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp505:
	.size	_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong, .Ltmp505-_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong
# BB#0:
	subq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp506:
	.size	_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong, .Ltmp506-_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong
# BB#0:
	imulq	%rsi, %rdi
	movq	%rdi, %rax
	ret
.Ltmp507:
	.size	_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong, .Ltmp507-_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong
# BB#0:
	movq	%rdi, %rax
	xorl	%edx, %edx
	divq	%rsi
	ret
.Ltmp508:
	.size	_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong, .Ltmp508-_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong
# BB#0:
	movq	%rdi, %rax
	xorl	%edx, %edx
	divq	%rsi
	movq	%rdx, %rax
	ret
.Ltmp509:
	.size	_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong, .Ltmp509-_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong
# BB#0:
	cmpq	%rsi, %rdi
	setne	%al
	movzbl	%al, %ecx
	movl	$-1, %eax
	cmovael	%ecx, %eax
	ret
.Ltmp510:
	.size	_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong, .Ltmp510-_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat
# BB#0:
	vaddss	%xmm1, %xmm0, %xmm0
	ret
.Ltmp511:
	.size	_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat, .Ltmp511-_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat
# BB#0:
	vsubss	%xmm1, %xmm0, %xmm0
	ret
.Ltmp512:
	.size	_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat, .Ltmp512-_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat
# BB#0:
	vmulss	%xmm1, %xmm0, %xmm0
	ret
.Ltmp513:
	.size	_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat, .Ltmp513-_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat
# BB#0:
	vdivss	%xmm1, %xmm0, %xmm0
	ret
.Ltmp514:
	.size	_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat, .Ltmp514-_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat
# BB#0:
	jmp	fmodf                   # TAILCALL
.Ltmp515:
	.size	_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat, .Ltmp515-_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat,@function
_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat: # @_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat
# BB#0:
	vcmpneqss	%xmm1, %xmm0, %xmm2
	vmovd	%xmm2, %ecx
	andl	$1, %ecx
	movl	$-1, %eax
	vucomiss	%xmm0, %xmm1
	cmovbel	%ecx, %eax
	ret
.Ltmp516:
	.size	_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat, .Ltmp516-_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat

	.globl	_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble
# BB#0:
	vaddsd	%xmm1, %xmm0, %xmm0
	ret
.Ltmp517:
	.size	_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble, .Ltmp517-_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble
# BB#0:
	vsubsd	%xmm1, %xmm0, %xmm0
	ret
.Ltmp518:
	.size	_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble, .Ltmp518-_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble
# BB#0:
	vmulsd	%xmm1, %xmm0, %xmm0
	ret
.Ltmp519:
	.size	_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble, .Ltmp519-_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble
# BB#0:
	vdivsd	%xmm1, %xmm0, %xmm0
	ret
.Ltmp520:
	.size	_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble, .Ltmp520-_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble
# BB#0:
	jmp	fmod                    # TAILCALL
.Ltmp521:
	.size	_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble, .Ltmp521-_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble,@function
_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble: # @_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble
# BB#0:
	vcmpneqsd	%xmm1, %xmm0, %xmm2
	vmovd	%xmm2, %ecx
	andl	$1, %ecx
	movl	$-1, %eax
	vucomisd	%xmm0, %xmm1
	cmovbel	%ecx, %eax
	ret
.Ltmp522:
	.size	_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble, .Ltmp522-_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble

	.globl	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject,@function
_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject: # @_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
# BB#0:
	cmpq	%rsi, %rdi
	sete	%al
	ret
.Ltmp523:
	.size	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject, .Ltmp523-_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject

	.globl	_Pshadow_Pstandard_CObject_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_MtoString,@function
_Pshadow_Pstandard_CObject_MtoString:   # @_Pshadow_Pstandard_CObject_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp525:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	callq	*96(%rax)
	movq	32(%rax), %rax
	popq	%rdx
	ret
.Ltmp526:
	.size	_Pshadow_Pstandard_CObject_MtoString, .Ltmp526-_Pshadow_Pstandard_CObject_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CObject_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_Mcreate,@function
_Pshadow_Pstandard_CObject_Mcreate:     # @_Pshadow_Pstandard_CObject_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp527:
	.size	_Pshadow_Pstandard_CObject_Mcreate, .Ltmp527-_Pshadow_Pstandard_CObject_Mcreate

	.globl	_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject,@function
_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject: # @_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject
# BB#0:
	cmpq	%rsi, %rdi
	sete	%al
	ret
.Ltmp528:
	.size	_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject, .Ltmp528-_Pshadow_Pstandard_CObject_MreferenceEquals_Pshadow_Pstandard_CObject

	.globl	_Pshadow_Pstandard_CObject_MgetClass
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_MgetClass,@function
_Pshadow_Pstandard_CObject_MgetClass:   # @_Pshadow_Pstandard_CObject_MgetClass
# BB#0:
	movq	(%rdi), %rax
	ret
.Ltmp529:
	.size	_Pshadow_Pstandard_CObject_MgetClass, .Ltmp529-_Pshadow_Pstandard_CObject_MgetClass

	.globl	_Pshadow_Pstandard_CObject_Mcopy
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_Mcopy,@function
_Pshadow_Pstandard_CObject_Mcopy:       # @_Pshadow_Pstandard_CObject_Mcopy
# BB#0:
	movq	%rdi, %rax
	ret
.Ltmp530:
	.size	_Pshadow_Pstandard_CObject_Mcopy, .Ltmp530-_Pshadow_Pstandard_CObject_Mcopy

	.globl	_Pshadow_Pstandard_CObject_Mfreeze
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CObject_Mfreeze,@function
_Pshadow_Pstandard_CObject_Mfreeze:     # @_Pshadow_Pstandard_CObject_Mfreeze
# BB#0:
	movq	%rdi, %rax
	ret
.Ltmp531:
	.size	_Pshadow_Pstandard_CObject_Mfreeze, .Ltmp531-_Pshadow_Pstandard_CObject_Mfreeze

	.globl	_Pshadow_Pstandard_CReference_Mvalue
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CReference_Mvalue,@function
_Pshadow_Pstandard_CReference_Mvalue:   # @_Pshadow_Pstandard_CReference_Mvalue
# BB#0:
	movq	16(%rdi), %rax
	ret
.Ltmp532:
	.size	_Pshadow_Pstandard_CReference_Mvalue, .Ltmp532-_Pshadow_Pstandard_CReference_Mvalue

	.globl	_Pshadow_Pstandard_CReference_Mvalue_CT
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CReference_Mvalue_CT,@function
_Pshadow_Pstandard_CReference_Mvalue_CT: # @_Pshadow_Pstandard_CReference_Mvalue_CT
# BB#0:
	movq	%rsi, 16(%rdi)
	ret
.Ltmp533:
	.size	_Pshadow_Pstandard_CReference_Mvalue_CT, .Ltmp533-_Pshadow_Pstandard_CReference_Mvalue_CT

	.globl	_Pshadow_Pstandard_CReference_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CReference_MtoString,@function
_Pshadow_Pstandard_CReference_MtoString: # @_Pshadow_Pstandard_CReference_MtoString
	.cfi_startproc
# BB#0:
	movq	16(%rdi), %rdi
	testq	%rdi, %rdi
	je	.LBB148_1
# BB#2:                                 # %_label1
	movq	(%rdi), %rax
	jmpq	*104(%rax)  # TAILCALL
.LBB148_1:                              # %_label2
	movl	$.L_string1470, %eax
	ret
.Ltmp534:
	.size	_Pshadow_Pstandard_CReference_MtoString, .Ltmp534-_Pshadow_Pstandard_CReference_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CReference_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CReference_Mcreate,@function
_Pshadow_Pstandard_CReference_Mcreate:  # @_Pshadow_Pstandard_CReference_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CReference_Mclass, (%rdi)
	movq	%rsi, 8(%rdi)
	movq	$0, 16(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp535:
	.size	_Pshadow_Pstandard_CReference_Mcreate, .Ltmp535-_Pshadow_Pstandard_CReference_Mcreate

	.globl	_Pshadow_Pstandard_CReference_Mcreate_CT
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CReference_Mcreate_CT,@function
_Pshadow_Pstandard_CReference_Mcreate_CT: # @_Pshadow_Pstandard_CReference_Mcreate_CT
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CReference_Mclass, (%rdi)
	movq	%rsi, 8(%rdi)
	movq	%rdx, 16(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp536:
	.size	_Pshadow_Pstandard_CReference_Mcreate_CT, .Ltmp536-_Pshadow_Pstandard_CReference_Mcreate_CT

	.globl	_Pshadow_Pstandard_Cshort_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cshort_Mcreate,@function
_Pshadow_Pstandard_Cshort_Mcreate:      # @_Pshadow_Pstandard_Cshort_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cshort_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp537:
	.size	_Pshadow_Pstandard_Cshort_Mcreate, .Ltmp537-_Pshadow_Pstandard_Cshort_Mcreate

	.globl	_Pshadow_Pstandard_CString_MtoUpperCase
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_MtoUpperCase,@function
_Pshadow_Pstandard_CString_MtoUpperCase: # @_Pshadow_Pstandard_CString_MtoUpperCase
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp544:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp545:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp546:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp547:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp548:
	.cfi_def_cfa_offset 48
.Ltmp549:
	.cfi_offset %rbx, -48
.Ltmp550:
	.cfi_offset %r12, -40
.Ltmp551:
	.cfi_offset %r14, -32
.Ltmp552:
	.cfi_offset %r15, -24
.Ltmp553:
	.cfi_offset %rbp, -16
	movq	%rdi, %rbp
	movl	_Pshadow_Pstandard_CString_IStringIterator_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_IStringIterator_Mclass, (%rbx)
	movq	%rbp, 8(%rbx)
	movl	$0, 16(%rbx)
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r14
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r14)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r14)
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%r14)
	movl	$10, 16(%r14)
	movl	$0, 24(%r14)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*112(%rax)
	movq	(%r14), %rcx
	testb	$1, %al
	je	.LBB152_3
# BB#1:                                 # %_label0.lr.ph
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r15d
	.align	16, 0x90
.LBB152_2:                              # %_label0
                                        # =>This Inner Loop Header: Depth=1
	movq	112(%rcx), %r12
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*120(%rax)
	movl	%eax, %ebp
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	leal	32(%rbp), %ecx
	leal	-65(%rbp), %edx
	cmpl	$26, %edx
	cmovael	%ebp, %ecx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	%ecx, 8(%rax)
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*%r12
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*112(%rax)
	movq	(%r14), %rcx
	testb	$1, %al
	jne	.LBB152_2
.LBB152_3:                              # %_label2
	movq	%r14, %rdi
	callq	*104(%rcx)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp554:
	.size	_Pshadow_Pstandard_CString_MtoUpperCase, .Ltmp554-_Pshadow_Pstandard_CString_MtoUpperCase
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_MisEmpty
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_MisEmpty,@function
_Pshadow_Pstandard_CString_MisEmpty:    # @_Pshadow_Pstandard_CString_MisEmpty
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp562:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp563:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp564:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp565:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp566:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp567:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp568:
	.cfi_def_cfa_offset 64
.Ltmp569:
	.cfi_offset %rbx, -56
.Ltmp570:
	.cfi_offset %r12, -48
.Ltmp571:
	.cfi_offset %r13, -40
.Ltmp572:
	.cfi_offset %r14, -32
.Ltmp573:
	.cfi_offset %r15, -24
.Ltmp574:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %r12
	movl	16(%rdi), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r13
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*%r13
	testl	%eax, %eax
	sete	%al
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp575:
	.size	_Pshadow_Pstandard_CString_MisEmpty, .Ltmp575-_Pshadow_Pstandard_CString_MisEmpty
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Miterator
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Miterator,@function
_Pshadow_Pstandard_CString_Miterator:   # @_Pshadow_Pstandard_CString_Miterator
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movl	_Pshadow_Pstandard_CString_IStringIterator_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CString_IStringIterator_Mclass, (%rax)
	movq	%rbx, 8(%rax)
	movl	$0, 16(%rax)
	popq	%rbx
	ret
.Ltmp576:
	.size	_Pshadow_Pstandard_CString_Miterator, .Ltmp576-_Pshadow_Pstandard_CString_Miterator

	.globl	_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString,@function
_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString: # @_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp584:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp585:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp586:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp587:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp588:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp589:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp590:
	.cfi_def_cfa_offset 80
.Ltmp591:
	.cfi_offset %rbx, -56
.Ltmp592:
	.cfi_offset %r12, -48
.Ltmp593:
	.cfi_offset %r13, -40
.Ltmp594:
	.cfi_offset %r14, -32
.Ltmp595:
	.cfi_offset %r15, -24
.Ltmp596:
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%r15, 16(%rsp)          # 8-byte Spill
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%rdi), %rbx
	movl	16(%rdi), %r14d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	$1, %edi
	movl	%esi, %r12d
	callq	calloc
	movq	%rax, %rbp
	movl	%r14d, (%rbp)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, (%rsp)            # 8-byte Spill
	movl	$1, %edi
	movl	%r12d, %esi
	movl	%r12d, %r13d
	callq	calloc
	movq	%rax, %rbp
	movl	%r14d, (%rbp)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r14d
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	%rax, %rdi
	callq	*(%rsp)                 # 8-byte Folded Reload
	movl	%eax, (%rsp)            # 4-byte Spill
	movq	8(%r15), %rbx
	movl	16(%r15), %r12d
	movl	$1, %edi
	movl	%r13d, %esi
	movl	%r13d, %r15d
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r13
	movl	$1, %edi
	movl	%r15d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	%rax, %rdi
	callq	*%r13
	movl	%eax, %ecx
	xorb	%al, %al
	cmpl	%ecx, (%rsp)            # 4-byte Folded Reload
	je	.LBB155_2
# BB#1:                                 # %_label4
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	callq	_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString
	testl	%eax, %eax
	sete	%al
.LBB155_2:                              # %_label3
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp597:
	.size	_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString, .Ltmp597-_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_MtoLowerCase
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_MtoLowerCase,@function
_Pshadow_Pstandard_CString_MtoLowerCase: # @_Pshadow_Pstandard_CString_MtoLowerCase
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp604:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp605:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp606:
	.cfi_def_cfa_offset 32
	pushq	%r12
.Ltmp607:
	.cfi_def_cfa_offset 40
	pushq	%rbx
.Ltmp608:
	.cfi_def_cfa_offset 48
.Ltmp609:
	.cfi_offset %rbx, -48
.Ltmp610:
	.cfi_offset %r12, -40
.Ltmp611:
	.cfi_offset %r14, -32
.Ltmp612:
	.cfi_offset %r15, -24
.Ltmp613:
	.cfi_offset %rbp, -16
	movq	%rdi, %rbp
	movl	_Pshadow_Pstandard_CString_IStringIterator_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_IStringIterator_Mclass, (%rbx)
	movq	%rbp, 8(%rbx)
	movl	$0, 16(%rbx)
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r14
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r14)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r14)
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%r14)
	movl	$10, 16(%r14)
	movl	$0, 24(%r14)
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*112(%rax)
	movq	(%r14), %rcx
	testb	$1, %al
	je	.LBB156_3
# BB#1:                                 # %_label5.lr.ph
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r15d
	.align	16, 0x90
.LBB156_2:                              # %_label5
                                        # =>This Inner Loop Header: Depth=1
	movq	112(%rcx), %r12
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*120(%rax)
	movl	%eax, %ebp
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	leal	32(%rbp), %ecx
	leal	-65(%rbp), %edx
	cmpl	$26, %edx
	cmovael	%ebp, %ecx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	%ecx, 8(%rax)
	movq	%r14, %rdi
	movq	%rax, %rsi
	callq	*%r12
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*112(%rax)
	movq	(%r14), %rcx
	testb	$1, %al
	jne	.LBB156_2
.LBB156_3:                              # %_label7
	movq	%r14, %rdi
	callq	*104(%rcx)
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp614:
	.size	_Pshadow_Pstandard_CString_MtoLowerCase, .Ltmp614-_Pshadow_Pstandard_CString_MtoLowerCase
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString,@function
_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString: # @_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp622:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp623:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp624:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp625:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp626:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp627:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp628:
	.cfi_def_cfa_offset 80
.Ltmp629:
	.cfi_offset %rbx, -56
.Ltmp630:
	.cfi_offset %r12, -48
.Ltmp631:
	.cfi_offset %r13, -40
.Ltmp632:
	.cfi_offset %r14, -32
.Ltmp633:
	.cfi_offset %r15, -24
.Ltmp634:
	.cfi_offset %rbp, -16
	movq	%rsi, 16(%rsp)          # 8-byte Spill
	movq	%rdi, (%rsp)            # 8-byte Spill
	xorl	%r13d, %r13d
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ecx
	.align	16, 0x90
.LBB157_1:                              # %_label9
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%rdi), %r15
	movq	%r15, 8(%rsp)           # 8-byte Spill
	movl	16(%rdi), %r14d
	movl	$1, %edi
	movl	%ecx, %r12d
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r14d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r15
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r14d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	8(%rsp), %rcx           # 8-byte Reload
	movq	%rcx, 32(%rax)
	movq	%rax, %rdi
	callq	*%r15
	cmpl	%eax, %r13d
	jge	.LBB157_6
# BB#2:                                 # %_label14
                                        #   in Loop: Header=BB157_1 Depth=1
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r14
	movl	16(%rax), %r15d
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r15d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r15d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	%rax, %rdi
	callq	*8(%rsp)                # 8-byte Folded Reload
	cmpl	%eax, %r13d
	jge	.LBB157_6
# BB#3:                                 # %_label8
                                        #   in Loop: Header=BB157_1 Depth=1
	movslq	%r13d, %rax
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	8(%rcx), %rcx
	movb	(%rcx,%rax), %cl
	movq	(%rsp), %rdi            # 8-byte Reload
	movq	8(%rdi), %rdx
	movb	(%rdx,%rax), %al
	incl	%r13d
	subb	%cl, %al
	movl	%r12d, %ecx
	je	.LBB157_1
# BB#4:                                 # %_label11
	movsbl	%al, %eax
	jmp	.LBB157_5
.LBB157_6:                              # %_label10
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %r13
	movl	16(%rax), %r15d
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r15d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%r13, %r14
	movq	(%rax), %rax
	movl	%ebp, %r13d
	movq	160(%rax), %rbp
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r15d, (%rbx)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	%rax, %rdi
	callq	*%rbp
	movl	%eax, %r15d
	movq	16(%rsp), %rax          # 8-byte Reload
	movq	8(%rax), %r14
	movl	16(%rax), %ebp
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r12d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	%rax, %rdi
	callq	*16(%rsp)               # 8-byte Folded Reload
	subl	%eax, %r15d
	movl	%r15d, %eax
.LBB157_5:                              # %_label11
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp635:
	.size	_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString, .Ltmp635-_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp643:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp644:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp645:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp646:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp647:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp648:
	.cfi_def_cfa_offset 56
	subq	$24, %rsp
.Ltmp649:
	.cfi_def_cfa_offset 80
.Ltmp650:
	.cfi_offset %rbx, -56
.Ltmp651:
	.cfi_offset %r12, -48
.Ltmp652:
	.cfi_offset %r13, -40
.Ltmp653:
	.cfi_offset %r14, -32
.Ltmp654:
	.cfi_offset %r15, -24
.Ltmp655:
	.cfi_offset %rbp, -16
	movl	%edx, 20(%rsp)          # 4-byte Spill
	movl	%esi, 16(%rsp)          # 4-byte Spill
	movq	%rdi, %r14
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %rbx
	movq	8(%r14), %rbp
	movl	16(%r14), %r12d
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	$1, %edi
	callq	calloc
	movq	%rax, %r15
	movl	%r12d, (%r15)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%edi, %r13d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r15, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbp, 32(%rax)
	movq	%rbp, %r15
	movq	(%rax), %rax
	movq	168(%rax), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r13d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	%rax, %rdi
	movl	16(%rsp), %esi          # 4-byte Reload
	movl	20(%rsp), %edx          # 4-byte Reload
	callq	*8(%rsp)                # 8-byte Folded Reload
	movq	8(%rax), %rcx
	movq	32(%rax), %rax
	movl	(%rcx), %edx
	movb	24(%r14), %cl
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movl	%edx, 16(%rbx)
	movq	%rax, 8(%rbx)
	movb	%cl, 24(%rbx)
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp656:
	.size	_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint, .Ltmp656-_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint,@function
_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint: # @_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint
# BB#0:
	movslq	%esi, %rax
	movq	8(%rdi), %rcx
	movb	(%rcx,%rax), %al
	ret
.Ltmp657:
	.size	_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint, .Ltmp657-_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint

	.globl	_Pshadow_Pstandard_CString_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_MtoString,@function
_Pshadow_Pstandard_CString_MtoString:   # @_Pshadow_Pstandard_CString_MtoString
# BB#0:
	movq	%rdi, %rax
	ret
.Ltmp658:
	.size	_Pshadow_Pstandard_CString_MtoString, .Ltmp658-_Pshadow_Pstandard_CString_MtoString

	.globl	_Pshadow_Pstandard_CString_Mchars
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mchars,@function
_Pshadow_Pstandard_CString_Mchars:      # @_Pshadow_Pstandard_CString_Mchars
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp666:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp667:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp668:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp669:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp670:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp671:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp672:
	.cfi_def_cfa_offset 64
.Ltmp673:
	.cfi_offset %rbx, -56
.Ltmp674:
	.cfi_offset %r12, -48
.Ltmp675:
	.cfi_offset %r13, -40
.Ltmp676:
	.cfi_offset %r14, -32
.Ltmp677:
	.cfi_offset %r15, -24
.Ltmp678:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %r12
	movl	16(%rdi), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	64(%rax), %r13
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*%r13
	movq	8(%rax), %rcx
	movq	32(%rax), %rax
	movl	(%rcx), %edx
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp679:
	.size	_Pshadow_Pstandard_CString_Mchars, .Ltmp679-_Pshadow_Pstandard_CString_Mchars
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcreate,@function
_Pshadow_Pstandard_CString_Mcreate:     # @_Pshadow_Pstandard_CString_Mcreate
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movb	$1, 24(%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	xorl	%edi, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$0, 16(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp680:
	.size	_Pshadow_Pstandard_CString_Mcreate, .Ltmp680-_Pshadow_Pstandard_CString_Mcreate

	.globl	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1,@function
_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1: # @_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp688:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp689:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp690:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp691:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp692:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp693:
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
.Ltmp694:
	.cfi_def_cfa_offset 112
.Ltmp695:
	.cfi_offset %rbx, -56
.Ltmp696:
	.cfi_offset %r12, -48
.Ltmp697:
	.cfi_offset %r13, -40
.Ltmp698:
	.cfi_offset %r14, -32
.Ltmp699:
	.cfi_offset %r15, -24
.Ltmp700:
	.cfi_offset %rbp, -16
	movl	%edx, %r15d
	movq	%rsi, (%rsp)            # 8-byte Spill
	movq	%rdi, %rbp
	movq	%rbp, 16(%rsp)          # 8-byte Spill
	movl	%r15d, 48(%rsp)
	movq	%rsi, 40(%rsp)
	movq	%rsi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbp)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbp)
	movb	$1, 24(%rbp)
	movl	$0, 28(%rsp)            # 4-byte Folded Spill
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	xorl	%edi, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movq	%rax, 8(%rbp)
	movl	$0, 16(%rbp)
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %r13
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r12d
	movl	%r15d, (%r13)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r13, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %r13
	movl	%r15d, (%r13)
	movl	%r15d, %ebx
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r13, 8(%rax)
	movl	$1, 16(%rax)
	movq	(%rsp), %rcx            # 8-byte Reload
	movq	%rcx, 32(%rax)
	movq	%rcx, %r13
	movq	%rax, %rdi
	callq	*32(%rsp)               # 8-byte Folded Reload
	movl	%eax, %r15d
	movl	%r15d, %edi
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	callq	calloc
	movb	$0, 32(%rsp)            # 1-byte Folded Spill
	movl	%r15d, 16(%rbp)
	movq	%rax, 8(%rbp)
	movq	40(%rsp), %rax
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jmp	.LBB163_2
	.align	16, 0x90
.LBB163_1:                              # %_label16
                                        #   in Loop: Header=BB163_2 Depth=1
	movslq	%esi, %rax
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	(%rdi,%rax), %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	8(%rdx), %rdx
	movb	%cl, (%rdx,%rax)
	movb	32(%rsp), %cl           # 1-byte Reload
	orb	(%rdi,%rax), %cl
	movb	%cl, 32(%rsp)           # 1-byte Spill
	incl	%esi
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB163_2:                              # %_label17
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r15
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*%r15
	movl	28(%rsp), %esi          # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB163_1
# BB#3:                                 # %_label18
	cmpb	$0, 32(%rsp)            # 1-byte Folded Reload
	movq	16(%rsp), %rax          # 8-byte Reload
	sets	24(%rax)
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp701:
	.size	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1, .Ltmp701-_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1,@function
_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1: # @_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp709:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp710:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp711:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp712:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp713:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp714:
	.cfi_def_cfa_offset 56
	subq	$56, %rsp
.Ltmp715:
	.cfi_def_cfa_offset 112
.Ltmp716:
	.cfi_offset %rbx, -56
.Ltmp717:
	.cfi_offset %r12, -48
.Ltmp718:
	.cfi_offset %r13, -40
.Ltmp719:
	.cfi_offset %r14, -32
.Ltmp720:
	.cfi_offset %r15, -24
.Ltmp721:
	.cfi_offset %rbp, -16
	movl	%edx, %r14d
	movq	%rsi, %rbp
	movq	%rdi, %rbx
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movl	%r14d, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movb	$1, 24(%rbx)
	movl	$0, 12(%rsp)            # 4-byte Folded Spill
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	xorl	%edi, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r15d
	movq	%rax, 8(%rbx)
	movl	$0, 16(%rbx)
	movl	$1, %edi
	movl	%r15d, %esi
	callq	calloc
	movq	%rax, %r13
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r12d
	movl	%r14d, (%r13)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%r13, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbp, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rbx
	movl	$1, %edi
	movl	%r15d, %esi
	callq	calloc
	movq	%rax, %r13
	movl	%r14d, (%r13)
	movl	%r14d, %r15d
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%r13, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbp, 32(%rax)
	movq	%rbp, %r12
	movq	%rax, %rdi
	callq	*%rbx
	movl	%eax, %r13d
	movq	40(%rsp), %rax
	movq	%rax, 16(%rsp)          # 8-byte Spill
	jmp	.LBB164_7
	.align	16, 0x90
.LBB164_6:                              # %_label24
                                        #   in Loop: Header=BB164_7 Depth=1
	incl	%ebx
	movl	%ebx, 12(%rsp)          # 4-byte Spill
.LBB164_7:                              # %_label20
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_5 Depth 2
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebp
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %r14
	movl	%r15d, (%r14)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %ebx
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%r14, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r14
	movl	$1, %edi
	movl	%ebp, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r15d, (%rbp)
	movl	%ebx, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*%r14
	movl	12(%rsp), %ecx          # 4-byte Reload
	cmpl	%eax, %ecx
	movl	%ecx, %eax
	jge	.LBB164_8
# BB#1:                                 # %_label19
                                        #   in Loop: Header=BB164_7 Depth=1
	movl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%ecx, %ebx
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx,%rax,4), %ecx
	testl	%ecx, %ecx
	jns	.LBB164_3
# BB#2:                                 # %_label22
                                        #   in Loop: Header=BB164_7 Depth=1
	movl	_Pshadow_Pstandard_CIllegalArgumentException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_Pshadow_Pstandard_CIllegalArgumentException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	*_Pshadow_Pstandard_CIllegalArgumentException_Mclass+128(%rip)
	jmp	.LBB164_6
	.align	16, 0x90
.LBB164_3:                              # %_label23
                                        #   in Loop: Header=BB164_7 Depth=1
	cmpl	$128, %ecx
	jl	.LBB164_6
# BB#4:                                 # %_label25
                                        #   in Loop: Header=BB164_7 Depth=1
	movq	24(%rsp), %rcx          # 8-byte Reload
	movb	$0, 24(%rcx)
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	(%rcx,%rax,4), %eax
	incl	%r13d
	movl	$16, %ecx
	cmpl	$2048, %eax             # imm = 0x800
	jl	.LBB164_6
	.align	16, 0x90
.LBB164_5:                              # %_label28
                                        #   Parent Loop BB164_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	$1, %edx
	shll	%cl, %edx
	addl	$5, %ecx
	incl	%r13d
	cmpl	%edx, %eax
	jge	.LBB164_5
	jmp	.LBB164_6
.LBB164_8:                              # %_label21
	movl	%r13d, %edi
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	callq	calloc
	movq	24(%rsp), %r15          # 8-byte Reload
	movl	%r13d, 16(%r15)
	movq	%rax, 8(%r15)
	movl	$0, 36(%rsp)
	xorl	%r15d, %r15d
	movq	40(%rsp), %r12
	movl	48(%rsp), %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	movl	16(%rsp), %r13d         # 4-byte Reload
	jmp	.LBB164_20
	.align	16, 0x90
.LBB164_19:                             # %_label36
                                        #   in Loop: Header=BB164_20 Depth=1
	movl	%edi, %r15d
	incl	%r15d
.LBB164_20:                             # %_label32
                                        # =>This Inner Loop Header: Depth=1
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %ebx
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %r14
	movl	%r13d, (%r14)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %ebp
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%r14, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r14
	movl	$1, %edi
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%r13d, (%rbx)
	movl	%ebp, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*%r14
	cmpl	%eax, %r15d
	jge	.LBB164_21
# BB#9:                                 # %_label31
                                        #   in Loop: Header=BB164_20 Depth=1
	movslq	%r15d, %rax
	movl	%r15d, %edi
	movl	(%r12,%rax,4), %ecx
	cmpl	$127, %ecx
	movq	24(%rsp), %rbp          # 8-byte Reload
	jg	.LBB164_11
# BB#10:                                # %_label34
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	8(%rbp), %rax
	movslq	36(%rsp), %rdx
	movb	%cl, (%rax,%rdx)
	incl	36(%rsp)
	jmp	.LBB164_19
	.align	16, 0x90
.LBB164_11:                             # %_label35
                                        #   in Loop: Header=BB164_20 Depth=1
	cmpl	$2047, %ecx             # imm = 0x7FF
	jg	.LBB164_13
# BB#12:                                # %_label37
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	8(%rbp), %rdx
	shrl	$6, %ecx
	andl	$31, %ecx
	orl	$192, %ecx
	movslq	36(%rsp), %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %eax
	andl	$63, %eax
	orl	$128, %eax
	movq	8(%rbp), %rcx
	movl	36(%rsp), %edx
	incl	%edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	addl	$2, 36(%rsp)
	jmp	.LBB164_19
	.align	16, 0x90
.LBB164_13:                             # %_label38
                                        #   in Loop: Header=BB164_20 Depth=1
	cmpl	$65535, %ecx            # imm = 0xFFFF
	jg	.LBB164_15
# BB#14:                                # %_label40
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	8(%rbp), %rdx
	shrl	$12, %ecx
	andl	$15, %ecx
	orl	$224, %ecx
	movslq	36(%rsp), %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$6, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	incl	%esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %eax
	andl	$63, %eax
	orl	$128, %eax
	movq	8(%rbp), %rcx
	movl	36(%rsp), %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	addl	$3, 36(%rsp)
	jmp	.LBB164_19
.LBB164_15:                             # %_label41
                                        #   in Loop: Header=BB164_20 Depth=1
	cmpl	$2097151, %ecx          # imm = 0x1FFFFF
	jg	.LBB164_17
# BB#16:                                # %_label43
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	8(%rbp), %rdx
	shrl	$18, %ecx
	andl	$7, %ecx
	orl	$240, %ecx
	movslq	36(%rsp), %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$12, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	incl	%esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$6, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	addl	$2, %esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %eax
	andl	$63, %eax
	orl	$128, %eax
	movq	8(%rbp), %rcx
	movl	36(%rsp), %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	addl	$4, 36(%rsp)
	jmp	.LBB164_19
.LBB164_17:                             # %_label44
                                        #   in Loop: Header=BB164_20 Depth=1
	cmpl	$67108863, %ecx         # imm = 0x3FFFFFF
	jg	.LBB164_19
# BB#18:                                # %_label46
                                        #   in Loop: Header=BB164_20 Depth=1
	movq	8(%rbp), %rdx
	shrl	$24, %ecx
	andl	$3, %ecx
	orl	$248, %ecx
	movslq	36(%rsp), %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$18, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	incl	%esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$12, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	addl	$2, %esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %ecx
	shrl	$6, %ecx
	andl	$63, %ecx
	orl	$128, %ecx
	movq	8(%rbp), %rdx
	movl	36(%rsp), %esi
	addl	$3, %esi
	movslq	%esi, %rsi
	movb	%cl, (%rdx,%rsi)
	movl	(%r12,%rax,4), %eax
	andl	$63, %eax
	orl	$128, %eax
	movq	8(%rbp), %rcx
	movl	36(%rsp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	addl	$5, 36(%rsp)
	jmp	.LBB164_19
.LBB164_21:                             # %_label33
	movq	24(%rsp), %rax          # 8-byte Reload
	addq	$56, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp722:
	.size	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1, .Ltmp722-_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString,@function
_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString: # @_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString
# BB#0:
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rbx)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rbx)
	movb	$1, 24(%rbx)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	xorl	%edi, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$0, 16(%rbx)
	movq	8(%r14), %rax
	movl	16(%r14), %ecx
	movl	%ecx, 16(%rbx)
	movq	%rax, 8(%rbx)
	movb	24(%r14), %al
	movb	%al, 24(%rbx)
	movq	%rbx, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp723:
	.size	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString, .Ltmp723-_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString

	.globl	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean,@function
_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean: # @_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rdi)
	movl	%edx, 16(%rdi)
	movq	%rsi, 8(%rdi)
	andl	$1, %ecx
	movb	%cl, 24(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp724:
	.size	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean, .Ltmp724-_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1_Pshadow_Pstandard_Cboolean

	.globl	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString,@function
_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString: # @_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp732:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp733:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp734:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp735:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp736:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp737:
	.cfi_def_cfa_offset 56
	subq	$72, %rsp
.Ltmp738:
	.cfi_def_cfa_offset 128
.Ltmp739:
	.cfi_offset %rbx, -56
.Ltmp740:
	.cfi_offset %r12, -48
.Ltmp741:
	.cfi_offset %r13, -40
.Ltmp742:
	.cfi_offset %r14, -32
.Ltmp743:
	.cfi_offset %r15, -24
.Ltmp744:
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	%r14, (%rsp)            # 8-byte Spill
	movq	%rdi, 8(%rsp)           # 8-byte Spill
	movq	8(%rdi), %rbp
	movl	16(%rdi), %ebx
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %esi
	movl	$1, %edi
	movl	%esi, %r13d
	callq	calloc
	movq	%rax, %r12
	movl	%ebx, (%r12)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %edi
	movl	%edi, %r15d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%r12, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbp, 32(%rax)
	movq	%rbp, %r12
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 48(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	callq	*48(%rsp)               # 8-byte Folded Reload
	movl	%eax, 48(%rsp)          # 4-byte Spill
	movq	8(%r14), %rbx
	movl	16(%r14), %r12d
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%rbx, 32(%rax)
	movq	%rbx, %r14
	movq	(%rax), %rax
	movq	160(%rax), %rbx
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r12d, (%rbp)
	movl	%r15d, %edi
	movl	%r15d, %r12d
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r14, 32(%rax)
	movq	%rax, %rdi
	callq	*%rbx
	movl	%eax, %ebp
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	addl	48(%rsp), %ebp          # 4-byte Folded Reload
	movl	%ebp, %edi
	callq	calloc
	movq	8(%rsp), %r14           # 8-byte Reload
	movl	$0, 48(%rsp)            # 4-byte Folded Spill
	movl	%ebp, 64(%rsp)
	movq	%rax, 56(%rsp)
	movq	56(%rsp), %rax
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jmp	.LBB167_2
	.align	16, 0x90
.LBB167_1:                              # %_label52
                                        #   in Loop: Header=BB167_2 Depth=1
	movslq	%esi, %rax
	movq	8(%r14), %rcx
	movb	(%rcx,%rax), %cl
	movq	40(%rsp), %rdx          # 8-byte Reload
	movb	%cl, (%rdx,%rax)
	incl	%esi
	movl	%esi, 48(%rsp)          # 4-byte Spill
.LBB167_2:                              # %_label53
                                        # =>This Inner Loop Header: Depth=1
	movq	8(%r14), %r15
	movl	16(%r14), %ebx
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	%rax, %rdi
	callq	*32(%rsp)               # 8-byte Folded Reload
	movl	48(%rsp), %esi          # 4-byte Reload
	cmpl	%eax, %esi
	jl	.LBB167_1
# BB#3:                                 # %_label56.preheader
	movq	%r14, 8(%rsp)           # 8-byte Spill
	movl	$0, 48(%rsp)            # 4-byte Folded Spill
	jmp	.LBB167_5
	.align	16, 0x90
.LBB167_4:                              # %_label55
                                        #   in Loop: Header=BB167_5 Depth=1
	movl	48(%rsp), %r15d         # 4-byte Reload
	movslq	%r15d, %rax
	movq	8(%r14), %rcx
	movb	(%rcx,%rax), %al
	movb	%al, 32(%rsp)           # 1-byte Spill
	movq	8(%rsp), %rax           # 8-byte Reload
	movq	8(%rax), %rcx
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movl	16(%rax), %r14d
	movl	$1, %edi
	movl	%r13d, %ebx
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r14d, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	16(%rsp), %r13          # 8-byte Reload
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%ebx, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%r14d, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*24(%rsp)               # 8-byte Folded Reload
	addl	%r15d, %eax
	incl	%r15d
	movl	%r15d, 48(%rsp)         # 4-byte Spill
	movslq	%eax, %rax
	movq	40(%rsp), %rcx          # 8-byte Reload
	movb	32(%rsp), %dl           # 1-byte Reload
	movb	%dl, (%rcx,%rax)
.LBB167_5:                              # %_label56
                                        # =>This Inner Loop Header: Depth=1
	movq	(%rsp), %rax            # 8-byte Reload
	movq	8(%rax), %r15
	movl	16(%rax), %ebx
	movq	%rax, %r14
	movl	$1, %edi
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r13d
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %rax
	movq	%rax, 32(%rsp)          # 8-byte Spill
	movl	$1, %edi
	movl	%r13d, %esi
	callq	calloc
	movq	%rax, %rbp
	movl	%ebx, (%rbp)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbp, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r15, 32(%rax)
	movq	%rax, %rdi
	callq	*32(%rsp)               # 8-byte Folded Reload
	cmpl	%eax, 48(%rsp)          # 4-byte Folded Reload
	jl	.LBB167_4
# BB#6:                                 # %_label57
	movl	_Pshadow_Pstandard_CString_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rax)
	movq	8(%rsp), %rcx           # 8-byte Reload
	movb	24(%rcx), %dl
	xorb	%cl, %cl
	testb	%dl, %dl
	je	.LBB167_8
# BB#7:                                 # %_label59
	movb	24(%r14), %cl
.LBB167_8:                              # %_label58
	movq	56(%rsp), %rdx
	movl	64(%rsp), %esi
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CString_Mclass, (%rax)
	movl	%esi, 16(%rax)
	movq	%rdx, 8(%rax)
	andb	$1, %cl
	movb	%cl, 24(%rax)
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp745:
	.size	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString, .Ltmp745-_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_Msize
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_Msize,@function
_Pshadow_Pstandard_CString_Msize:       # @_Pshadow_Pstandard_CString_Msize
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp753:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp754:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp755:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp756:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp757:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp758:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp759:
	.cfi_def_cfa_offset 64
.Ltmp760:
	.cfi_offset %rbx, -56
.Ltmp761:
	.cfi_offset %r12, -48
.Ltmp762:
	.cfi_offset %r13, -40
.Ltmp763:
	.cfi_offset %r14, -32
.Ltmp764:
	.cfi_offset %r15, -24
.Ltmp765:
	.cfi_offset %rbp, -16
	movq	8(%rdi), %r12
	movl	16(%rdi), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r15d
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r13
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r15d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r12, 32(%rax)
	movq	%rax, %rdi
	movq	%r13, %rax
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmpq	*%rax  # TAILCALL
.Ltmp766:
	.size	_Pshadow_Pstandard_CString_Msize, .Ltmp766-_Pshadow_Pstandard_CString_Msize
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_IStringIterator_MhasNext
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_IStringIterator_MhasNext,@function
_Pshadow_Pstandard_CString_IStringIterator_MhasNext: # @_Pshadow_Pstandard_CString_IStringIterator_MhasNext
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp774:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp775:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp776:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp777:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp778:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp779:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp780:
	.cfi_def_cfa_offset 64
.Ltmp781:
	.cfi_offset %rbx, -56
.Ltmp782:
	.cfi_offset %r12, -48
.Ltmp783:
	.cfi_offset %r13, -40
.Ltmp784:
	.cfi_offset %r14, -32
.Ltmp785:
	.cfi_offset %r15, -24
.Ltmp786:
	.cfi_offset %rbp, -16
	movl	16(%rdi), %eax
	movl	%eax, 4(%rsp)           # 4-byte Spill
	movq	8(%rdi), %rax
	movq	8(%rax), %r13
	movl	16(%rax), %ebp
	movl	_Pshadow_Pstandard_Cint_Mclass+56(%rip), %r14d
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	_Pshadow_Pstandard_CArray_Mclass+52(%rip), %r12d
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	(%rax), %rax
	movq	160(%rax), %r15
	movl	$1, %edi
	movl	%r14d, %esi
	callq	calloc
	movq	%rax, %rbx
	movl	%ebp, (%rbx)
	movl	%r12d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CArray_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Cbyte_Mclass, 24(%rax)
	movq	%rbx, 8(%rax)
	movl	$1, 16(%rax)
	movq	%r13, 32(%rax)
	movq	%rax, %rdi
	callq	*%r15
	cmpl	%eax, 4(%rsp)           # 4-byte Folded Reload
	setl	%al
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp787:
	.size	_Pshadow_Pstandard_CString_IStringIterator_MhasNext, .Ltmp787-_Pshadow_Pstandard_CString_IStringIterator_MhasNext
	.cfi_endproc

	.globl	_Pshadow_Pstandard_CString_IStringIterator_Mnext
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_IStringIterator_Mnext,@function
_Pshadow_Pstandard_CString_IStringIterator_Mnext: # @_Pshadow_Pstandard_CString_IStringIterator_Mnext
# BB#0:
	movslq	16(%rdi), %rsi
	movq	8(%rdi), %rax
	movq	8(%rax), %rax
	movsbl	(%rax,%rsi), %eax
	testl	%eax, %eax
	jns	.LBB170_7
# BB#1:                                 # %_label0
	cmpb	$-65, %al
	jg	.LBB170_2
# BB#8:                                 # %_label5.thread
	andl	$63, %eax
	jmp	.LBB170_7
.LBB170_2:
	xorl	%edx, %edx
	movb	$-64, %cl
	.align	16, 0x90
.LBB170_3:                              # %_label3
                                        # =>This Inner Loop Header: Depth=1
	incl	%edx
	sarb	%cl
	cmpb	%cl, %al
	jge	.LBB170_3
# BB#4:                                 # %_label5
	notb	%cl
	andb	%cl, %al
	movsbl	%al, %eax
	jmp	.LBB170_6
	.align	16, 0x90
.LBB170_5:                              # %_label6
                                        #   in Loop: Header=BB170_6 Depth=1
	incl	%esi
	movl	%esi, 16(%rdi)
	movslq	%esi, %r8
	movq	8(%rdi), %rcx
	movq	8(%rcx), %rcx
	movzbl	(%rcx,%r8), %ecx
	andl	$63, %ecx
	shll	$6, %eax
	orl	%ecx, %eax
	decl	%edx
.LBB170_6:                              # %_label6
                                        # =>This Inner Loop Header: Depth=1
	testl	%edx, %edx
	jg	.LBB170_5
.LBB170_7:                              # %_label2
	incl	%esi
	movl	%esi, 16(%rdi)
	ret
.Ltmp788:
	.size	_Pshadow_Pstandard_CString_IStringIterator_Mnext, .Ltmp788-_Pshadow_Pstandard_CString_IStringIterator_Mnext

	.globl	_Pshadow_Pstandard_CString_IStringIterator_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CString_IStringIterator_Mcreate,@function
_Pshadow_Pstandard_CString_IStringIterator_Mcreate: # @_Pshadow_Pstandard_CString_IStringIterator_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CString_IStringIterator_Mclass, (%rdi)
	movq	%rsi, 8(%rdi)
	movl	$0, 16(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp789:
	.size	_Pshadow_Pstandard_CString_IStringIterator_Mcreate, .Ltmp789-_Pshadow_Pstandard_CString_IStringIterator_Mcreate

	.globl	_Pshadow_Pstandard_CSystem_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_CSystem_Mcreate,@function
_Pshadow_Pstandard_CSystem_Mcreate:     # @_Pshadow_Pstandard_CSystem_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CSystem_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp790:
	.size	_Pshadow_Pstandard_CSystem_Mcreate, .Ltmp790-_Pshadow_Pstandard_CSystem_Mcreate

	.globl	_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte
# BB#0:
	movsbl	%sil, %eax
	cmpb	$9, %al
	ja	.LBB173_2
# BB#1:                                 # %_label0
	addl	$48, %eax
	ret
.LBB173_2:                              # %_label2
	addl	$87, %eax
	ret
.Ltmp791:
	.size	_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte, .Ltmp791-_Pshadow_Pstandard_Cubyte_Mdigit_Pshadow_Pstandard_Cubyte

	.globl	_Pshadow_Pstandard_Cubyte_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_MtoString,@function
_Pshadow_Pstandard_Cubyte_MtoString:    # @_Pshadow_Pstandard_Cubyte_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp794:
	.cfi_def_cfa_offset 16
.Ltmp795:
	.cfi_offset %rbx, -16
	movb	8(%rdi), %bl
	movl	_Pshadow_Pstandard_Cubyte_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Cubyte_Mclass, (%rax)
	movb	%bl, 8(%rax)
	movq	%rax, %rdi
	movl	$10, %esi
	popq	%rbx
	jmp	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte # TAILCALL
.Ltmp796:
	.size	_Pshadow_Pstandard_Cubyte_MtoString, .Ltmp796-_Pshadow_Pstandard_Cubyte_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte,@function
_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte: # @_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp804:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp805:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp806:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp807:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp808:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp809:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp810:
	.cfi_def_cfa_offset 64
.Ltmp811:
	.cfi_offset %rbx, -56
.Ltmp812:
	.cfi_offset %r12, -48
.Ltmp813:
	.cfi_offset %r13, -40
.Ltmp814:
	.cfi_offset %r14, -32
.Ltmp815:
	.cfi_offset %r15, -24
.Ltmp816:
	.cfi_offset %rbp, -16
	movl	%esi, %r14d
	movb	8(%rdi), %bpl
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r13
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r13)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r13)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r15d
	movq	%rax, 8(%r13)
	movl	$10, 16(%r13)
	movl	$0, 24(%r13)
	movl	$48, %r12d
	.align	16, 0x90
.LBB175_1:                              # %_label3
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	movq	112(%rax), %rbx
	movl	%r15d, %edi
	callq	malloc
	movq	%rax, %rcx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movzbl	%bpl, %eax
                                        # kill: EAX<def> EAX<kill> AX<def>
	divb	%r14b
	movw	%ax, %bp
	shrw	$8, %ax
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	cmpb	$10, %al
	movl	$87, %edx
	cmovbl	%r12d, %edx
	movsbl	%al, %eax
	addl	%edx, %eax
	movl	%eax, 8(%rcx)
	movq	%r13, %rdi
	movq	%rcx, %rsi
	callq	*%rbx
	testb	%bpl, %bpl
	jne	.LBB175_1
# BB#2:                                 # %_label5
	movq	(%r13), %rax
	movq	%r13, %rdi
	callq	*152(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*104(%rcx)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp817:
	.size	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte, .Ltmp817-_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cubyte_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cubyte_Mcreate,@function
_Pshadow_Pstandard_Cubyte_Mcreate:      # @_Pshadow_Pstandard_Cubyte_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cubyte_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp818:
	.size	_Pshadow_Pstandard_Cubyte_Mcreate, .Ltmp818-_Pshadow_Pstandard_Cubyte_Mcreate

	.globl	_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint
# BB#0:
	movl	%esi, %eax
	cmpl	$9, %eax
	ja	.LBB177_2
# BB#1:                                 # %_label0
	addl	$48, %eax
	ret
.LBB177_2:                              # %_label2
	addl	$87, %eax
	ret
.Ltmp819:
	.size	_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint, .Ltmp819-_Pshadow_Pstandard_Cuint_Mdigit_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint
# BB#0:                                 # %_label5
	movl	8(%rdi), %eax
	cmpl	%esi, %eax
	cmovael	%esi, %eax
	ret
.Ltmp820:
	.size	_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint, .Ltmp820-_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint
# BB#0:                                 # %_label8
	movl	8(%rdi), %eax
	cmpl	%esi, %eax
	cmovbel	%esi, %eax
	ret
.Ltmp821:
	.size	_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint, .Ltmp821-_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint

	.globl	_Pshadow_Pstandard_Cuint_Mhash
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mhash,@function
_Pshadow_Pstandard_Cuint_Mhash:         # @_Pshadow_Pstandard_Cuint_Mhash
# BB#0:
	movl	8(%rdi), %eax
	ret
.Ltmp822:
	.size	_Pshadow_Pstandard_Cuint_Mhash, .Ltmp822-_Pshadow_Pstandard_Cuint_Mhash

	.globl	_Pshadow_Pstandard_Cuint_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_MtoString,@function
_Pshadow_Pstandard_Cuint_MtoString:     # @_Pshadow_Pstandard_Cuint_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp830:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp831:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp832:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp833:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp834:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp835:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp836:
	.cfi_def_cfa_offset 64
.Ltmp837:
	.cfi_offset %rbx, -56
.Ltmp838:
	.cfi_offset %r12, -48
.Ltmp839:
	.cfi_offset %r13, -40
.Ltmp840:
	.cfi_offset %r14, -32
.Ltmp841:
	.cfi_offset %r15, -24
.Ltmp842:
	.cfi_offset %rbp, -16
	movl	8(%rdi), %ebp
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r12
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r12)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r12)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r14d
	movq	%rax, 8(%r12)
	movl	$10, 16(%r12)
	movl	$0, 24(%r12)
	movl	$3435973837, %r15d      # imm = 0xCCCCCCCD
	.align	16, 0x90
.LBB181_1:                              # %_label9.i
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r12), %rax
	movq	112(%rax), %r13
	movl	%r14d, %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	%ebp, %ebx
	movq	%rbx, %rbp
	imulq	%r15, %rbp
	shrq	$35, %rbp
	imull	$10, %ebp, %edx
	movl	%ebx, %ecx
	subl	%edx, %ecx
	orl	$48, %ecx
	movl	%ecx, 8(%rax)
	movq	%r12, %rdi
	movq	%rax, %rsi
	callq	*%r13
	cmpl	$9, %ebx
	ja	.LBB181_1
# BB#2:                                 # %_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint.exit
	movq	(%r12), %rax
	movq	%r12, %rdi
	callq	*152(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	jmpq	*104(%rcx)  # TAILCALL
.Ltmp843:
	.size	_Pshadow_Pstandard_Cuint_MtoString, .Ltmp843-_Pshadow_Pstandard_Cuint_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint,@function
_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint: # @_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp851:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp852:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp853:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp854:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp855:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp856:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp857:
	.cfi_def_cfa_offset 64
.Ltmp858:
	.cfi_offset %rbx, -56
.Ltmp859:
	.cfi_offset %r12, -48
.Ltmp860:
	.cfi_offset %r13, -40
.Ltmp861:
	.cfi_offset %r14, -32
.Ltmp862:
	.cfi_offset %r15, -24
.Ltmp863:
	.cfi_offset %rbp, -16
	movl	%esi, %r14d
	movl	8(%rdi), %ebp
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r13
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r13)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r13)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r15d
	movq	%rax, 8(%r13)
	movl	$10, 16(%r13)
	movl	$0, 24(%r13)
	movl	$48, %r12d
	.align	16, 0x90
.LBB182_1:                              # %_label9
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r13), %rax
	movq	112(%rax), %rbx
	movl	%r15d, %edi
	callq	malloc
	movq	%rax, %rcx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movl	%ebp, %eax
	xorl	%edx, %edx
	divl	%r14d
	movl	%eax, %ebp
	cmpl	$10, %edx
	movl	$87, %eax
	cmovbl	%r12d, %eax
	addl	%edx, %eax
	movl	%eax, 8(%rcx)
	movq	%r13, %rdi
	movq	%rcx, %rsi
	callq	*%rbx
	testl	%ebp, %ebp
	jne	.LBB182_1
# BB#2:                                 # %_label11
	movq	(%r13), %rax
	movq	%r13, %rdi
	callq	*152(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*104(%rcx)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp864:
	.size	_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint, .Ltmp864-_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Cuint_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cuint_Mcreate,@function
_Pshadow_Pstandard_Cuint_Mcreate:       # @_Pshadow_Pstandard_Cuint_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cuint_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp865:
	.size	_Pshadow_Pstandard_Cuint_Mcreate, .Ltmp865-_Pshadow_Pstandard_Cuint_Mcreate

	.globl	_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong
# BB#0:
	movq	%rsi, %rax
	cmpq	$9, %rax
	ja	.LBB184_2
# BB#1:                                 # %_label0
	addl	$48, %eax
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	ret
.LBB184_2:                              # %_label2
	addl	$87, %eax
                                        # kill: EAX<def> EAX<kill> RAX<kill>
	ret
.Ltmp866:
	.size	_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong, .Ltmp866-_Pshadow_Pstandard_Culong_Mdigit_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Pstandard_Culong_MtoString
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_MtoString,@function
_Pshadow_Pstandard_Culong_MtoString:    # @_Pshadow_Pstandard_Culong_MtoString
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp869:
	.cfi_def_cfa_offset 16
.Ltmp870:
	.cfi_offset %rbx, -16
	movq	8(%rdi), %rbx
	movl	_Pshadow_Pstandard_Culong_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Culong_Mclass, (%rax)
	movq	%rbx, 8(%rax)
	movq	%rax, %rdi
	movl	$10, %esi
	popq	%rbx
	jmp	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong # TAILCALL
.Ltmp871:
	.size	_Pshadow_Pstandard_Culong_MtoString, .Ltmp871-_Pshadow_Pstandard_Culong_MtoString
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong,@function
_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong: # @_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp879:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp880:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp881:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp882:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp883:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp884:
	.cfi_def_cfa_offset 56
	pushq	%rax
.Ltmp885:
	.cfi_def_cfa_offset 64
.Ltmp886:
	.cfi_offset %rbx, -56
.Ltmp887:
	.cfi_offset %r12, -48
.Ltmp888:
	.cfi_offset %r13, -40
.Ltmp889:
	.cfi_offset %r14, -32
.Ltmp890:
	.cfi_offset %r15, -24
.Ltmp891:
	.cfi_offset %rbp, -16
	movq	%rsi, %r14
	movq	8(%rdi), %rbx
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r15
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r15)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r15)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %r12d
	movq	%rax, 8(%r15)
	movl	$10, 16(%r15)
	movl	$0, 24(%r15)
	movl	$48, %r13d
	.align	16, 0x90
.LBB186_1:                              # %_label3
                                        # =>This Inner Loop Header: Depth=1
	movq	(%r15), %rax
	movq	112(%rax), %rbp
	movl	%r12d, %edi
	callq	malloc
	movq	%rax, %rcx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	movq	%rbx, %rax
	xorl	%edx, %edx
	divq	%r14
	movq	%rax, %rbx
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rcx)
	cmpq	$10, %rdx
	movl	$87, %eax
	cmovbq	%r13, %rax
	addl	%edx, %eax
	movl	%eax, 8(%rcx)
	movq	%r15, %rdi
	movq	%rcx, %rsi
	callq	*%rbp
	testq	%rbx, %rbx
	jne	.LBB186_1
# BB#2:                                 # %_label5
	movq	(%r15), %rax
	movq	%r15, %rdi
	callq	*152(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*104(%rcx)
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp892:
	.size	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong, .Ltmp892-_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong
	.cfi_endproc

	.globl	_Pshadow_Pstandard_Culong_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Culong_Mcreate,@function
_Pshadow_Pstandard_Culong_Mcreate:      # @_Pshadow_Pstandard_Culong_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Culong_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp893:
	.size	_Pshadow_Pstandard_Culong_Mcreate, .Ltmp893-_Pshadow_Pstandard_Culong_Mcreate

	.globl	_P_CUnexpectedNullException_Mcreate
	.align	16, 0x90
	.type	_P_CUnexpectedNullException_Mcreate,@function
_P_CUnexpectedNullException_Mcreate:    # @_P_CUnexpectedNullException_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rdi)
	movq	$.L_string2136, 8(%rdi)
	movq	$_P_CUnexpectedNullException_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp894:
	.size	_P_CUnexpectedNullException_Mcreate, .Ltmp894-_P_CUnexpectedNullException_Mcreate

	.globl	_Pshadow_Pstandard_Cushort_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pstandard_Cushort_Mcreate,@function
_Pshadow_Pstandard_Cushort_Mcreate:     # @_Pshadow_Pstandard_Cushort_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_Cushort_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp895:
	.size	_Pshadow_Pstandard_Cushort_Mcreate, .Ltmp895-_Pshadow_Pstandard_Cushort_Mcreate

	.globl	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject,@function
_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject: # @_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%r14
.Ltmp899:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp900:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp901:
	.cfi_def_cfa_offset 32
.Ltmp902:
	.cfi_offset %rbx, -24
.Ltmp903:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movq	(%rbx), %rax
	movq	136(%rax), %r14
	movl	$.L_string1470, %eax
	testq	%rsi, %rsi
	je	.LBB190_2
# BB#1:                                 # %_label1
	movq	(%rsi), %rax
	movq	%rsi, %rdi
	callq	*104(%rax)
.LBB190_2:                              # %_label2
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%r14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp904:
	.size	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject, .Ltmp904-_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MreadLine
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MreadLine,@function
_Pshadow_Pio_CConsole_MreadLine:        # @_Pshadow_Pio_CConsole_MreadLine
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp910:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp911:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp912:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp913:
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
.Ltmp914:
	.cfi_def_cfa_offset 64
.Ltmp915:
	.cfi_offset %rbx, -40
.Ltmp916:
	.cfi_offset %r14, -32
.Ltmp917:
	.cfi_offset %r15, -24
.Ltmp918:
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movl	_Pshadow_Pstandard_CMutableString_Mclass+52(%rip), %edi
	callq	malloc
	movq	%rax, %r15
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%r15)
	movq	$_Pshadow_Pstandard_CMutableString_Mclass, (%r15)
	movl	_Pshadow_Pstandard_Cbyte_Mclass+56(%rip), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%r15)
	movl	$10, 16(%r15)
	movl	$0, 24(%r15)
	movq	%r15, 16(%rsp)
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*184(%rax)
	movl	%eax, %ebp
	movb	%dl, %al
	andb	$1, %al
	movb	%al, 15(%rsp)
	movb	8(%r14), %al
	testb	%al, %al
	je	.LBB191_3
# BB#1:                                 # %_label7
	cmpl	$10, %ebp
	jne	.LBB191_5
# BB#2:                                 # %_label3
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*184(%rax)
	movl	%eax, %ebp
	movb	%dl, %al
	andb	$1, %al
	movb	%al, 15(%rsp)
.LBB191_3:                              # %_label9.preheader
	xorb	%al, %al
.LBB191_4:                              # %_label9.preheader
	cmpl	$10, %ebp
	je	.LBB191_9
.LBB191_5:                              # %_label12
	cmpl	$13, %ebp
	je	.LBB191_8
# BB#6:                                 # %_label11
	testb	$1, %dl
	jne	.LBB191_7
# BB#12:                                # %_label8
	movq	(%r15), %rax
	movq	112(%rax), %rbx
	movl	_Pshadow_Pstandard_Ccode_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_Ccode_Mclass, (%rax)
	movl	%ebp, 8(%rax)
	movq	%r15, %rdi
	movq	%rax, %rsi
	callq	*%rbx
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*184(%rax)
	movl	%eax, %ebp
	xorb	%al, %al
	movb	%dl, %cl
	andb	$1, %cl
	movb	%cl, 15(%rsp)
	jmp	.LBB191_4
.LBB191_7:                              # %_label10
	xorb	%al, %al
	movb	$1, %dl
	cmpl	$13, %ebp
	jne	.LBB191_9
.LBB191_8:                              # %_label15
	xorb	$1, %dl
	movb	%dl, %al
.LBB191_9:                              # %_label14
	andb	$1, %al
	movb	%al, 8(%r14)
	movl	$.L_string1470, %eax
	movq	16(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB191_11
# BB#10:                                # %_label17
	movq	(%rdi), %rax
	callq	*104(%rax)
.LBB191_11:                             # %_label18
	movb	15(%rsp), %dl
	addq	$24, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp919:
	.size	_Pshadow_Pio_CConsole_MreadLine, .Ltmp919-_Pshadow_Pio_CConsole_MreadLine
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject,@function
_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject: # @_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp921:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	callq	*112(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	popq	%rax
	jmpq	*168(%rcx)  # TAILCALL
.Ltmp922:
	.size	_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject, .Ltmp922-_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject,@function
_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject: # @_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp924:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	callq	*128(%rax)
	movq	(%rax), %rcx
	movq	%rax, %rdi
	popq	%rax
	jmpq	*152(%rcx)  # TAILCALL
.Ltmp925:
	.size	_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject, .Ltmp925-_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_Mcreate,@function
_Pshadow_Pio_CConsole_Mcreate:          # @_Pshadow_Pio_CConsole_Mcreate
# BB#0:
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rdi)
	movq	$_Pshadow_Pio_CConsole_Mclass, (%rdi)
	movb	$0, 8(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp926:
	.size	_Pshadow_Pio_CConsole_Mcreate, .Ltmp926-_Pshadow_Pio_CConsole_Mcreate

	.globl	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject,@function
_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject: # @_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject
	.cfi_startproc
# BB#0:
	pushq	%r14
.Ltmp930:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp931:
	.cfi_def_cfa_offset 24
	pushq	%rax
.Ltmp932:
	.cfi_def_cfa_offset 32
.Ltmp933:
	.cfi_offset %rbx, -24
.Ltmp934:
	.cfi_offset %r14, -16
	movq	%rdi, %rbx
	movq	(%rbx), %rax
	movq	120(%rax), %r14
	movl	$.L_string1470, %eax
	testq	%rsi, %rsi
	je	.LBB195_2
# BB#1:                                 # %_label20
	movq	(%rsi), %rax
	movq	%rsi, %rdi
	callq	*104(%rax)
.LBB195_2:                              # %_label21
	movq	%rbx, %rdi
	movq	%rax, %rsi
	callq	*%r14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	ret
.Ltmp935:
	.size	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject, .Ltmp935-_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject
	.cfi_endproc

	.globl	_Pshadow_Pio_CConsole_MreadCode
	.align	16, 0x90
	.type	_Pshadow_Pio_CConsole_MreadCode,@function
_Pshadow_Pio_CConsole_MreadCode:        # @_Pshadow_Pio_CConsole_MreadCode
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp940:
	.cfi_def_cfa_offset 16
	pushq	%r14
.Ltmp941:
	.cfi_def_cfa_offset 24
	pushq	%rbx
.Ltmp942:
	.cfi_def_cfa_offset 32
.Ltmp943:
	.cfi_offset %rbx, -32
.Ltmp944:
	.cfi_offset %r14, -24
.Ltmp945:
	.cfi_offset %rbp, -16
	movq	%rdi, %r14
	movq	(%r14), %rax
	callq	*176(%rax)
	movsbl	%al, %ebp
	testb	%bpl, %bpl
	jns	.LBB196_7
# BB#1:                                 # %_label22
	cmpb	$-65, %al
	jg	.LBB196_2
# BB#8:                                 # %_label27.thread
	andl	$63, %ebp
	jmp	.LBB196_7
.LBB196_2:
	xorl	%ebx, %ebx
	movb	$-64, %cl
	.align	16, 0x90
.LBB196_3:                              # %_label25
                                        # =>This Inner Loop Header: Depth=1
	incl	%ebx
	sarb	%cl
	cmpb	%cl, %al
	jge	.LBB196_3
# BB#4:                                 # %_label27
	notb	%cl
	andb	%cl, %al
	movsbl	%al, %ebp
	jmp	.LBB196_6
	.align	16, 0x90
.LBB196_5:                              # %_label28
                                        #   in Loop: Header=BB196_6 Depth=1
	movq	(%r14), %rax
	movq	%r14, %rdi
	callq	*176(%rax)
	andb	$63, %al
	movzbl	%al, %eax
	shll	$6, %ebp
	orl	%eax, %ebp
	decl	%ebx
.LBB196_6:                              # %_label28
                                        # =>This Inner Loop Header: Depth=1
	testl	%ebx, %ebx
	jg	.LBB196_5
.LBB196_7:                              # %_label24
	movl	%ebp, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp946:
	.size	_Pshadow_Pio_CConsole_MreadCode, .Ltmp946-_Pshadow_Pio_CConsole_MreadCode
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext,@function
_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext: # @_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp948:
	.cfi_def_cfa_offset 16
	movq	16(%rdi), %rax
	movl	24(%rdi), %ecx
	cmpl	32(%rax), %ecx
	jne	.LBB197_2
# BB#1:                                 # %_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications.exit
	movl	28(%rdi), %ecx
	cmpl	36(%rax), %ecx
	setl	%al
	popq	%rdx
	ret
.LBB197_2:                              # %_label6.i
	movl	_P_CIllegalModificationException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp949:
	.size	_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext, .Ltmp949-_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext,@function
_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext: # @_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp951:
	.cfi_def_cfa_offset 16
	movq	16(%rdi), %rax
	movl	24(%rdi), %ecx
	cmpl	32(%rax), %ecx
	jne	.LBB198_4
# BB#1:                                 # %_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications.exit
	movl	28(%rdi), %ecx
	cmpl	36(%rax), %ecx
	jge	.LBB198_5
# BB#2:                                 # %_label2
	movslq	%ecx, %rdx
	movq	8(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	testq	%rax, %rax
	je	.LBB198_3
# BB#6:                                 # %_label5
	incl	%ecx
	movl	%ecx, 28(%rdi)
	popq	%rdx
	ret
.LBB198_4:                              # %_label6.i
	movl	_P_CIllegalModificationException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.LBB198_5:                              # %_label0
	movl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.LBB198_3:                              # %_label4
	movl	_P_CUnexpectedNullException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_P_CUnexpectedNullException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp952:
	.size	_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext, .Ltmp952-_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate,@function
_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate: # @_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate
# BB#0:
	movq	$_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass, (%rdi)
	movq	%rsi, 16(%rdi)
	movq	%rdx, 8(%rdi)
	movl	$0, 28(%rdi)
	movq	16(%rdi), %rax
	movl	32(%rax), %eax
	movl	%eax, 24(%rdi)
	movq	%rdi, %rax
	ret
.Ltmp953:
	.size	_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate, .Ltmp953-_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate

	.globl	_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications,@function
_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications: # @_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp955:
	.cfi_def_cfa_offset 16
	movq	16(%rdi), %rax
	movl	24(%rdi), %ecx
	cmpl	32(%rax), %ecx
	jne	.LBB200_2
# BB#1:                                 # %_label8
	popq	%rax
	ret
.LBB200_2:                              # %_label6
	movl	_P_CIllegalModificationException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	$_P_CIllegalModificationException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp956:
	.size	_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications, .Ltmp956-_Pshadow_Putility_CArrayList_IArrayListIterator_McheckForModifications
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Mclear
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mclear,@function
_Pshadow_Putility_CArrayList_Mclear:    # @_Pshadow_Putility_CArrayList_Mclear
# BB#0:
	movl	$0, 36(%rdi)
	incl	32(%rdi)
	ret
.Ltmp957:
	.size	_Pshadow_Putility_CArrayList_Mclear, .Ltmp957-_Pshadow_Putility_CArrayList_Mclear

	.globl	_Pshadow_Putility_CArrayList_Miterator
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Miterator,@function
_Pshadow_Putility_CArrayList_Miterator: # @_Pshadow_Putility_CArrayList_Miterator
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movl	_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass, (%rax)
	movq	24(%rbx), %rcx
	movq	$_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass, (%rax)
	movq	%rbx, 16(%rax)
	movq	%rcx, 8(%rax)
	movl	$0, 28(%rax)
	movq	16(%rax), %rcx
	movl	32(%rcx), %ecx
	movl	%ecx, 24(%rax)
	popq	%rbx
	ret
.Ltmp958:
	.size	_Pshadow_Putility_CArrayList_Miterator, .Ltmp958-_Pshadow_Putility_CArrayList_Miterator

	.globl	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint,@function
_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint: # @_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp960:
	.cfi_def_cfa_offset 16
	testl	%esi, %esi
	js	.LBB203_4
# BB#1:                                 # %_label3
	cmpl	%esi, 36(%rdi)
	jle	.LBB203_4
# BB#2:                                 # %_label2
	movslq	%esi, %rax
	movq	8(%rdi), %rcx
	movq	(%rcx,%rax,8), %rax
	testq	%rax, %rax
	je	.LBB203_3
# BB#5:                                 # %_label7
	popq	%rdx
	ret
.LBB203_4:                              # %_label0
	movl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.LBB203_3:                              # %_label6
	movl	_P_CUnexpectedNullException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_P_CUnexpectedNullException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp961:
	.size	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint, .Ltmp961-_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV,@function
_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV: # @_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp967:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp968:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp969:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp970:
	.cfi_def_cfa_offset 40
	subq	$24, %rsp
.Ltmp971:
	.cfi_def_cfa_offset 64
.Ltmp972:
	.cfi_offset %rbx, -40
.Ltmp973:
	.cfi_offset %r14, -32
.Ltmp974:
	.cfi_offset %r15, -24
.Ltmp975:
	.cfi_offset %rbp, -16
	movq	%rdx, %r14
	movl	%esi, %r15d
	movq	%rdi, %rbx
	testl	%r15d, %r15d
	js	.LBB204_11
# BB#1:                                 # %_label11
	cmpl	%r15d, 36(%rbx)
	jl	.LBB204_11
# BB#2:                                 # %_label10
	jne	.LBB204_10
# BB#3:                                 # %_label13
	movl	16(%rbx), %ebp
	cmpl	%r15d, %ebp
	movl	%r15d, %eax
	jg	.LBB204_9
# BB#4:                                 # %_label16
	movq	24(%rbx), %rax
	movl	56(%rax), %esi
	addl	%ebp, %ebp
	movl	%ebp, %edi
	callq	calloc
	movl	%ebp, 16(%rsp)
	movq	%rax, 8(%rsp)
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB204_8
# BB#5:                                 # %_label22.lr.ph.i
	movq	8(%rbx), %rdx
	xorl	%eax, %eax
	movq	8(%rsp), %rcx
	.align	16, 0x90
.LBB204_6:                              # %_label22.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	%eax, %rax
	movq	(%rdx,%rax,8), %rdx
	movq	%rdx, (%rcx,%rax,8)
	movq	8(%rbx), %rdx
	incl	%eax
	cmpl	16(%rbx), %eax
	jl	.LBB204_6
# BB#7:                                 # %_label23._label24_crit_edge.i
	movl	16(%rsp), %ebp
	movq	8(%rsp), %rax
.LBB204_8:                              # %_Pshadow_Putility_CArrayList_Mgrow.exit
	movq	%rax, 8(%rbx)
	movl	%ebp, 16(%rbx)
	movl	36(%rbx), %eax
.LBB204_9:                              # %_label18
	incl	%eax
	movl	%eax, 36(%rbx)
.LBB204_10:                             # %_label15
	movq	8(%rbx), %rax
	movslq	%r15d, %rcx
	movq	%r14, (%rax,%rcx,8)
	incl	32(%rbx)
	addq	$24, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.LBB204_11:                             # %_label8
	movl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp976:
	.size	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV, .Ltmp976-_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Mremove_CV
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mremove_CV,@function
_Pshadow_Putility_CArrayList_Mremove_CV: # @_Pshadow_Putility_CArrayList_Mremove_CV
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp979:
	.cfi_def_cfa_offset 16
.Ltmp980:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	(%rbx), %rax
	callq	*160(%rax)
	cmpl	$-1, %eax
	jne	.LBB205_2
# BB#1:                                 # %_label19
	xorb	%al, %al
	popq	%rbx
	ret
.LBB205_2:                              # %_label21
	movq	(%rbx), %rcx
	movq	%rbx, %rdi
	movl	%eax, %esi
	callq	*136(%rcx)
	movb	$1, %al
	popq	%rbx
	ret
.Ltmp981:
	.size	_Pshadow_Putility_CArrayList_Mremove_CV, .Ltmp981-_Pshadow_Putility_CArrayList_Mremove_CV
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Mgrow
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mgrow,@function
_Pshadow_Putility_CArrayList_Mgrow:     # @_Pshadow_Putility_CArrayList_Mgrow
# BB#0:
	pushq	%rbp
	pushq	%rbx
	subq	$24, %rsp
	movq	%rdi, %rbx
	movq	24(%rbx), %rax
	movl	56(%rax), %esi
	movl	16(%rbx), %ebp
	addl	%ebp, %ebp
	movl	%ebp, %edi
	callq	calloc
	movl	%ebp, 16(%rsp)
	movq	%rax, 8(%rsp)
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB206_4
# BB#1:                                 # %_label22.lr.ph
	movq	8(%rbx), %rdx
	xorl	%eax, %eax
	movq	8(%rsp), %rcx
	.align	16, 0x90
.LBB206_2:                              # %_label22
                                        # =>This Inner Loop Header: Depth=1
	movslq	%eax, %rax
	movq	(%rdx,%rax,8), %rdx
	movq	%rdx, (%rcx,%rax,8)
	movq	8(%rbx), %rdx
	incl	%eax
	cmpl	16(%rbx), %eax
	jl	.LBB206_2
# BB#3:                                 # %_label23._label24_crit_edge
	movl	16(%rsp), %ebp
	movq	8(%rsp), %rax
.LBB206_4:                              # %_label24
	movq	%rax, 8(%rbx)
	movl	%ebp, 16(%rbx)
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp982:
	.size	_Pshadow_Putility_CArrayList_Mgrow, .Ltmp982-_Pshadow_Putility_CArrayList_Mgrow

	.globl	_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint,@function
_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint: # @_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp984:
	.cfi_def_cfa_offset 32
	movq	%rdi, 16(%rsp)
	testl	%esi, %esi
	js	.LBB207_8
# BB#1:                                 # %_label28
	movl	36(%rdi), %eax
	cmpl	%esi, %eax
	jle	.LBB207_8
# BB#2:                                 # %_label27
	movslq	%esi, %rcx
	movq	8(%rdi), %r8
	movq	(%r8,%rcx,8), %rcx
	testq	%rcx, %rcx
	je	.LBB207_7
# BB#3:                                 # %_label32
	movq	%rcx, 8(%rsp)
	decl	%eax
	cmpl	%esi, %eax
	jle	.LBB207_6
	jmp	.LBB207_4
	.align	16, 0x90
.LBB207_5:                              # %_label33._label33_crit_edge
                                        #   in Loop: Header=BB207_4 Depth=1
	movq	8(%rdi), %r8
	movl	%edx, %esi
.LBB207_4:                              # %_label33
                                        # =>This Inner Loop Header: Depth=1
	leal	1(%rsi), %edx
	movslq	%edx, %rcx
	movq	(%r8,%rcx,8), %rax
	movslq	%esi, %rsi
	movq	%rax, (%r8,%rsi,8)
	movl	36(%rdi), %eax
	decl	%eax
	cmpl	%eax, %ecx
	jl	.LBB207_5
.LBB207_6:                              # %_label35
	movl	%eax, 36(%rdi)
	movq	16(%rsp), %rax
	incl	32(%rax)
	movq	8(%rsp), %rax
	addq	$24, %rsp
	ret
.LBB207_8:                              # %_label25
	movl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.LBB207_7:                              # %_label31
	movl	_P_CUnexpectedNullException_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CException_Mclass, (%rax)
	movq	$.L_string2136, 8(%rax)
	movq	$_P_CUnexpectedNullException_Mclass, (%rax)
	movq	%rax, %rdi
	callq	_Pshadow_Pstandard_CException_Mthrow__
.Ltmp985:
	.size	_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint, .Ltmp985-_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Mcontains_CV
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mcontains_CV,@function
_Pshadow_Putility_CArrayList_Mcontains_CV: # @_Pshadow_Putility_CArrayList_Mcontains_CV
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp987:
	.cfi_def_cfa_offset 16
	movq	(%rdi), %rax
	callq	*160(%rax)
	cmpl	$-1, %eax
	setne	%al
	popq	%rdx
	ret
.Ltmp988:
	.size	_Pshadow_Putility_CArrayList_Mcontains_CV, .Ltmp988-_Pshadow_Putility_CArrayList_Mcontains_CV
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_MindexOf_CV
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_MindexOf_CV,@function
_Pshadow_Putility_CArrayList_MindexOf_CV: # @_Pshadow_Putility_CArrayList_MindexOf_CV
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp994:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp995:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp996:
	.cfi_def_cfa_offset 32
	pushq	%rbx
.Ltmp997:
	.cfi_def_cfa_offset 40
	pushq	%rax
.Ltmp998:
	.cfi_def_cfa_offset 48
.Ltmp999:
	.cfi_offset %rbx, -40
.Ltmp1000:
	.cfi_offset %r14, -32
.Ltmp1001:
	.cfi_offset %r15, -24
.Ltmp1002:
	.cfi_offset %rbp, -16
	movq	%rsi, %r15
	movq	%rdi, %rbp
	movl	16(%rbp), %eax
	movl	$-1, %r14d
	testl	%eax, %eax
	jle	.LBB209_8
# BB#1:
	movq	8(%rbp), %rcx
	xorl	%ebx, %ebx
	.align	16, 0x90
.LBB209_2:                              # %_label36
                                        # =>This Inner Loop Header: Depth=1
	movslq	%ebx, %rdx
	movq	(%rcx,%rdx,8), %rdi
	testq	%rdi, %rdi
	jne	.LBB209_3
# BB#6:                                 # %_label44
                                        #   in Loop: Header=BB209_2 Depth=1
	testq	%r15, %r15
	jne	.LBB209_5
	jmp	.LBB209_7
	.align	16, 0x90
.LBB209_3:                              # %_label43
                                        #   in Loop: Header=BB209_2 Depth=1
	movq	(%rdi), %rax
	movq	%r15, %rsi
	callq	*80(%rax)
	testb	$1, %al
	jne	.LBB209_7
# BB#4:                                 # %_label43._label41_crit_edge
                                        #   in Loop: Header=BB209_2 Depth=1
	movl	16(%rbp), %eax
	movq	8(%rbp), %rcx
.LBB209_5:                              # %_label41
                                        #   in Loop: Header=BB209_2 Depth=1
	incl	%ebx
	cmpl	%eax, %ebx
	jl	.LBB209_2
	jmp	.LBB209_8
.LBB209_7:
	movl	%ebx, %r14d
.LBB209_8:                              # %_label39
	movl	%r14d, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1003:
	.size	_Pshadow_Putility_CArrayList_MindexOf_CV, .Ltmp1003-_Pshadow_Putility_CArrayList_MindexOf_CV
	.cfi_endproc

	.globl	_Pshadow_Putility_CArrayList_Madd_CV
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Madd_CV,@function
_Pshadow_Putility_CArrayList_Madd_CV:   # @_Pshadow_Putility_CArrayList_Madd_CV
# BB#0:
	pushq	%rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	movq	%rsi, %r14
	movq	%rdi, %rbx
	movl	16(%rbx), %ebp
	movl	36(%rbx), %eax
	cmpl	%ebp, %eax
	jl	.LBB210_6
# BB#1:                                 # %_label45
	movq	24(%rbx), %rax
	movl	56(%rax), %esi
	addl	%ebp, %ebp
	movl	%ebp, %edi
	callq	calloc
	movl	%ebp, 8(%rsp)
	movq	%rax, (%rsp)
	movl	16(%rbx), %ecx
	testl	%ecx, %ecx
	jle	.LBB210_5
# BB#2:                                 # %_label22.lr.ph.i
	movq	8(%rbx), %rdx
	xorl	%eax, %eax
	movq	(%rsp), %rcx
	.align	16, 0x90
.LBB210_3:                              # %_label22.i
                                        # =>This Inner Loop Header: Depth=1
	movslq	%eax, %rax
	movq	(%rdx,%rax,8), %rdx
	movq	%rdx, (%rcx,%rax,8)
	movq	8(%rbx), %rdx
	incl	%eax
	cmpl	16(%rbx), %eax
	jl	.LBB210_3
# BB#4:                                 # %_label23._label24_crit_edge.i
	movl	8(%rsp), %ebp
	movq	(%rsp), %rax
.LBB210_5:                              # %_Pshadow_Putility_CArrayList_Mgrow.exit
	movq	%rax, 8(%rbx)
	movl	%ebp, 16(%rbx)
	movl	36(%rbx), %eax
.LBB210_6:                              # %_label47
	movq	8(%rbx), %rcx
	movslq	%eax, %rax
	movq	%r14, (%rcx,%rax,8)
	incl	36(%rbx)
	incl	32(%rbx)
	movb	$1, %al
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	ret
.Ltmp1004:
	.size	_Pshadow_Putility_CArrayList_Madd_CV, .Ltmp1004-_Pshadow_Putility_CArrayList_Madd_CV

	.globl	_Pshadow_Putility_CArrayList_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Mcreate,@function
_Pshadow_Putility_CArrayList_Mcreate:   # @_Pshadow_Putility_CArrayList_Mcreate
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	$_Pshadow_Putility_CArrayList_Mclass, (%rbx)
	movq	%rsi, 24(%rbx)
	movl	$0, 32(%rbx)
	movl	56(%rsi), %esi
	movl	$10, %edi
	callq	calloc
	movq	%rax, 8(%rbx)
	movl	$10, 16(%rbx)
	movl	$0, 36(%rbx)
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp1005:
	.size	_Pshadow_Putility_CArrayList_Mcreate, .Ltmp1005-_Pshadow_Putility_CArrayList_Mcreate

	.globl	_Pshadow_Putility_CArrayList_Msize
	.align	16, 0x90
	.type	_Pshadow_Putility_CArrayList_Msize,@function
_Pshadow_Putility_CArrayList_Msize:     # @_Pshadow_Putility_CArrayList_Msize
# BB#0:
	movl	36(%rdi), %eax
	ret
.Ltmp1006:
	.size	_Pshadow_Putility_CArrayList_Msize, .Ltmp1006-_Pshadow_Putility_CArrayList_Msize

	.globl	_P_CIllegalModificationException_Mcreate
	.align	16, 0x90
	.type	_P_CIllegalModificationException_Mcreate,@function
_P_CIllegalModificationException_Mcreate: # @_P_CIllegalModificationException_Mcreate
# BB#0:
	movq	$_P_CIllegalModificationException_Mclass, (%rdi)
	movq	%rdi, %rax
	ret
.Ltmp1007:
	.size	_P_CIllegalModificationException_Mcreate, .Ltmp1007-_P_CIllegalModificationException_Mcreate

	.globl	_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint,@function
_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint: # @_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp1010:
	.cfi_def_cfa_offset 16
.Ltmp1011:
	.cfi_offset %rbx, -16
	movl	%esi, %ebx
	movq	(%rdi), %rax
	callq	*136(%rax)
	xorl	%edx, %edx
	divl	%ebx
	movl	%edx, %eax
	popq	%rbx
	ret
.Ltmp1012:
	.size	_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint, .Ltmp1012-_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint
	.cfi_endproc

	.globl	_Pshadow_Putility_CRandom_Mcreate
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_Mcreate,@function
_Pshadow_Putility_CRandom_Mcreate:      # @_Pshadow_Putility_CRandom_Mcreate
	.cfi_startproc
# BB#0:
	pushq	%rbx
.Ltmp1015:
	.cfi_def_cfa_offset 16
	subq	$16, %rsp
.Ltmp1016:
	.cfi_def_cfa_offset 32
.Ltmp1017:
	.cfi_offset %rbx, -16
	movq	%rdi, %rbx
	movq	$_Pshadow_Putility_CRandom_Mclass, (%rbx)
	cmpq	$0, _Pshadow_Pstandard_CSystem_Minstance(%rip)
	jne	.LBB215_2
# BB#1:                                 # %_label0
	movl	_Pshadow_Pstandard_CSystem_Mclass+52(%rip), %edi
	callq	malloc
	movq	$_Pshadow_Pstandard_CObject_Mclass, (%rax)
	movq	$_Pshadow_Pstandard_CSystem_Mclass, (%rax)
	movq	%rax, _Pshadow_Pstandard_CSystem_Minstance(%rip)
.LBB215_2:                              # %_label1
	leaq	(%rsp), %rsi
	movl	$1, %edi
	callq	clock_gettime
	xorl	%esi, %esi
	testl	%eax, %eax
	jne	.LBB215_4
# BB#3:
	imulq	$1000000000, (%rsp), %rsi # imm = 0x3B9ACA00
	addq	8(%rsp), %rsi
.LBB215_4:                              # %_Pshadow_Pstandard_CSystem_MnanoTime.exit
	movq	(%rbx), %rax
	movq	%rbx, %rdi
	callq	*152(%rax)
	movq	%rbx, %rax
	addq	$16, %rsp
	popq	%rbx
	ret
.Ltmp1018:
	.size	_Pshadow_Putility_CRandom_Mcreate, .Ltmp1018-_Pshadow_Putility_CRandom_Mcreate
	.cfi_endproc

	.globl	_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong,@function
_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong: # @_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong
# BB#0:
	pushq	%rbx
	movq	%rdi, %rbx
	movq	$_Pshadow_Putility_CRandom_Mclass, (%rbx)
	xorl	%edi, %edi
	callq	srand
	movq	%rbx, %rax
	popq	%rbx
	ret
.Ltmp1019:
	.size	_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong, .Ltmp1019-_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Putility_CRandom_MnextInt
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_MnextInt,@function
_Pshadow_Putility_CRandom_MnextInt:     # @_Pshadow_Putility_CRandom_MnextInt
	.cfi_startproc
# BB#0:
	movq	(%rdi), %rax
	jmpq	*136(%rax)  # TAILCALL
.Ltmp1020:
	.size	_Pshadow_Putility_CRandom_MnextInt, .Ltmp1020-_Pshadow_Putility_CRandom_MnextInt
	.cfi_endproc

	.globl	_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint,@function
_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint: # @_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint
	.cfi_startproc
# BB#0:
	movq	(%rdi), %rax
	movq	144(%rax), %rax
	jmpq	*%rax  # TAILCALL
.Ltmp1021:
	.size	_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint, .Ltmp1021-_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint
	.cfi_endproc

	.globl	_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong,@function
_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong: # @_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong
# BB#0:
	xorl	%edi, %edi
	jmp	srand                   # TAILCALL
.Ltmp1022:
	.size	_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong, .Ltmp1022-_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong

	.globl	_Pshadow_Putility_CRandom_MnextUInt
	.align	16, 0x90
	.type	_Pshadow_Putility_CRandom_MnextUInt,@function
_Pshadow_Putility_CRandom_MnextUInt:    # @_Pshadow_Putility_CRandom_MnextUInt
# BB#0:
	jmp	rand                    # TAILCALL
.Ltmp1023:
	.size	_Pshadow_Putility_CRandom_MnextUInt, .Ltmp1023-_Pshadow_Putility_CRandom_MnextUInt

	.type	.Lseparator,@object     # @separator
	.section	.rodata,"a",@progbits
	.align	16
.Lseparator:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array1133
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.Lseparator, 32

	.type	_Pshadow_Ptest_CConsoleTest_Mclass,@object # @_Pshadow_Ptest_CConsoleTest_Mclass
	.globl	_Pshadow_Ptest_CConsoleTest_Mclass
	.align	16
_Pshadow_Ptest_CConsoleTest_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Ptest_CConsoleTest_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Ptest_CConsoleTest_Mmain_Pshadow_Pstandard_CString_A1
	.size	_Pshadow_Ptest_CConsoleTest_Mclass, 120

	.type	.L_array0,@object       # @_array0
	.align	16
.L_array0:
	.ascii	 "shadow.test@ConsoleTest"
	.size	.L_array0, 23

	.type	.L_string0,@object      # @_string0
	.align	16
.L_string0:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0
	.long	23                      # 0x17
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0, 32

	.type	.L_array1,@object       # @_array1
.L_array1:
	.ascii	 "Test String\r\n"
	.size	.L_array1, 13

	.type	.L_string1,@object      # @_string1
	.align	16
.L_string1:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array1
	.long	13                      # 0xd
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string1, 32

	.type	.L_array2,@object       # @_array2
	.align	16
.L_array2:
	.ascii	 "Enter your name: "
	.size	.L_array2, 17

	.type	.L_string2,@object      # @_string2
	.align	16
.L_string2:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array2
	.long	17                      # 0x11
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string2, 32

	.type	.L_array3,@object       # @_array3
.L_array3:
	.ascii	 "Your name is "
	.size	.L_array3, 13

	.type	.L_string3,@object      # @_string3
	.align	16
.L_string3:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array3
	.long	13                      # 0xd
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string3, 32

	.type	.Lnewline,@object       # @newline
.Lnewline:
	.byte	10
	.size	.Lnewline, 1

	.type	.Lshadow.exception.class,@object # @shadow.exception.class
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.Lshadow.exception.class:
	.asciz	 "Shadow\000"
	.size	.Lshadow.exception.class, 8

	.type	_Pshadow_Pstandard_CArray_Mclass,@object # @_Pshadow_Pstandard_CArray_Mclass
	.section	.rodata,"a",@progbits
	.globl	_Pshadow_Pstandard_CArray_Mclass
	.align	16
_Pshadow_Pstandard_CArray_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string026
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+40)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CArray_Mcopy
	.quad	_Pshadow_Pstandard_CObject_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CArray_MtoString
	.quad	_Pshadow_Pstandard_CArray_Mcreate_Pshadow_Pstandard_Cint_A1
	.quad	_Pshadow_Pstandard_CArray_Mdims
	.quad	_Pshadow_Pstandard_CArray_MgetBaseClass
	.quad	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1
	.quad	_Pshadow_Pstandard_CArray_Mindex_Pshadow_Pstandard_Cint_A1_CT
	.quad	_Pshadow_Pstandard_CArray_Mlengths
	.quad	_Pshadow_Pstandard_CArray_Msize
	.quad	_Pshadow_Pstandard_CArray_Msubarray_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.size	_Pshadow_Pstandard_CArray_Mclass, 176

	.type	.L_array025,@object     # @_array025
	.align	16
.L_array025:
	.ascii	 "shadow.standard@Array<T>"
	.size	.L_array025, 24

	.type	.L_string026,@object    # @_string026
	.align	16
.L_string026:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array025
	.long	24                      # 0x18
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string026, 32

	.type	.L_array127,@object     # @_array127
.L_array127:
	.ascii	 "[]"
	.size	.L_array127, 2

	.type	.L_string128,@object    # @_string128
	.align	16
.L_string128:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array127
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string128, 32

	.type	.L_array229,@object     # @_array229
.L_array229:
	.ascii	 "[ "
	.size	.L_array229, 2

	.type	.L_string230,@object    # @_string230
	.align	16
.L_string230:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array229
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string230, 32

	.type	.L_array331,@object     # @_array331
.L_array331:
	.ascii	 ", "
	.size	.L_array331, 2

	.type	.L_string332,@object    # @_string332
	.align	16
.L_string332:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array331
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string332, 32

	.type	.L_array433,@object     # @_array433
.L_array433:
	.ascii	 " ]"
	.size	.L_array433, 2

	.type	.L_string434,@object    # @_string434
	.align	16
.L_string434:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array433
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string434, 32

	.type	_Pshadow_Pstandard_Cboolean_Mclass,@object # @_Pshadow_Pstandard_Cboolean_Mclass
	.globl	_Pshadow_Pstandard_Cboolean_Mclass
	.align	16
_Pshadow_Pstandard_Cboolean_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string062
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+1)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cboolean_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cboolean_MtoString
	.size	_Pshadow_Pstandard_Cboolean_Mclass, 112

	.type	.L_array061,@object     # @_array061
.L_array061:
	.ascii	 "boolean"
	.size	.L_array061, 7

	.type	.L_string062,@object    # @_string062
	.align	16
.L_string062:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array061
	.long	7                       # 0x7
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string062, 32

	.type	.L_array163,@object     # @_array163
	.section	.rodata.cst4,"aM",@progbits,4
.L_array163:
	.ascii	 "true"
	.size	.L_array163, 4

	.type	.L_string164,@object    # @_string164
	.section	.rodata,"a",@progbits
	.align	16
.L_string164:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array163
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string164, 32

	.type	.L_array265,@object     # @_array265
.L_array265:
	.ascii	 "false"
	.size	.L_array265, 5

	.type	.L_string266,@object    # @_string266
	.align	16
.L_string266:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array265
	.long	5                       # 0x5
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string266, 32

	.type	_Pshadow_Pstandard_Cbyte_Mclass,@object # @_Pshadow_Pstandard_Cbyte_Mclass
	.globl	_Pshadow_Pstandard_Cbyte_Mclass
	.align	16
_Pshadow_Pstandard_Cbyte_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string074
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+1)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cbyte_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cbyte_MtoString
	.quad	_Pshadow_Pstandard_Cbyte_Mabs
	.quad	_Pshadow_Pstandard_Cbyte_Madd_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mcompare_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mdivide_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mmax_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mmin_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mmodulus_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Mmultiply_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_Msubtract_Pshadow_Pstandard_Cbyte
	.quad	_Pshadow_Pstandard_Cbyte_MtoString_Pshadow_Pstandard_Cubyte
	.size	_Pshadow_Pstandard_Cbyte_Mclass, 192

	.type	.L_array073,@object     # @_array073
	.section	.rodata.cst4,"aM",@progbits,4
.L_array073:
	.ascii	 "byte"
	.size	.L_array073, 4

	.type	.L_string074,@object    # @_string074
	.section	.rodata,"a",@progbits
	.align	16
.L_string074:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array073
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string074, 32

	.type	_Pshadow_Pstandard_CClass_Mclass,@object # @_Pshadow_Pstandard_CClass_Mclass
	.globl	_Pshadow_Pstandard_CClass_Mclass
	.align	16
_Pshadow_Pstandard_CClass_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string092
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+64)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CObject_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CClass_MtoString
	.quad	_Pshadow_Pstandard_CClass_MisInterface
	.quad	_Pshadow_Pstandard_CClass_MisPrimitive
	.quad	_Pshadow_Pstandard_CClass_MisSubtype_Pshadow_Pstandard_CClass
	.quad	_Pshadow_Pstandard_CClass_Mparent
	.size	_Pshadow_Pstandard_CClass_Mclass, 144

	.type	.L_array091,@object     # @_array091
	.align	16
.L_array091:
	.ascii	 "shadow.standard@Class"
	.size	.L_array091, 21

	.type	.L_string092,@object    # @_string092
	.align	16
.L_string092:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array091
	.long	21                      # 0x15
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string092, 32

	.type	_Pshadow_Pstandard_Ccode_Mclass,@object # @_Pshadow_Pstandard_Ccode_Mclass
	.globl	_Pshadow_Pstandard_Ccode_Mclass
	.align	16
_Pshadow_Pstandard_Ccode_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0112
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+4)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Ccode_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Ccode_MtoString
	.quad	_Pshadow_Pstandard_Ccode_MtoLowerCase
	.quad	_Pshadow_Pstandard_Ccode_MtoUpperCase
	.size	_Pshadow_Pstandard_Ccode_Mclass, 128

	.type	.L_array0111,@object    # @_array0111
	.section	.rodata.cst4,"aM",@progbits,4
.L_array0111:
	.ascii	 "code"
	.size	.L_array0111, 4

	.type	.L_string0112,@object   # @_string0112
	.section	.rodata,"a",@progbits
	.align	16
.L_string0112:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0111
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0112, 32

	.type	_Pshadow_Pstandard_Cdouble_Mclass,@object # @_Pshadow_Pstandard_Cdouble_Mclass
	.globl	_Pshadow_Pstandard_Cdouble_Mclass
	.align	16
_Pshadow_Pstandard_Cdouble_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0124
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cdouble_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cdouble_MtoString
	.quad	_Pshadow_Pstandard_Cdouble_Madd_Pshadow_Pstandard_Cdouble
	.quad	_Pshadow_Pstandard_Cdouble_Mcompare_Pshadow_Pstandard_Cdouble
	.quad	_Pshadow_Pstandard_Cdouble_Mdivide_Pshadow_Pstandard_Cdouble
	.quad	_Pshadow_Pstandard_Cdouble_Mmodulus_Pshadow_Pstandard_Cdouble
	.quad	_Pshadow_Pstandard_Cdouble_Mmultiply_Pshadow_Pstandard_Cdouble
	.quad	_Pshadow_Pstandard_Cdouble_Msubtract_Pshadow_Pstandard_Cdouble
	.size	_Pshadow_Pstandard_Cdouble_Mclass, 160

	.type	.L_array0123,@object    # @_array0123
.L_array0123:
	.ascii	 "double"
	.size	.L_array0123, 6

	.type	.L_string0124,@object   # @_string0124
	.align	16
.L_string0124:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0123
	.long	6                       # 0x6
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0124, 32

	.type	.Lformat,@object        # @format
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lformat:
	.asciz	 "%f"
	.size	.Lformat, 3

	.type	_Pshadow_Pstandard_CException_Mclass,@object # @_Pshadow_Pstandard_CException_Mclass
	.section	.rodata,"a",@progbits
	.globl	_Pshadow_Pstandard_CException_Mclass
	.align	16
_Pshadow_Pstandard_CException_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0132
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	((0+8)&-1)*2
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CException_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CException_Mmessage
	.quad	_Pshadow_Pstandard_CException_Mthrow__
	.size	_Pshadow_Pstandard_CException_Mclass, 136

	.type	.L_array0131,@object    # @_array0131
	.align	16
.L_array0131:
	.ascii	 "shadow.standard@Exception"
	.size	.L_array0131, 25

	.type	.L_string0132,@object   # @_string0132
	.align	16
.L_string0132:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0131
	.long	25                      # 0x19
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0132, 32

	.type	.L_array1133,@object    # @_array1133
.L_array1133:
	.ascii	 ": "
	.size	.L_array1133, 2

	.type	.L_string1134,@object   # @_string1134
	.align	16
.L_string1134:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array1133
	.long	2                       # 0x2
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string1134, 32

	.type	.L_array2135,@object    # @_array2135
.L_array2135:
	.size	.L_array2135, 0

	.type	.L_string2136,@object   # @_string2136
	.align	16
.L_string2136:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array2135
	.zero	4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string2136, 32

	.type	_Pshadow_Pstandard_Cfloat_Mclass,@object # @_Pshadow_Pstandard_Cfloat_Mclass
	.globl	_Pshadow_Pstandard_Cfloat_Mclass
	.align	16
_Pshadow_Pstandard_Cfloat_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0148
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+4)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cfloat_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_Cfloat_Madd_Pshadow_Pstandard_Cfloat
	.quad	_Pshadow_Pstandard_Cfloat_Mcompare_Pshadow_Pstandard_Cfloat
	.quad	_Pshadow_Pstandard_Cfloat_Mdivide_Pshadow_Pstandard_Cfloat
	.quad	_Pshadow_Pstandard_Cfloat_Mmodulus_Pshadow_Pstandard_Cfloat
	.quad	_Pshadow_Pstandard_Cfloat_Mmultiply_Pshadow_Pstandard_Cfloat
	.quad	_Pshadow_Pstandard_Cfloat_Msubtract_Pshadow_Pstandard_Cfloat
	.size	_Pshadow_Pstandard_Cfloat_Mclass, 160

	.type	.L_array0147,@object    # @_array0147
.L_array0147:
	.ascii	 "float"
	.size	.L_array0147, 5

	.type	.L_string0148,@object   # @_string0148
	.align	16
.L_string0148:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0147
	.long	5                       # 0x5
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0148, 32

	.type	_Pshadow_Pstandard_CIllegalArgumentException_Mclass,@object # @_Pshadow_Pstandard_CIllegalArgumentException_Mclass
	.globl	_Pshadow_Pstandard_CIllegalArgumentException_Mclass
	.align	16
_Pshadow_Pstandard_CIllegalArgumentException_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0152
	.quad	_Pshadow_Pstandard_CException_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CIllegalArgumentException_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CException_Mmessage
	.quad	_Pshadow_Pstandard_CException_Mthrow__
	.size	_Pshadow_Pstandard_CIllegalArgumentException_Mclass, 136

	.type	.L_array0151,@object    # @_array0151
	.align	16
.L_array0151:
	.ascii	 "shadow.standard@IllegalArgumentException"
	.size	.L_array0151, 40

	.type	.L_string0152,@object   # @_string0152
	.align	16
.L_string0152:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0151
	.long	40                      # 0x28
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0152, 32

	.type	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass,@object # @_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass
	.globl	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass
	.align	16
_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0154
	.quad	_Pshadow_Pstandard_CException_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CException_Mmessage
	.quad	_Pshadow_Pstandard_CException_Mthrow__
	.quad	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mcreate_Pshadow_Pstandard_Cint
	.size	_Pshadow_Pstandard_CIndexOutOfBoundsException_Mclass, 144

	.type	.L_array0153,@object    # @_array0153
	.align	16
.L_array0153:
	.ascii	 "shadow.standard@IndexOutOfBoundsException"
	.size	.L_array0153, 41

	.type	.L_string0154,@object   # @_string0154
	.align	16
.L_string0154:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0153
	.long	41                      # 0x29
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0154, 32

	.type	.L_array1155,@object    # @_array1155
.L_array1155:
	.ascii	 "index "
	.size	.L_array1155, 6

	.type	.L_string1156,@object   # @_string1156
	.align	16
.L_string1156:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array1155
	.long	6                       # 0x6
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string1156, 32

	.type	.L_array3159,@object    # @_array3159
.L_array3159:
	.ascii	 " out of bounds"
	.size	.L_array3159, 14

	.type	.L_string3160,@object   # @_string3160
	.align	16
.L_string3160:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array3159
	.long	14                      # 0xe
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string3160, 32

	.type	_Pshadow_Pstandard_Cint_Mclass,@object # @_Pshadow_Pstandard_Cint_Mclass
	.globl	_Pshadow_Pstandard_Cint_Mclass
	.align	16
_Pshadow_Pstandard_Cint_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0164
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+4)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cint_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cint_MtoString
	.quad	_Pshadow_Pstandard_Cint_Mabs
	.quad	_Pshadow_Pstandard_Cint_Madd_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mcompare_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mdivide_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mhash
	.quad	_Pshadow_Pstandard_Cint_Mmax_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mmin_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mmodulus_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Mmultiply_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_Msubtract_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_Cint_MtoString_Pshadow_Pstandard_Cuint
	.size	_Pshadow_Pstandard_Cint_Mclass, 200

	.type	.L_array0163,@object    # @_array0163
.L_array0163:
	.ascii	 "int"
	.size	.L_array0163, 3

	.type	.L_string0164,@object   # @_string0164
	.align	16
.L_string0164:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0163
	.long	3                       # 0x3
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0164, 32

	.type	_Pshadow_Pstandard_Clong_Mclass,@object # @_Pshadow_Pstandard_Clong_Mclass
	.globl	_Pshadow_Pstandard_Clong_Mclass
	.align	16
_Pshadow_Pstandard_Clong_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0184
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Clong_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Clong_MtoString
	.quad	_Pshadow_Pstandard_Clong_Mabs
	.quad	_Pshadow_Pstandard_Clong_Madd_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mcompare_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mdivide_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mhash
	.quad	_Pshadow_Pstandard_Clong_Mmax_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mmin_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mmodulus_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Mmultiply_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_Msubtract_Pshadow_Pstandard_Clong
	.quad	_Pshadow_Pstandard_Clong_MtoString_Pshadow_Pstandard_Culong
	.size	_Pshadow_Pstandard_Clong_Mclass, 200

	.type	.L_array0183,@object    # @_array0183
	.section	.rodata.cst4,"aM",@progbits,4
.L_array0183:
	.ascii	 "long"
	.size	.L_array0183, 4

	.type	.L_string0184,@object   # @_string0184
	.section	.rodata,"a",@progbits
	.align	16
.L_string0184:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0183
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0184, 32

	.type	_Pshadow_Pstandard_CMutableString_Mclass,@object # @_Pshadow_Pstandard_CMutableString_Mclass
	.globl	_Pshadow_Pstandard_CMutableString_Mclass
	.align	16
_Pshadow_Pstandard_CMutableString_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0204
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+32)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CMutableString_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CMutableString_MtoString
	.quad	_Pshadow_Pstandard_CMutableString_Mappend_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CMutableString_Mcapacity
	.quad	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_CMutableString_Mcreate_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CMutableString_MensureCapacity_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_CMutableString_Mreverse
	.quad	_Pshadow_Pstandard_CMutableString_Msize
	.size	_Pshadow_Pstandard_CMutableString_Mclass, 168

	.type	.L_array0203,@object    # @_array0203
	.align	16
.L_array0203:
	.ascii	 "shadow.standard@MutableString"
	.size	.L_array0203, 29

	.type	.L_string0204,@object   # @_string0204
	.align	16
.L_string0204:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0203
	.long	29                      # 0x1d
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0204, 32

	.type	_Pshadow_Pstandard_CObject_Mclass,@object # @_Pshadow_Pstandard_CObject_Mclass
	.globl	_Pshadow_Pstandard_CObject_Mclass
	.align	16
_Pshadow_Pstandard_CObject_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0348
	.quad	0
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CObject_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.size	_Pshadow_Pstandard_CObject_Mclass, 112

	.type	.L_array0347,@object    # @_array0347
	.align	16
.L_array0347:
	.ascii	 "shadow.standard@Object"
	.size	.L_array0347, 22

	.type	.L_string0348,@object   # @_string0348
	.align	16
.L_string0348:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0347
	.long	22                      # 0x16
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0348, 32

	.type	_Pshadow_Pstandard_CReference_Mclass,@object # @_Pshadow_Pstandard_CReference_Mclass
	.globl	_Pshadow_Pstandard_CReference_Mclass
	.align	16
_Pshadow_Pstandard_CReference_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0362
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	((0+8)&-1)*3
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CReference_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CReference_MtoString
	.quad	_Pshadow_Pstandard_CReference_Mcreate_CT
	.quad	_Pshadow_Pstandard_CReference_Mvalue
	.quad	_Pshadow_Pstandard_CReference_Mvalue_CT
	.size	_Pshadow_Pstandard_CReference_Mclass, 136

	.type	.L_array0361,@object    # @_array0361
	.align	16
.L_array0361:
	.ascii	 "shadow.standard@Reference<T>"
	.size	.L_array0361, 28

	.type	.L_string0362,@object   # @_string0362
	.align	16
.L_string0362:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0361
	.long	28                      # 0x1c
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0362, 32

	.type	_Pshadow_Pstandard_Cshort_Mclass,@object # @_Pshadow_Pstandard_Cshort_Mclass
	.globl	_Pshadow_Pstandard_Cshort_Mclass
	.align	16
_Pshadow_Pstandard_Cshort_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0368
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+2)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cshort_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_Cshort_Madd_Pshadow_Pstandard_Cshort
	.quad	_Pshadow_Pstandard_Cshort_Mcompare_Pshadow_Pstandard_Cshort
	.quad	_Pshadow_Pstandard_Cshort_Mdivide_Pshadow_Pstandard_Cshort
	.quad	_Pshadow_Pstandard_Cshort_Mmodulus_Pshadow_Pstandard_Cshort
	.quad	_Pshadow_Pstandard_Cshort_Mmultiply_Pshadow_Pstandard_Cshort
	.quad	_Pshadow_Pstandard_Cshort_Msubtract_Pshadow_Pstandard_Cshort
	.size	_Pshadow_Pstandard_Cshort_Mclass, 160

	.type	.L_array0367,@object    # @_array0367
.L_array0367:
	.ascii	 "short"
	.size	.L_array0367, 5

	.type	.L_string0368,@object   # @_string0368
	.align	16
.L_string0368:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0367
	.long	5                       # 0x5
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0368, 32

	.type	_Pshadow_Pstandard_CString_Mclass,@object # @_Pshadow_Pstandard_CString_Mclass
	.globl	_Pshadow_Pstandard_CString_Mclass
	.align	16
_Pshadow_Pstandard_CString_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0374
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+32)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CString_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CString_MtoString
	.quad	_Pshadow_Pstandard_CString_Mchars
	.quad	_Pshadow_Pstandard_CString_Mcompare_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CString_Mconcatenate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Cbyte_A1
	.quad	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_Ccode_A1
	.quad	_Pshadow_Pstandard_CString_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CString_Mequals_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CString_MgetChar_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_CString_MisEmpty
	.quad	_Pshadow_Pstandard_CString_Miterator
	.quad	_Pshadow_Pstandard_CString_Msize
	.quad	_Pshadow_Pstandard_CString_Msubstring_Pshadow_Pstandard_Cint_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Pstandard_CString_MtoLowerCase
	.quad	_Pshadow_Pstandard_CString_MtoUpperCase
	.size	_Pshadow_Pstandard_CString_Mclass, 224

	.type	.L_array0373,@object    # @_array0373
	.align	16
.L_array0373:
	.ascii	 "shadow.standard@String"
	.size	.L_array0373, 22

	.type	.L_string0374,@object   # @_string0374
	.align	16
.L_string0374:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0373
	.long	22                      # 0x16
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0374, 32

	.type	_Pshadow_Pstandard_CString_IStringIterator_Mclass,@object # @_Pshadow_Pstandard_CString_IStringIterator_Mclass
	.globl	_Pshadow_Pstandard_CString_IStringIterator_Mclass
	.align	16
_Pshadow_Pstandard_CString_IStringIterator_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0410
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+24)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CString_IStringIterator_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CString_IStringIterator_MhasNext
	.quad	_Pshadow_Pstandard_CString_IStringIterator_Mnext
	.size	_Pshadow_Pstandard_CString_IStringIterator_Mclass, 128

	.type	.L_array0409,@object    # @_array0409
	.align	16
.L_array0409:
	.ascii	 "shadow.standard@String:StringIterator"
	.size	.L_array0409, 37

	.type	.L_string0410,@object   # @_string0410
	.align	16
.L_string0410:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0409
	.long	37                      # 0x25
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0410, 32

	.type	_Pshadow_Pstandard_CSystem_Mclass,@object # @_Pshadow_Pstandard_CSystem_Mclass
	.globl	_Pshadow_Pstandard_CSystem_Mclass
	.align	16
_Pshadow_Pstandard_CSystem_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0418
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_CSystem_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CSystem_MnanoTime
	.size	_Pshadow_Pstandard_CSystem_Mclass, 120

	.type	_Pshadow_Pstandard_CSystem_Minstance,@object # @_Pshadow_Pstandard_CSystem_Minstance
	.bss
	.globl	_Pshadow_Pstandard_CSystem_Minstance
	.align	8
_Pshadow_Pstandard_CSystem_Minstance:
	.quad	0
	.size	_Pshadow_Pstandard_CSystem_Minstance, 8

	.type	.L_array0417,@object    # @_array0417
	.section	.rodata,"a",@progbits
	.align	16
.L_array0417:
	.ascii	 "shadow.standard@System"
	.size	.L_array0417, 22

	.type	.L_string0418,@object   # @_string0418
	.align	16
.L_string0418:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0417
	.long	22                      # 0x16
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0418, 32

	.type	_Pshadow_Pstandard_Cubyte_Mclass,@object # @_Pshadow_Pstandard_Cubyte_Mclass
	.globl	_Pshadow_Pstandard_Cubyte_Mclass
	.align	16
_Pshadow_Pstandard_Cubyte_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0422
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+1)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cubyte_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cubyte_MtoString
	.quad	_Pshadow_Pstandard_Cubyte_Madd_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_Mcompare_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_Mdivide_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_Mmodulus_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_Mmultiply_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_Msubtract_Pshadow_Pstandard_Cubyte
	.quad	_Pshadow_Pstandard_Cubyte_MtoString_Pshadow_Pstandard_Cubyte
	.size	_Pshadow_Pstandard_Cubyte_Mclass, 168

	.type	.L_array0421,@object    # @_array0421
.L_array0421:
	.ascii	 "ubyte"
	.size	.L_array0421, 5

	.type	.L_string0422,@object   # @_string0422
	.align	16
.L_string0422:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0421
	.long	5                       # 0x5
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0422, 32

	.type	_Pshadow_Pstandard_Cuint_Mclass,@object # @_Pshadow_Pstandard_Cuint_Mclass
	.globl	_Pshadow_Pstandard_Cuint_Mclass
	.align	16
_Pshadow_Pstandard_Cuint_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0432
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+4)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cuint_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Cuint_MtoString
	.quad	_Pshadow_Pstandard_Cuint_Madd_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mcompare_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mdivide_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mhash
	.quad	_Pshadow_Pstandard_Cuint_Mmax_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mmin_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mmodulus_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Mmultiply_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_Msubtract_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Pstandard_Cuint_MtoString_Pshadow_Pstandard_Cuint
	.size	_Pshadow_Pstandard_Cuint_Mclass, 192

	.type	.L_array0431,@object    # @_array0431
	.section	.rodata.cst4,"aM",@progbits,4
.L_array0431:
	.ascii	 "uint"
	.size	.L_array0431, 4

	.type	.L_string0432,@object   # @_string0432
	.section	.rodata,"a",@progbits
	.align	16
.L_string0432:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0431
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0432, 32

	.type	_Pshadow_Pstandard_Culong_Mclass,@object # @_Pshadow_Pstandard_Culong_Mclass
	.globl	_Pshadow_Pstandard_Culong_Mclass
	.align	16
_Pshadow_Pstandard_Culong_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0448
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Culong_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_Culong_MtoString
	.quad	_Pshadow_Pstandard_Culong_Madd_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_Mcompare_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_Mdivide_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_Mmodulus_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_Mmultiply_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_Msubtract_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Pstandard_Culong_MtoString_Pshadow_Pstandard_Culong
	.size	_Pshadow_Pstandard_Culong_Mclass, 168

	.type	.L_array0447,@object    # @_array0447
.L_array0447:
	.ascii	 "ulong"
	.size	.L_array0447, 5

	.type	.L_string0448,@object   # @_string0448
	.align	16
.L_string0448:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0447
	.long	5                       # 0x5
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0448, 32

	.type	_P_CUnexpectedNullException_Mclass,@object # @_P_CUnexpectedNullException_Mclass
	.globl	_P_CUnexpectedNullException_Mclass
	.align	16
_P_CUnexpectedNullException_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0456
	.quad	_Pshadow_Pstandard_CException_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_P_CUnexpectedNullException_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CException_Mmessage
	.quad	_Pshadow_Pstandard_CException_Mthrow__
	.size	_P_CUnexpectedNullException_Mclass, 136

	.type	.L_array0455,@object    # @_array0455
	.align	16
.L_array0455:
	.ascii	 "default@UnexpectedNullException"
	.size	.L_array0455, 31

	.type	.L_string0456,@object   # @_string0456
	.align	16
.L_string0456:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0455
	.long	31                      # 0x1f
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0456, 32

	.type	_Pshadow_Pstandard_Cushort_Mclass,@object # @_Pshadow_Pstandard_Cushort_Mclass
	.globl	_Pshadow_Pstandard_Cushort_Mclass
	.align	16
_Pshadow_Pstandard_Cushort_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0460
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	2                       # 0x2
	.long	(0+16)&-1
	.long	(0+2)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pstandard_Cushort_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_Cushort_Madd_Pshadow_Pstandard_Cushort
	.quad	_Pshadow_Pstandard_Cushort_Mcompare_Pshadow_Pstandard_Cushort
	.quad	_Pshadow_Pstandard_Cushort_Mdivide_Pshadow_Pstandard_Cushort
	.quad	_Pshadow_Pstandard_Cushort_Mmodulus_Pshadow_Pstandard_Cushort
	.quad	_Pshadow_Pstandard_Cushort_Mmultiply_Pshadow_Pstandard_Cushort
	.quad	_Pshadow_Pstandard_Cushort_Msubtract_Pshadow_Pstandard_Cushort
	.size	_Pshadow_Pstandard_Cushort_Mclass, 160

	.type	.L_array0459,@object    # @_array0459
.L_array0459:
	.ascii	 "ushort"
	.size	.L_array0459, 6

	.type	.L_string0460,@object   # @_string0460
	.align	16
.L_string0460:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0459
	.long	6                       # 0x6
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0460, 32

	.type	_Pshadow_Pio_CConsole_Mclass,@object # @_Pshadow_Pio_CConsole_Mclass
	.globl	_Pshadow_Pio_CConsole_Mclass
	.align	16
_Pshadow_Pio_CConsole_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0468
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+16)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Pio_CConsole_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pio_CConsole_Mprint_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pio_CConsole_MprintError_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pio_CConsole_MprintErrorLine_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pio_CConsole_MprintErrorLine
	.quad	_Pshadow_Pio_CConsole_MprintLine_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pio_CConsole_MprintLine
	.quad	_Pshadow_Pio_CConsole_MreadByte
	.quad	_Pshadow_Pio_CConsole_MreadCode
	.quad	_Pshadow_Pio_CConsole_MreadLine
	.size	_Pshadow_Pio_CConsole_Mclass, 200

	.type	_Pshadow_Pio_CConsole_Minstance,@object # @_Pshadow_Pio_CConsole_Minstance
	.bss
	.globl	_Pshadow_Pio_CConsole_Minstance
	.align	8
_Pshadow_Pio_CConsole_Minstance:
	.quad	0
	.size	_Pshadow_Pio_CConsole_Minstance, 8

	.type	.L_array0467,@object    # @_array0467
	.section	.rodata,"a",@progbits
	.align	16
.L_array0467:
	.ascii	 "shadow.io@Console"
	.size	.L_array0467, 17

	.type	.L_string0468,@object   # @_string0468
	.align	16
.L_string0468:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0467
	.long	17                      # 0x11
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0468, 32

	.type	.L_array1469,@object    # @_array1469
	.section	.rodata.cst4,"aM",@progbits,4
.L_array1469:
	.ascii	 "null"
	.size	.L_array1469, 4

	.type	.L_string1470,@object   # @_string1470
	.section	.rodata,"a",@progbits
	.align	16
.L_string1470:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array1469
	.long	4                       # 0x4
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string1470, 32

	.type	_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass,@object # @_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass
	.globl	_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass
	.align	16
_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0486
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+32)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Putility_CArrayList_IArrayListIterator_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Putility_CArrayList_IArrayListIterator_MhasNext
	.quad	_Pshadow_Putility_CArrayList_IArrayListIterator_Mnext
	.size	_Pshadow_Putility_CArrayList_IArrayListIterator_Mclass, 128

	.type	.L_array0485,@object    # @_array0485
	.align	16
.L_array0485:
	.ascii	 "shadow.utility@ArrayList:ArrayListIterator<V>"
	.size	.L_array0485, 45

	.type	.L_string0486,@object   # @_string0486
	.align	16
.L_string0486:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0485
	.long	45                      # 0x2d
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0486, 32

	.type	_Pshadow_Putility_CArrayList_Mclass,@object # @_Pshadow_Putility_CArrayList_Mclass
	.globl	_Pshadow_Putility_CArrayList_Mclass
	.align	16
_Pshadow_Putility_CArrayList_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0490
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+40)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Putility_CArrayList_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Putility_CArrayList_Madd_CV
	.quad	_Pshadow_Putility_CArrayList_Mclear
	.quad	_Pshadow_Putility_CArrayList_Mcontains_CV
	.quad	_Pshadow_Putility_CArrayList_Mdelete_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Putility_CArrayList_Mindex_Pshadow_Pstandard_Cint_CV
	.quad	_Pshadow_Putility_CArrayList_MindexOf_CV
	.quad	_Pshadow_Putility_CArrayList_Miterator
	.quad	_Pshadow_Putility_CArrayList_Mremove_CV
	.quad	_Pshadow_Putility_CArrayList_Msize
	.size	_Pshadow_Putility_CArrayList_Mclass, 192

	.type	.L_array0489,@object    # @_array0489
	.align	16
.L_array0489:
	.ascii	 "shadow.utility@ArrayList<V>"
	.size	.L_array0489, 27

	.type	.L_string0490,@object   # @_string0490
	.align	16
.L_string0490:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0489
	.long	27                      # 0x1b
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0490, 32

	.type	_P_CIllegalModificationException_Mclass,@object # @_P_CIllegalModificationException_Mclass
	.globl	_P_CIllegalModificationException_Mclass
	.align	16
_P_CIllegalModificationException_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0516
	.quad	_Pshadow_Pstandard_CException_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_P_CIllegalModificationException_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Pstandard_CException_Mcreate_Pshadow_Pstandard_CString
	.quad	_Pshadow_Pstandard_CException_Mmessage
	.quad	_Pshadow_Pstandard_CException_Mthrow__
	.size	_P_CIllegalModificationException_Mclass, 136

	.type	.L_array0515,@object    # @_array0515
	.align	16
.L_array0515:
	.ascii	 "default@IllegalModificationException"
	.size	.L_array0515, 36

	.type	.L_string0516,@object   # @_string0516
	.align	16
.L_string0516:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0515
	.long	36                      # 0x24
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0516, 32

	.type	_Pshadow_Putility_CRandom_Mclass,@object # @_Pshadow_Putility_CRandom_Mclass
	.globl	_Pshadow_Putility_CRandom_Mclass
	.align	16
_Pshadow_Putility_CRandom_Mclass:
	.quad	_Pshadow_Pstandard_CClass_Mclass
	.zero	16
	.quad	0
	.quad	.L_string0520
	.quad	_Pshadow_Pstandard_CObject_Mclass
	.long	0                       # 0x0
	.long	(0+8)&-1
	.long	(0+8)&-1
	.zero	4
	.quad	_Pshadow_Pstandard_CObject_Mcopy
	.quad	_Pshadow_Putility_CRandom_Mcreate
	.quad	_Pshadow_Pstandard_CObject_Mequals_Pshadow_Pstandard_CObject
	.quad	_Pshadow_Pstandard_CObject_Mfreeze
	.quad	_Pshadow_Pstandard_CObject_MgetClass
	.quad	_Pshadow_Pstandard_CObject_MtoString
	.quad	_Pshadow_Putility_CRandom_Mcreate_Pshadow_Pstandard_Culong
	.quad	_Pshadow_Putility_CRandom_MnextInt
	.quad	_Pshadow_Putility_CRandom_MnextInt_Pshadow_Pstandard_Cint
	.quad	_Pshadow_Putility_CRandom_MnextUInt
	.quad	_Pshadow_Putility_CRandom_MnextUInt_Pshadow_Pstandard_Cuint
	.quad	_Pshadow_Putility_CRandom_Mseed_Pshadow_Pstandard_Culong
	.size	_Pshadow_Putility_CRandom_Mclass, 160

	.type	.L_array0519,@object    # @_array0519
	.align	16
.L_array0519:
	.ascii	 "shadow.utility@Random"
	.size	.L_array0519, 21

	.type	.L_string0520,@object   # @_string0520
	.align	16
.L_string0520:
	.quad	_Pshadow_Pstandard_CString_Mclass
	.quad	.L_array0519
	.long	21                      # 0x15
	.zero	4
	.byte	1                       # 0x1
	.zero	7
	.size	.L_string0520, 32


	.section	".note.GNU-stack","",@progbits
