/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(ShadowParser)
package shadow.parser;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

public class ShadowParser {

	public static void main(String args[]) throws ParseException {
		try {
			FileInputStream fis = new FileInputStream("test_input.shadow");
	    	ShadowParser parser = new ShadowParser(fis);
	
			System.out.println("Reading from standard input...");

//			SimpleNode n = parser.TranslationUnit();
			parser.TranslationUnit();

//			n.dump("");
			System.out.println("GOOD PARSE");
			
		} catch (ParseException e) {
			System.out.println("BAD PARSE");
			System.out.println(e.getMessage());
		} catch (Error e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());
		} catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}
	}
}
PARSER_END(ShadowParser)

SKIP : {
		" "
	|	"\r"
	|	"\t"
	|	"\n"
	|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {	// operators
		< PLUS: "+" >
	|	< MINUS: "-" >
	|	< MULTIPLY: "*" >
	|	< DIVIDE: "/" >
}

TOKEN : {	// literals
	   < INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> >
	|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
	|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
	|  < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >
	|  < CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
	|  < STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

/**
 * Key words below
 */
TOKEN : { 	// primative types
		< BOOL: "bool" >
	|	< BYTE: "byte" >
	|	< UBYTE: "ubyte" >				
	|	< SHORT: "short" > 
	|	< USHORT: "ushort" > 
	|	< INT: "int"> 
	|	< UINT: "uint"> 
	|	< LONG: "long"> 
	|	< ULONG: "ulong"> 
	|	< FLOAT: "float" >
	|	< CODE: "code" >
	|	< VOID: "void" >
}

TOKEN : {	// control flow keywords				
		<IF: "if"> 
	|	<ELSE: "else"> 
	|	<FOR: "for"> 
	|	<FOREACH: "foreach"> 
	|	<WHILE: "while"> 
	|	<DO: "do">
	|	<CONTINUE: "continue">
	|	<BREAK: "break"> 
	|	<SWITCH: "switch"> 
	|	<CASE: "case"> 
	|	<DFLT: "default"> 
	|	<RETURN: "return"> 
}

TOKEN : {	// data types
		< CLASS: "class" >
	|	< TUPLE: "tuple" >
	|	< INTERFACE: "interface" >
	|	< ERROR: "error" >
	|	< EXCEPTION: "exception" >
}

TOKEN : {	// inheritance
		< EXTENDS: "extends" >
	|	< IMPLEMENTS: "implements" >
}

TOKEN: {	// exceptions
		< THROW: "throw" >
	|	< THROWS: "throws" >
	|	< RETHROW: "rethrow" >
	|	< TRY: "try" >
	|	< CATCH: "catch" >
}

TOKEN : {	// memory management
		< NEW: "new" >
	|	< DELETE: "delete" >
//	|	< DELETEFROM: "delete from" >
}

TOKEN : {	// visibility
		< PUBLIC: "public" >
	|	< PROTECTED: "protected" >
	|	< PRIVATE: "private" >
}	 
/**
 * These are our identifiers. They must be below everything else
 */
TOKEN : {	// identifiers
		<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
	|	<#LETTER: ["A"-"Z","_","a"-"z"]>
	|	<#DIGIT: ["0"-"9"]>
}


void Literal() : { }
{
		< INTEGER_LITERAL >
	|	< FLOATING_POINT_LITERAL >
	|	< CHARACTER_LITERAL >
	|	< STRING_LITERAL >
}

void BuiltInType() : { } {
		< BOOL >
	|	< BYTE >
	|	< UBYTE >				
	|	< SHORT > 
	|	< USHORT > 
	|	< INT > 
	|	< UINT > 
	|	< LONG > 
	|	< ULONG > 
	|	< FLOAT >
	|	< CODE >
}

void TypeId() : { }
{
	// we'll need to add something to check for types we know about later
	BuiltInType()
}

void Visibility() : { }
{
		< PUBLIC >
	|	< PROTECTED >
	|	< PRIVATE >
}

void IdentifierDeclaration() : { }
{
	< IDENTIFIER > [ "=" ( Literal() | < IDENTIFIER > ) ]
}

void IdentifierDeclarationList() : { }
{
	IdentifierDeclaration() ( "," IdentifierDeclaration())*
}

void VariableDeclaration() : { }
{
	TypeId() IdentifierDeclarationList() ";"
}

void ParameterList() : { }
{
	TypeId() < IDENTIFIER > [ "," TypeId() < IDENTIFIER > ]		
}

void MethodDeclaration() : { }
{
	( TypeId() | < VOID >	) < IDENTIFIER > "(" [ ParameterList() ] ")" "{"
		( VariableDeclaration()	)*
	"}"
}

void ImplementsList() : { }
{
	< IMPLEMENTS > <IDENTIFIER > ( "," < IDENTIFIER >	)*
}

void ClassDefinition() : { }
{
	< CLASS > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] [ ImplementsList() ] "{"
	
	( Visibility() ( LOOKAHEAD(3) VariableDeclaration()
					| MethodDeclaration()
					| TupleDefinition() ) )*
    	
	"}"
}

void TupleDefinition() : { }
{
	< TUPLE > <IDENTIFIER > "{"
	
	( VariableDeclaration() )+
    	
	"}"
}

void ExceptionDefinition() : { }
{
	< EXCEPTION > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] "{"
	
	( Visibility() ( LOOKAHEAD(3) VariableDeclaration()
					| MethodDeclaration() ) )+
    	
	"}"
}

void ErrorDefinition() : { }
{
	< ERROR > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] "{"
	
	( Visibility() ( LOOKAHEAD(3) VariableDeclaration()
					| MethodDeclaration() ) )+
    	
	"}"
}


void TranslationUnit() : { }
{
	( TupleDefinition() | ExceptionDefinition() | ErrorDefinition() )*
	ClassDefinition()
}

