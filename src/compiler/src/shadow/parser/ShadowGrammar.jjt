/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  CACHE_TOKENS=true;
  JAVA_UNICODE_ESCAPE=true;
  STATIC=false;
  NODE_USES_PARSER=true;
  MULTI=true;
  VISITOR=true;
  VISITOR_EXCEPTION="ShadowException";
  VISITOR_DATA_TYPE="Boolean";
}

PARSER_BEGIN(ShadowParser)
package shadow.parser.javacc;

import java.io.*;
import shadow.parser.*;
import shadow.AST.ASTFlattener;
import shadow.AST.ASTWalker;
import shadow.typecheck.type.Type;


/**
 * Grammar to parse Shadow
 * @author William R. Speirs & Barry Wittman
 */
public class ShadowParser
{
   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     /* Unused Java modifiers are commented out until modifiers are finalized */ 
     public static final int PUBLIC         = 0x0001;
     public static final int PROTECTED      = 0x0002;
     public static final int PRIVATE        = 0x0004;
     public static final int ABSTRACT       = 0x0008;
     public static final int STATIC         = 0x0010;
     public static final int FINAL          = 0x0020;
     //public static final int SYNCHRONIZED = 0x0040;
     //public static final int NATIVE       = 0x0080;
     //public static final int TRANSIENT    = 0x0100;
     //public static final int VOLATILE     = 0x0200;
     //public static final int STRICTFP     = 0x0400;
     public static final int WEAK           = 0x0800;
     public static final int CONST          = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers) { return (modifiers & PUBLIC) != 0; }
     public boolean isProtected(int modifiers) { return (modifiers & PROTECTED) != 0; }
     public boolean isPrivate(int modifiers) { return (modifiers & PRIVATE) != 0; }
     public boolean isStatic(int modifiers) { return (modifiers & STATIC) != 0; }
     public boolean isAbstract(int modifiers) { return (modifiers & ABSTRACT) != 0; }
     public boolean isFinal(int modifiers) { return (modifiers & FINAL) != 0; }

  /* public boolean isNative(int modifiers) { return (modifiers & NATIVE) != 0; }
     public boolean isStrictfp(int modifiers) { return (modifiers & STRICTFP) != 0; } 
     public boolean isSynchronized(int modifiers) { return (modifiers & SYNCHRONIZED) != 0; }
     public boolean isTransient(int modifiers) { return (modifiers & TRANSIENT) != 0; }
     public boolean isVolatile(int modifiers) { return (modifiers & VOLATILE) != 0; }
*/
     public boolean isWeak(int modifiers) { return (modifiers & WEAK) != 0; }
     public boolean isConst(int modifiers) { return (modifiers & CONST) != 0; } 

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod) { return modifiers & ~mod; }
   }

   private boolean debug = false;

   public ShadowParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

    public void enableDebug() {
        debug = true;
    }
   	public void debugPrint(String str) {        if(debug)
            System.out.println("DEBUG: " + str + ": " + token);
    }
   	
  public static void main(String args[]) {
    try {
        String fileName = "src/shadow/typecheck/test/basic.shadow";
//        String fileName = "src/shadow/parser/test/statements/for.shadow";
        FileInputStream fis = new FileInputStream(fileName);        
        ShadowParser parser = new ShadowParser(fis);
        
//        parser.enableDebug();

        ASTCompilationUnit n = parser.CompilationUnit();

        n.dump("");

        System.out.println("GOOD PARSE");

    } catch (ParseException e) {
        System.out.println("BAD PARSE");
        System.out.println(e.getMessage());
    } catch (Error e) {
        System.out.println("Ooops");
        System.out.println(e.getMessage());
    } catch (FileNotFoundException e) {
        System.out.println(e.getMessage());
    } catch (Exception e) {
    	e.printStackTrace();    }      
  }

}

PARSER_END(ShadowParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < AND: "and" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CAST: "cast" >
| < CATCH: "catch" >
| < CLASS: "class" >
| < CODE: "code" >
| < CONST: "const" >
| < CONSTRUCTOR: "constructor" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DELETE: "delete" >
| < DESTRUCTOR: "destructor" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < ERROR: "error" >
| < EXCEPTION: "exception" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
//| < GOTO: "goto" >
| < GET: "get" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < IN: "in" >
| < IS: "is" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < OR: "or" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SET: "set" >
| < SHORT: "short" >
| < STATIC: "static" >
//| < STRICTFP: "strictfp" >
| < STRING: "String" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
//| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < UBYTE: "ubyte" >
| < UINT: "uint" >
| < ULONG: "ulong" >
| < USHORT: "ushort" >
| < VIEW: "view" >
//| < VOLATILE: "volatile" >
| < WEAK: "weak" >
| < WHILE: "while" >
| < XOR: "xor" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CODE_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|	
  < VERSION_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])+ "." (["0"-"9"])+ >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
//       "\u0024",  // this is the $, but I want to use that for versions
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
//| < SC_OR: "||" >
//| < SC_AND: "&&" >
//| < INCR: "++" >
//| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < BIT_XOR: "^" >
| < REM: "%" >
| < LEFTSHIFT: "<<" >
| < LEFTROTATE: "<<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < REFASSIGN: "#=" >
| < LEFTSHIFTASSIGN: "<<=" >
| < RIGHTSHIFTASSIGN: ">>=" >
| < RIGHTROTATEASSIGN: ">>>=" >
| < LEFTROTATEASSIGN: "<<<=" >
| < VERSION: "$" >
//| < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RIGHTROTATE: ">>>" >
  {
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RIGHTROTATE;
     input_stream.backup(2); 
  }
| < RIGHTSHIFT: ">>" >
  { 
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RIGHTSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}


/*****************************************
 * THE SHADOW LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit():
{}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  <EOF>

	{
		ASTFlattener f = new ASTFlattener();
        ASTWalker walker = new ASTWalker(f);

        walker.walk(jjtThis);
        		
        return jjtThis;
	}
}

void PackageDeclaration():
{}
{
  "package" Name() ";"
}

void ImportDeclaration():
{}
{
  "import" [ "static" ] Name() [ ("." "*") | ("$" [">" | "<"] < VERSION_LITERAL >) ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
   debugPrint("MODIFIERS");
}
{
 (
  LOOKAHEAD(2)
  (
    "public" { modifiers |= ModifierSet.PUBLIC; }
  | "static" { modifiers |= ModifierSet.STATIC; }
  | "protected" { modifiers |= ModifierSet.PROTECTED; }
  | "private" { modifiers |= ModifierSet.PRIVATE; }
  | "final" { modifiers |= ModifierSet.FINAL; }
  | "abstract" { modifiers |= ModifierSet.ABSTRACT; }
//  | "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
//  | "native" { modifiers |= ModifierSet.NATIVE; }
//  | "transient" { modifiers |= ModifierSet.TRANSIENT; }
//  | "volatile" { modifiers |= ModifierSet.VOLATILE; }
//  | "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  | "weak" { modifiers |= ModifierSet.WEAK; }
  |	"const"{ modifiers |= ModifierSet.CONST; }  | Annotation()
  )
 )*

 {
 	jjtThis.setModifiers(modifiers);
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration():
{
   int modifiers;
   debugPrint("TYPE DECLARATION");
   
}
{
  ";"
| modifiers = Modifiers()
  ( ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)
  | AnnotationTypeDeclaration(modifiers)
  | ViewDeclaration(modifiers)
  )
}

void ViewDeclaration(int modifiers):
{
	debugPrint("VIEW DECLARATION");
	Token t;
}
{
	"view" t = <IDENTIFIER> { jjtThis.setImage(t.image); jjtThis.setModifiers(modifiers);  }	"{"
        ( LOOKAHEAD(PrimitiveType() "[") StaticArrayType() | PrimitiveType() ) VariableDeclaratorId() ";"
        ( ( LOOKAHEAD(PrimitiveType() "[") StaticArrayType() | PrimitiveType() ) VariableDeclaratorId() ";" )*
    "}"
}


void ClassOrInterfaceDeclaration(int modifiers):
{
   boolean isInterface = false;
   debugPrint("CLASS OR INTERFACE DECLARARTION");
   Token t;
}
{
  { jjtThis.setModifiers(modifiers); }
  ( "class" { jjtThis.setKind(Type.Kind.CLASS);} 	| "exception" { jjtThis.setKind(Type.Kind.EXCEPTION);}
 	| "error" { jjtThis.setKind(Type.Kind.ERROR);}
 	| "interface" { jjtThis.setKind(Type.Kind.INTERFACE); isInterface = true; } )
  t = <IDENTIFIER> { jjtThis.setImage(t.image); jjtThis.setModifiers(modifiers); }
  [ Version() ]
  [ TypeParameters() ]
  [ ExtendsList(isInterface) ]
  [ ImplementsList(isInterface) ]
  ClassOrInterfaceBody(isInterface)
}

void ExtendsList(boolean isInterface):
{
   boolean extendsMoreThanOne = false;
   debugPrint("EXTENDS LIST");
}
{ 
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface):
{ debugPrint("IMPLEMENTS"); }
{
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void Version():
{ debugPrint("VERSION"); }
{
   "$" < VERSION_LITERAL >
}

void EnumDeclaration(int modifiers):
{
    debugPrint("ENUM DECLARATION");
    Token t;
}
{
{ jjtThis.setModifiers(modifiers); }
  "enum" t = <IDENTIFIER> { jjtThis.setImage(t.image);  }
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{ debugPrint("ENUM BODY"); }
{
   "{"
   EnumConstant() ( "," EnumConstant() )*
   [ ";" ( ClassOrInterfaceBodyDeclaration(false) )* ]
   "}"
}

void EnumConstant():
{
	debugPrint("ENUM CONSTANT");
	Token t;
}
{
  t = <IDENTIFIER>  { jjtThis.setImage(t.image); } [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}

void TypeParameters():
{ debugPrint("TYPE PARAMETERS"); }
{
   "<" TypeParameter() ( "," TypeParameter() )* ">"
}

void TypeParameter():
{
	debugPrint("TYPE PARAMETER");
	Token t;
}
{
   t = <IDENTIFIER>  { jjtThis.setImage(t.image); } [ TypeBound() ]
}

void TypeBound():
{ debugPrint("TYPE BOUND"); }
{
   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(boolean isInterface):
{ debugPrint("CLASS OR INTERFACE BODY"); }
{
  "{" ( ClassOrInterfaceBodyDeclaration(isInterface) )* "}"
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface):
{
   boolean isNestedInterface = false;
   int modifier;
   debugPrint("CLASS OR INTERFACE BODY DECLARATION"); 
}
{
  LOOKAHEAD(2) Initializer() { if (isInterface) throw new ParseException("An interface cannot have initializers"); }
// Just get all the modifiers out of the way. If you want to do
// more checks, pass the modifiers down to the member  
| modifier = Modifiers()
  (  ClassOrInterfaceDeclaration(modifier)
    | EnumDeclaration(modifier)
    | LOOKAHEAD( [ TypeParameters() ] "constructor" ) ConstructorDeclaration(modifier)
    | LOOKAHEAD( [ TypeParameters() ] "destructor" ) DestructorDeclaration(modifier)
    | LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) ) FieldDeclaration(modifier)
    | MethodDeclaration(modifier)
    | ViewDeclaration(modifier)
  )
| ";"
}

void FieldDeclaration(int modifiers):
{ debugPrint("FIELD DECLARATION"); }
{
  { jjtThis.setModifiers(modifiers); }
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator():
{ debugPrint("VARIABLE DECLARATOR"); }
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{
    debugPrint("VARIABLE DECLARATOR ID");
    Token t;
}
{
  t = <IDENTIFIER> { jjtThis.setImage(t.image); } ( "[" "]" )*
}

void VariableInitializer():
{ debugPrint("VARIABLE INITIALIZER"); }
{
  ArrayInitializer()
| Expression()
}

void ArrayInitializer():
{ debugPrint("ARRAY INITILIALIZER"); }
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration(int modifiers):
{ debugPrint("METHOD DECLARATION"); }
{
  { jjtThis.setModifiers(modifiers); }
  [ TypeParameters() ]
  MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator():
{
	debugPrint("METHOD DECLARATOR");
	Token t;
}
{
  t = <IDENTIFIER> { jjtThis.setImage(t.image); } FormalParameters() "=>" "(" [ ResultTypes() ] ")"
}

void FormalParameters():
{ debugPrint("FORMAL PARAMETERS"); }
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter():
{ debugPrint("FORMAL PARAMETER"); }
{
  [ "final" ] Type() VariableDeclaratorId()
}

void ConstructorDeclaration(int modifiers):
{ debugPrint("CONTRUCTOR DECLARATION"); }
{
  { jjtThis.setModifiers(modifiers); }
  [ TypeParameters() ]
  // Modifiers matched in the caller
  "constructor" FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void DestructorDeclaration(int modifiers):
{ debugPrint("CONTRUCTOR DECLARATION"); }
{
  { jjtThis.setModifiers(modifiers); }
  [ TypeParameters() ]
  // Modifiers matched in the caller
  "destructor" [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation():
{ debugPrint("EXPLICIT CONTRUCTOR INVOCATION"); }
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer():
{ debugPrint("INITIALIZER"); }
{
  [ "static" ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{ debugPrint("TYPE"); }
{
   LOOKAHEAD(2) ReferenceType()
    |   LOOKAHEAD(PrimitiveType() "[") StaticArrayType()
    |   PrimitiveType()
    |	FunctionType()
}

void ReferenceType():
{ debugPrint("REFERENCE TYPE"); }
{
    PrimitiveType() ( LOOKAHEAD(2) "[" ( "," )* "]" )+
  | ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" ( "," )* "]" )*
}

void StaticArrayType():
{
	debugPrint("STATIC ARRAY TYPE");
	Token t;
}
{
    PrimitiveType() "[" t = <INTEGER_LITERAL> "]" { jjtThis.setArraySize(t.image); }
}

void FunctionType():
{
	debugPrint("FUNCTION TYPE");
}
{
    "(" [ Type() ( "," Type() )* ] ")" "=>" "(" [ ResultTypes() ] ")"
}

void ClassOrInterfaceType():
{
	debugPrint("CLASS OR INTERFACE TYPE");
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
  t = <IDENTIFIER> { sb.append(t.image); }[ LOOKAHEAD(2) TypeArguments() ]
  ( LOOKAHEAD(2) "." t = <IDENTIFIER> { sb.append('.').append(t.image); } [ LOOKAHEAD(2) TypeArguments() ] )*
  { jjtThis.setImage(sb.toString()); }
}

void TypeArguments():
{ debugPrint("TYPE ARGUMENTS"); }
{
   "<" TypeArgument() ( "," TypeArgument() )* ">"
}

void TypeArgument():
{ debugPrint("TYPE ARGUMENT"); }
{
   ReferenceType()
 | "?" [ WildcardBounds() ]
}

void WildcardBounds():
{ debugPrint("WILDCARD BOUNDS"); }
{
   "extends" ReferenceType()
 | "super" ReferenceType()
}


void PrimitiveType():
{ debugPrint("PRIMITIVE TYPE"); }
{
  "boolean" { jjtThis.setType(Type.BOOLEAN); }
| "code"    { jjtThis.setType(Type.CODE); }
| "byte"    { jjtThis.setType(Type.BYTE); }
| "short"   { jjtThis.setType(Type.SHORT); }
| "int"     { jjtThis.setType(Type.INT); }
| "long"    { jjtThis.setType(Type.LONG); }
| "float"   { jjtThis.setType(Type.FLOAT); }
| "double"  { jjtThis.setType(Type.DOUBLE); }
| "String"  { jjtThis.setType(Type.STRING); }
| "ubyte"   { jjtThis.setType(Type.UBYTE); }
| "uint"    { jjtThis.setType(Type.UINT); }
| "ulong"   { jjtThis.setType(Type.ULONG); }
| "ushort"  { jjtThis.setType(Type.USHORT); }
}

void ResultType():
{ debugPrint("RESULT TYPE"); }
{
  Type()
}

void ResultTypes():
{ debugPrint("RESULT TYPES"); }
{
  ResultType() ( "," ResultType() )*
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
	debugPrint("NAME");
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
  t = <IDENTIFIER> { sb.append(t.image); } ( LOOKAHEAD(2) "." t = <IDENTIFIER> { sb.append('.').append(t.image); } )*
  { jjtThis.setImage(sb.toString()); }
}

void NameList():
{ debugPrint("NAME LIST"); }
{
  Name() ( "," Name() )*
}


/*
 * Expression syntax follows.
 */

void Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{ debugPrint("EXPRESSION"); }
{
  ConditionalExpression() [ LOOKAHEAD(2) AssignmentOperator() Expression() ]
}

void AssignmentOperator():
{ debugPrint("ASSIGNMENT OPERATOR"); }
{
    "="    { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.EQUAL); }
  | "#="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.REFASSIGN); }
  | "*="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.STARASSIGN); }
  | "/="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.SLASHASSIGN); }
  | "%="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.REMASSIGN); }
  | "+="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.PLUSASSIGN); }
  | "-="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.MINUSASSIGN); }
  | "<<="  { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.LEFTSHIFTASSIGN); }
  | ">>="  { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.RIGHTSHIFTASSIGN); }
  | ">>>=" { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.RIGHTROTATEASSIGN); }
  | "<<<=" { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.LEFTROTATEASSIGN); }
  | "&="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.ANDASSIGN); }
  | "^="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.XORASSIGN); }
  | "|="   { jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.ORASSIGN); }
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" ConditionalExpression() ":" ConditionalExpression() ]
}

void ConditionalOrExpression():
{}
{
  ConditionalExclusiveOrExpression() ( "or" ConditionalExclusiveOrExpression() )*
}


void ConditionalExclusiveOrExpression():
{}
{
  ConditionalAndExpression() ( "xor" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  BitwiseOrExpression() ( "and" BitwiseOrExpression() )*
}

void BitwiseOrExpression():
{}
{
  BitwiseExclusiveOrExpression() ( "|" BitwiseExclusiveOrExpression() )*
}

void BitwiseExclusiveOrExpression():
{}
{
  BitwiseAndExpression() ( "^" BitwiseAndExpression() )*
}

void BitwiseAndExpression():
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  IsExpression() ( ( "==" | "!=" ) IsExpression() )*
}

void IsExpression():
{}
{
  RelationalExpression() [ "is" Type() ]
}

void RelationalExpression():
{ debugPrint("RELATIONAL EXPRESSION"); }
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}


void ShiftExpression():
{ debugPrint("SHIFT EXPRESSION"); }
{
  RotateExpression() ( ( "<<" | RightShift() ) RotateExpression() )*
}

void RotateExpression():
{ debugPrint("ROTATE EXPRESSION"); }
{
  AdditiveExpression() ( ( "<<<" | RightRotate() ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" { jjtThis.setImage("+"); } | "-" { jjtThis.setImage("-"); } ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" { jjtThis.setImage("*"); } | "/" { jjtThis.setImage("/"); } | "%" { jjtThis.setImage("%"); } ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" { jjtThis.setImage("+"); } | "-" { jjtThis.setImage("-"); } ) UnaryExpression()
| UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus():
{ debugPrint("UNARY EXPRESSION NOT PLUS MINUS"); }
{
  ( "~" { jjtThis.setImage("~"); } | "!" { jjtThis.setImage("!"); } ) UnaryExpression()
|
  //LOOKAHEAD( CastLookahead() )
  CastExpression()
| PrimaryExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
//void CastLookahead()://{ debugPrint("CAST LOOKAHEAD"); }//{//  LOOKAHEAD(2)//  "(" PrimitiveType()//|//  LOOKAHEAD("(" Type() "[")//  "(" Type() "[" "]"//|//  "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )//}

void CastExpression():
{
    debugPrint("CAST EXPRESSION");
    jjtThis.setImage("cast< >");   
}
{
  LOOKAHEAD("cast" "<" PrimitiveType()) "cast" "<" Type() ">" UnaryExpression()
| "cast" "<" Type() ">" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression():
{ debugPrint("PRIMARY EXPRESSION"); }
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void Sequence():
{ debugPrint("SEQUENCE"); }
{	"(" PrimaryExpression() ("," PrimaryExpression() )* ")"
}

void MemberSelector():
{
	debugPrint("MEMBER SELECTOR");
	Token t;
}
{
  "." TypeArguments() t = <IDENTIFIER> { jjtThis.setImage(t.image); }
}

void PrimaryPrefix():
{
	debugPrint("PRIMARY PREFIX");
	Token t;
}
{
  Literal()
| "this" { jjtThis.setImage("this"); }
| "super" "." t = <IDENTIFIER> { jjtThis.setImage(t.image); }
| LOOKAHEAD( "(" ConditionalExpression() ")" ) "(" ConditionalExpression() ")"
| AllocationExpression()
| LOOKAHEAD( ResultType() "." "class" ) ResultType() "." "class"
| Name()
}

void PrimarySuffix():
{
	debugPrint("PRIMARY SUFFIX");
	Token t;
}
{
  LOOKAHEAD(2) "." "this"
| LOOKAHEAD(2) "." AllocationExpression()
| LOOKAHEAD(3) MemberSelector()
| "[" ConditionalExpression() ("," ConditionalExpression())* "]"
| "." t = <IDENTIFIER> { jjtThis.setImage(t.image); }
| Arguments()
}

void Literal() :
{
	debugPrint("LITERAL");
	Token t;
}
{
  //what about longs, shorts, floats, unsigned versions etc.?
  t = <INTEGER_LITERAL> { jjtThis.setImage(t.image); jjtThis.setType(Type.INT); }
| t = <FLOATING_POINT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setType(Type.DOUBLE); }
| t = <CODE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setType(Type.CODE); }
| t = <STRING_LITERAL> { jjtThis.setImage(t.image); jjtThis.setType(Type.STRING); }
| BooleanLiteral() { jjtThis.setType(Type.BOOLEAN); }
| NullLiteral() { jjtThis.setType(Type.NULL); }
}

void BooleanLiteral():
{ debugPrint("BOOLEAN LITERAL"); }
{
  "true" { jjtThis.setTrue(); }
| "false"
}

void NullLiteral():
{ debugPrint("NULL LITERAL"); }
{
  "null"
}

void Arguments():
{ debugPrint("ARGUMENTS"); }
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{ debugPrint("ARGUMENT LIST"); }
{
  ConditionalExpression() ( "," ConditionalExpression() )*
}

void AllocationExpression():
{ debugPrint("ALLOCATION EXPRESSION"); }
{
  LOOKAHEAD(2)
  "new" { jjtThis.setImage("new"); } PrimitiveType() ArrayDimsAndInits()
| "new" { jjtThis.setImage("new"); } ClassOrInterfaceType() [ TypeArguments() ]
    (
      ArrayDimsAndInits()
    | Arguments() [ ClassOrInterfaceBody(false) ]
    )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{ debugPrint("ARRAY DIMS AND INITS"); }
{
  LOOKAHEAD(2)( LOOKAHEAD(2) "[" ConditionalExpression() ("," ConditionalExpression() )* "]" )+ ( LOOKAHEAD(2) "[" (",")* "]" )*
| ( "[" (",")* "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement():
{ debugPrint("STATMENT"); }
{
  LOOKAHEAD(2) LabeledStatement()
| AssertStatement()
| Block()
| EmptyStatement()
| StatementExpression() ";"
| SwitchStatement()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| ForeachStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
| SynchronizedStatement()
| TryStatement()
}

void AssertStatement():
{ debugPrint("ASSERT STATEMENT"); }
{
  "assert" ConditionalExpression() [ ":" ConditionalExpression() ] ";"
}

void LabeledStatement():
{
	Token t;
}
{
  t = <IDENTIFIER> { jjtThis.setImage(t.image); } ":" Statement()
}

void Block():
{ debugPrint("BLOCK"); }
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{
    debugPrint("BLOCK STATEMENT");
}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER> ) LocalVariableDeclaration() ";"
| Statement()
| ClassOrInterfaceDeclaration(0)
}

void LocalVariableDeclaration():
{ debugPrint("LOCAL VARIABLE DECLARATION"); }
{
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Shadow expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{ debugPrint("STATEMENT EXPRESSION"); }
{
  	  LOOKAHEAD( Sequence() ) Sequence() "=" PrimaryExpression()
	| PrimaryExpression() [ AssignmentOperator() Expression() ]
}

void SwitchStatement():
{ debugPrint("SWITCH STATEMENT"); }
{
  "switch" "(" ConditionalExpression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel():
{}
{
  "case" ConditionalExpression() ":"
|
  "default" ":"
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{ debugPrint("IF STATEMENT"); }
{
  "if" "(" ConditionalExpression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{ debugPrint("WHILE STATEMENT"); }
{
  "while" "(" ConditionalExpression() ")" Statement()
}

void DoStatement():
{ debugPrint("DO STATEMENT"); }
{
  "do" Statement() "while" "(" ConditionalExpression() ")" ";"
}

void ForeachStatement():
{
	debugPrint("FOREACH STATEMENT");
	Token t;
}
{
  "foreach" "(" Type() t = <IDENTIFIER> { jjtThis.setImage(t.image); } "in" ConditionalExpression() ")" Statement()
}


void ForStatement() :
{ debugPrint("FOR STATEMENT"); }
{
  "for" "(" [ ForInit() ] ";" [ ConditionalExpression() ] ";" [ ForUpdate() ] ")" Statement()
}

void ForInit():
{
	debugPrint("FOR INIT");
	Token t;
}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> ) LocalVariableDeclaration()
| StatementExpressionList()
}

void StatementExpressionList():
{ debugPrint("STATEMENT EXPRESSION LIST"); }
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{ debugPrint("FOR UPDATE"); }
{
  StatementExpressionList()
}

void BreakStatement():
{ debugPrint("BREAK STATEMENT"); }
{
  "break" ";"
}

void ContinueStatement():
{ debugPrint("CONTINUE STATEMENT"); }
{
  "continue" ";"
}

void ReturnStatement():
{ debugPrint("RETURN STATEMENT"); }
{
  "return"  ( ";"
  | LOOKAHEAD(3) ConditionalExpression() ";"
  | "(" ConditionalExpression() ( "," ConditionalExpression() )* ")" ";"
  )
}

void ThrowStatement():
{ debugPrint("THROW STATEMENT"); }
{
  "throw" ConditionalExpression() ";"
}

void SynchronizedStatement():
{}
{
  "synchronized" "(" ConditionalExpression() ")" Block()
}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{ debugPrint("TRY STATEMENT"); }
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RightRotate():
{ debugPrint("RIGHT ROTATE"); }
{
  ( LOOKAHEAD({ getToken(1).kind == GT && ((GTToken)getToken(1)).realKind == RIGHTROTATE} ) ">" ">" ">" )
}


void RightShift():
{ debugPrint("RIGHT SHIFT"); }
{
  ( LOOKAHEAD({ getToken(1).kind == GT && ((GTToken)getToken(1)).realKind == RIGHTSHIFT} ) ">" ">" )
}

/* Annotation syntax follows. */

void Annotation() #void:
{}
{
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation() #void:
{}
{
   "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation() #void:
{}
{
  "@" Name()
}

void SingleMemberAnnotation() #void:
{}
{
  "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs():
{ debugPrint("MEMBER VALUE PAIRS"); }
{
   MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{
	debugPrint("MEMBER VALUE PAIR");
	Token t;
}
{
    t = <IDENTIFIER> { jjtThis.setImage(t.image); } "=" MemberValue()
}

void MemberValue():
{ debugPrint("MEMBER VALUE"); }
{
   Annotation()
 | MemberValueArrayInitializer()
 | ConditionalExpression()
}

void  MemberValueArrayInitializer():
{ debugPrint("MEMBER VALUE ARRAY INITIALIZER"); }
{
  "{" MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ] "}"
}


/* Annotation Types. */

void AnnotationTypeDeclaration(int modifiers) #void:
{ debugPrint("ANNOTATION TYPE DECLARATION"); }
{
  "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody() #void:
{ debugPrint("ANNOTATION TYPE BODY"); }
{
  "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration() #void:
{
   int modifiers;
   debugPrint("ANNOTATION TYPE MEMBER DECLARATION"); 
}
{
 modifiers = Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
    Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";"
  | ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)
  | AnnotationTypeDeclaration(modifiers)
  | FieldDeclaration(modifiers)
 )
 |
   ( ";" )
}

void DefaultValue():
{ debugPrint("DEFAULT VALUE"); }
{
  "default" MemberValue()
}
