/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(ShadowParser)
package shadow.parser.javacc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.*;

public class ShadowParser {

    private boolean debug = true;
    
	public static void main(String args[]) throws ParseException {
		try {
            String fileName = "tests/full_input_test.shadow";
//            String fileName = "tests/class_test.shadow";
//            String fileName = "tests/expressions.shadow";
            FileInputStream fis = new FileInputStream(fileName);
	    	ShadowParser parser = new ShadowParser(fis);
	
			System.out.println("Reading file: " + fileName);

			SimpleNode n = parser.TranslationUnit();

			n.dump("");
			System.out.println("GOOD PARSE");
			
		} catch (ParseException e) {
			System.out.println("BAD PARSE");
			System.out.println(e.getMessage());
		} catch (Error e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());
		} catch(FileNotFoundException e) {
			System.out.println(e.getMessage());
		}
	}

    public void debugPrint(String str) {
        if(debug)
            System.out.println(str);
    }
}
PARSER_END(ShadowParser)

SKIP : {
		" "
	|	"\r"
	|	"\t"
	|	"\n"
	|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
	|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {	// literals
	   < INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> >
	|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
	|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
	|  < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ >
	|  < CHARACTER_LITERAL: "\'" (~["\'","\\","\n","\r"] | "\\" (["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])) "\'">
	|  < STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}

/**
 * Key words below
 */
TOKEN : { 	// primative types
		< BOOL: "bool" >
	|	< BYTE: "byte" >
	|	< UBYTE: "ubyte" >				
	|	< SHORT: "short" > 
	|	< USHORT: "ushort" > 
	|	< INT: "int"> 
	|	< UINT: "uint"> 
	|	< LONG: "long"> 
	|	< ULONG: "ulong"> 
	|	< FLOAT: "float" >
	|	< CODE: "code" >
	|	< VOID: "void" >
}

TOKEN : {	// control flow keywords				
		<IF: "if"> 
	|	<ELSE: "else"> 
	|	<FOR: "for"> 
	|	<FOREACH: "foreach"> 
	|	<WHILE: "while"> 
	|	<DO: "do">
	|	<CONTINUE: "continue">
	|	<BREAK: "break"> 
	|	<SWITCH: "switch"> 
	|	<CASE: "case"> 
	|	<DFLT: "default"> 
	|	<RETURN: "return"> 
}

TOKEN : {	// data types
		< CLASS: "class" >
	|	< TUPLE: "tuple" >
	|	< INTERFACE: "interface" >
	|	< ERROR: "error" >
	|	< EXCEPTION: "exception" >
}

TOKEN : {	// inheritance
		< EXTENDS: "extends" >
	|	< IMPLEMENTS: "implements" >
}

TOKEN: {	// exceptions
		< THROW: "throw" >
	|	< THROWS: "throws" >
	|	< RETHROW: "rethrow" >
	|	< TRY: "try" >
	|	< CATCH: "catch" >
}

TOKEN : {    < THIS: "this" >
  |	< SUPER: "super" >
}

TOKEN : {	// memory management
		< NEW: "new" >
	|	< DELETE: "delete" >
//	|	< DELETEFROM: "delete from" >
}

TOKEN : {	// visibility
		< PUBLIC: "public" >
	|	< PROTECTED: "protected" >
	|	< PRIVATE: "private" >
}	 
/**
 * These are our identifiers. They must be below everything else
 */
TOKEN : {	// identifiers
		<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
	|	<#LETTER: ["A"-"Z","_","a"-"z"]>
	|	<#DIGIT: ["0"-"9"]>
}

void Literal() : { }
{
		< INTEGER_LITERAL >
	|	< FLOATING_POINT_LITERAL >
	|	< CHARACTER_LITERAL >
	|	< STRING_LITERAL >
}

void BuiltInType() : { } {
		< BOOL >
	|	< BYTE >
	|	< UBYTE >				
	|	< SHORT > 
	|	< USHORT > 
	|	< INT > 
	|	< UINT > 
	|	< LONG > 
	|	< ULONG > 
	|	< FLOAT >
	|	< CODE >
}

void TypeId() : { }
{
    // we'll need to add something to check for types we know about later
    BuiltInType()
}

void Dims() : { }
{
    "[]" [ Dims() ]
}

/**
 * Expression tree
 */
void ExpressionStatement() : {}
{
    [ Expression() ] ";"
}

void Expression() : { debugPrint("EXPRESSION"); }
{
    AssignmentExpression() ( "," AssignmentExpression() )*
}

void AssignmentExpression() : { debugPrint("ASSIGNMENT EXPRESSION"); }
{
    LOOKAHEAD(2) Assignment() | ConditionalExpression()
}

void LeftHandSide() : {}
{
    < IDENTIFIER > [ "[" ConditionalExpression() "]" ] ( "." DataMemberArrayAccess() )*
}

void Assignment() : {}
{
      LeftHandSide() AssignmentOperator() AssignmentExpression()
}

void AssignmentOperator() : {}
{
    ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "#=" )
    
}

void ConditionalExpression() : { debugPrint("CONDITIONAL EXPRESSION"); }
{
    LogicalORExpression() [ "?" Expression() ":" ConditionalExpression() ]
}

void LogicalORExpression() : {}
{
    LogicalANDExpression() [ "||" LogicalORExpression() ]
}

void LogicalANDExpression() : {}
{
    InclusiveORExpression() [ "&&" LogicalANDExpression() ]
}

void InclusiveORExpression() : {}
{
    ExclusiveORExpression() [ "|" InclusiveORExpression() ]
}

void ExclusiveORExpression() : {}
{
    ANDExpression() [ "^" ExclusiveORExpression() ]
}

void ANDExpression() : {}
{
    EqualityExpression() [ "&" ANDExpression() ]
}

void EqualityExpression() : {}
{
    RelationalExpression() [ ( "==" | "!=" ) EqualityExpression() ]
}

void RelationalExpression() : {}
{
    ShiftExpression() [ ( "<" | ">" | "<=" | ">=" ) RelationalExpression() ]
}

void ShiftExpression() : {}
{
	// we could add <<< and >>> which would be rotate 
    AdditiveExpression() [ ( "<<" | ">>" ) ShiftExpression() ]
}

void AdditiveExpression() : {}
{
    MultiplicativeExpression() [ ( "+" | "-" ) AdditiveExpression() ]
}

void MultiplicativeExpression() : {}
{
    UnaryExpression() [ ( "*" | "/" | "%" ) MultiplicativeExpression() ]
}

void UnaryExpression() : {}
{
    "+" UnaryExpression() | "-" UnaryExpression() | UnaryNotPlusMinusExpression()
}

void UnaryNotPlusMinusExpression() : {}
{
    LOOKAHEAD(2) PostfixExpression() | "!" UnaryExpression() | "~" UnaryExpression() | CastExpression()
}

void CastExpression() : {}
{
    "(" TypeId() [ Dims() ] ")" UnaryExpression() 
}

void PostfixExpression() : {}
{
    LOOKAHEAD(2) PrimaryExpression() | <IDENTIFIER>
}

void PrimaryExpression() : {}
{
//    LOOKAHEAD(3) ArrayCreationExpression() | PrimaryNoNewArrayExpression()
    PrimaryNoNewArrayExpression()
}

void PrimaryNoNewArrayExpression() : {}
{
      Literal()
    | < THIS >
    | "(" Expression() ")"
    | < NEW > TypeId() ( "(" [ ArgumentList() ] ")" | "[" Expression() "]" [ Dims() ] ) 
    | ( DataMemberAccessList() )+
}

void ArrayCreationExpression() : {}
{
    < NEW > TypeId() "[" Expression() "]" [ Dims() ]
}

void DataMemberArrayAccess() : { debugPrint("DATA MEMBER ACCESS"); }
{
    < IDENTIFIER > [ "[" ConditionalExpression() "]" ]
}

void MethodInvocation() : {}
{
    < IDENTIFIER > [ "(" [ ArgumentList() ] ")" ]
}

void DataMemberAccessList() : {}
{
    LOOKAHEAD(2) DataMemberArrayAccess() | MethodInvocation()  ( "." ( LOOKAHEAD(2) DataMemberArrayAccess() | MethodInvocation() ) )*
}

void ArgumentList() : {}
{
    ConditionalExpression() ( "," ConditionalExpression() )*
}

/**
 * High-level object definitions
 */
void Visibility() : { }
{
		< PUBLIC >
	|	< PROTECTED >
	|	< PRIVATE >
}

/*
void NewObject() : { }
{
    < NEW > TypeId() ( "[" ConditionalExpression() "]" | "(" [ ArgumentExpressionList() ] ")" )
}

void IdentifierDeclaration() : { }
{
	// I didn't use a CastExpression() here, because it doesn't work. I think it's wrong, see above
    < IDENTIFIER > [ AssignmentOperator() ( ConditionalExpression() | NewObject() ) ]
}

void IdentifierDeclarationList() : { }
{
	IdentifierDeclaration() ( "," IdentifierDeclaration())*
}
*/

void VariableDeclaration() : { debugPrint("VAR DEC"); }
{
	TypeId() [ Dims() ] Expression() ";" // ( "," AssignmentExpression() )* ";"
}


void ParameterList() : { }
{
	TypeId() < IDENTIFIER > [ "," TypeId() < IDENTIFIER > ]		
}

void MethodDeclaration() : { }
{
	( TypeId() | < VOID >	) < IDENTIFIER > "(" [ ParameterList() ] ")" "{"
		( ExpressionStatement() | VariableDeclaration() )*
	"}"
}

void ImplementsList() : { }
{
	< IMPLEMENTS > <IDENTIFIER > ( "," < IDENTIFIER >	)*
}

void ClassDefinition() : { }
{
	< CLASS > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] [ ImplementsList() ] "{"
	
	( Visibility() ( LOOKAHEAD(4) VariableDeclaration()
					| MethodDeclaration()
					| TupleDefinition() ) )*
    	
	"}"
}

void TupleDefinition() : { }
{
	< TUPLE > <IDENTIFIER > "{"
	
	( VariableDeclaration() )+
    	
	"}"
}

void ExceptionDefinition() : { }
{
	< EXCEPTION > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] "{"
	
	( Visibility() ( LOOKAHEAD(3) VariableDeclaration()
					| MethodDeclaration() ) )+
    	
	"}"
}

void ErrorDefinition() : { }
{
	< ERROR > <IDENTIFIER > [ < EXTENDS > <IDENTIFIER > ] "{"
	
	( Visibility() ( LOOKAHEAD(3) VariableDeclaration()
					| MethodDeclaration() ) )+
    	
	"}"
}


SimpleNode TranslationUnit() : { }
{
	( TupleDefinition() | ExceptionDefinition() | ErrorDefinition() )*
	ClassDefinition()
	{		return jjtn000;
	}
}

