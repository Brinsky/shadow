options {
  CACHE_TOKENS=true;
  JAVA_UNICODE_ESCAPE=true;
  STATIC=false;
  NODE_USES_PARSER=true;
  MULTI=true;
  VISITOR=true;
  VISITOR_EXCEPTION="ShadowException";
  VISITOR_DATA_TYPE="Boolean";
}

PARSER_BEGIN(ShadowParser)
package shadow.parser.javacc;

import java.io.*;
import shadow.parser.*;
import shadow.AST.ASTWalker;
import shadow.typecheck.type.Type;
import shadow.typecheck.type.Modifiers;
import org.apache.commons.logging.Log;
import shadow.Loggers;

/**
 * Grammar to parse Shadow
 * @author William R. Speirs, Barry Wittman, and Jacob Young
 */
public class ShadowParser
{
   	public static enum TypeKind {		
		CLASS,
		ENUM,
		ERROR,
		EXCEPTION,
		INTERFACE,
		SINGLETON,
		VIEW
	};

   private static final Log logger = Loggers.PARSER;

   public ShadowParser(String fileName)
   {
      this(System.in);
      FileInputStream fis = null;
      
      try {
      	fis = new FileInputStream(new File(fileName));
        ReInit(fis);
      } catch(Exception e) {
        logger.error("Error reading file: " + fileName, e);
      } finally {
      	try { fis.close(); }
      	catch(Exception e) { ; }
      }
   }

   	public void debugPrint(String str) {
        logger.trace(str + ": " + token);
    }
   	
}

PARSER_END(ShadowParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < AND: "and" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CAST: "cast" >
| < CATCH: "catch" >
| < CHECK: "check" >
| < CLASS: "class" >
| < CODE: "code" >
| < CREATE: "create" >
| < CONSTANT: "constant" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
//| < DELETE: "delete" >
| < DESTROY: "destroy" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < ERROR: "error" >
| < EXCEPTION: "exception" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
//| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < GET: "get" >
| < IF: "if" >
| < IMMUTABLE: "immutable" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < IN: "in" >
| < INSTANCE: "instance" >
| < IS: "is" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
//| < NEW: "new" >
| < NULL: "null" >
| < NULLABLE: "nullable" >
| < OR: "or" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < READONLY: "readonly" >
| < RECOVER: "recover" >
| < RETURN: "return" >
| < SET: "set" >
| < SHORT: "short" >
| < SINGLETON: "singleton" >
| < _SKIP: "skip" >
//| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
//| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < UBYTE: "ubyte" >
| < UINT: "uint" >
| < ULONG: "ulong" >
| < USHORT: "ushort" >
| < VAR: "var" >
| < VIEW: "view" >
| < WEAK: "weak" >
| < WHILE: "while" >
| < XOR: "xor" >
}

/* LITERALS */

TOKEN :
{
   < BYTE_LITERAL: //can't end with b or B because of hex digits
        <DECIMAL_LITERAL> ["y","Y"]
      | <HEX_LITERAL> ["y","Y"]
      | <BINARY_LITERAL> ["y","Y"]
      | <OCTAL_LITERAL> ["y","Y"]
  >
|
  < UBYTE_LITERAL: //can't end with b or B because of hex digits
        <DECIMAL_LITERAL> ["u","U"]["y","Y"]
      | <HEX_LITERAL> ["u","U"]["y","Y"]
      | <BINARY_LITERAL> ["u","U"]["y","Y"]
      | <OCTAL_LITERAL> ["u","U"]["y","Y"]
  >
|
  < SHORT_LITERAL:
        <DECIMAL_LITERAL> ["s","S"]
      | <HEX_LITERAL> ["s","S"]
      | <BINARY_LITERAL> ["s","S"]
      | <OCTAL_LITERAL> ["s","S"]
  >  
|   
  < USHORT_LITERAL:
        <DECIMAL_LITERAL> ["u","U"]["s","S"]
      | <HEX_LITERAL> ["u","U"]["s","S"]
      | <BINARY_LITERAL> ["u","U"]["s","S"]
      | <OCTAL_LITERAL> ["u","U"]["s","S"]
  >  
|
  < INT_LITERAL:
        <DECIMAL_LITERAL> (["i","I"])?
      | <HEX_LITERAL> (["i","I"])?
      | <BINARY_LITERAL> (["i","I"])?
      | <OCTAL_LITERAL> (["i","I"])?
  >
|
  < UINT_LITERAL:
        <DECIMAL_LITERAL> ["u","U"](["i","I"])?
      | <HEX_LITERAL> ["u","U"](["i","I"])?
      | <BINARY_LITERAL> ["u","U"](["i","I"])?
      | <OCTAL_LITERAL> ["u","U"](["i","I"])?
  >
|
  < LONG_LITERAL:
        <DECIMAL_LITERAL> ["l","L"]
      | <HEX_LITERAL> ["l","L"]
      | <BINARY_LITERAL> ["l","L"]
      | <OCTAL_LITERAL> ["l","L"]
  >
|
  < ULONG_LITERAL:
        <DECIMAL_LITERAL> ["u","U"]["l","L"]
      | <HEX_LITERAL> ["u","U"]["l","L"]
      | <BINARY_LITERAL> ["u","U"]["l","L"]
      | <OCTAL_LITERAL> ["u","U"]["l","L"]
  >
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
|
  < #DECIMAL_LITERAL: "0" | ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" ["c","C"] (["0"-"7"])* > //doesn't use 0o or 0O because it's hard to read
|
  < FLOAT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
      | "." (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
      | (["0"-"9"])+ <EXPONENT> ["f","F"]
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F"]
  >
|
  < DOUBLE_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CODE_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|	
  < VERSION_LITERAL:  (["0"-"9"])+ "." (["0"-"9"])+ "." (["0"-"9"])+ >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
//       "\u0024",  // this is the $, but we want to use that for versions
       "\u0041"-"\u005a",       
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u005f", //underscore (not a legal way to start a variable in Shadow)
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
| < ARROW: "->" >
| < YIELDS: "=>" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COALESCE: "??" >
| < COLON: ":" >
| < EQ: "==" >
| < REF_EQ: "===" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < REF_NE: "!==" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < BIT_XOR: "^" >
| < REM: "%" >
| < LEFTSHIFT: "<<" >
| < LEFTROTATE: "<<<" >
| < CAT: "#" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < CATASSIGN: "#=" >
| < LEFTSHIFTASSIGN: "<<=" >
| < RIGHTSHIFTASSIGN: ">>=" >
| < RIGHTROTATEASSIGN: ">>>=" >
| < LEFTROTATEASSIGN: "<<<=" >
| < VERSION: "$" >
//| < ELLIPSIS: "..." >
}

/* >'s need special attention due to syntax for generics */
TOKEN :
{
  < RIGHTROTATE: ">>>" >
  {
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RIGHTROTATE;
     input_stream.backup(2); 
  }
| < RIGHTSHIFT: ">>" >
  { 
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RIGHTSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}


/*****************************************
 * THE SHADOW LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit():
{}
{  
  ( ImportDeclaration() )*
  TypeDeclaration() //only one declaration per file
  <EOF>

	{
        return jjtThis;
	}
}


void ImportDeclaration():
{}
{
  "import"  Name() ["$" [">" | "<"] < VERSION_LITERAL >] ";" 
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

Modifiers Modifiers():
{
   Modifiers modifiers = new Modifiers();
   debugPrint("MODIFIERS");
}
{
 (
  LOOKAHEAD(2)
  (
    "public" { modifiers.checkAndAdd(Modifiers.PUBLIC); }
  | "protected" { modifiers.checkAndAdd(Modifiers.PROTECTED); }
  | "private" { modifiers.checkAndAdd(Modifiers.PRIVATE); }
  | "abstract" { modifiers.checkAndAdd(Modifiers.ABSTRACT); }  
  | "readonly" { modifiers.checkAndAdd(Modifiers.READONLY); }
  | "native" { modifiers.checkAndAdd(Modifiers.NATIVE); }
  | "weak" { modifiers.checkAndAdd( Modifiers.WEAK); }
  |	"immutable"{ modifiers.checkAndAdd(Modifiers.IMMUTABLE); }
  |	"nullable" { modifiers.checkAndAdd(Modifiers.NULLABLE); }
  |	"get" { modifiers.checkAndAdd(Modifiers.GET); }
  |	"set" { modifiers.checkAndAdd(Modifiers.SET); }
  | "constant" { modifiers.checkAndAdd(Modifiers.CONSTANT); }
  )
 )*

 {
 	jjtThis.setModifiers(modifiers);
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration():
{
   Modifiers modifiers;
   debugPrint("TYPE DECLARATION");
   
}
{
	modifiers = Modifiers()
  ( ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)  
  | ViewDeclaration(modifiers)
  )
}

void ViewDeclaration(Modifiers modifiers):
{
	debugPrint("VIEW DECLARATION");
	Token t;

   modifiers.checkViewModifiers();	
}
{
	"view"
	[ LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ] //can we specify packages for views?
	t = <IDENTIFIER> { jjtThis.setImage(t.image); jjtThis.setModifiers(modifiers);  }
	"{"        
        ( ( LOOKAHEAD(PrimitiveType() "[") StaticArrayType() | PrimitiveType() ) VariableDeclaratorId() ";" )+
    "}"
}


void ClassOrInterfaceDeclaration(Modifiers modifiers):
{
   debugPrint("CLASS OR INTERFACE DECLARARTION");
   Token t;
}
{
  { jjtThis.setModifiers(modifiers); }
  ( "class"
  	{
  	  jjtThis.setKind(TypeKind.CLASS);
  	  modifiers.checkClassModifiers();	  
  	}
	| "singleton"
 	{
 	  jjtThis.setKind(TypeKind.SINGLETON);
 	  modifiers.checkSingletonModifiers();
 	}
  	
 	| "exception"
 	{
 	  jjtThis.setKind(TypeKind.EXCEPTION);
 	  modifiers.checkExceptionModifiers();
 	}
 	| "error"
 	{ jjtThis.setKind(TypeKind.ERROR);
 	  modifiers.checkErrorModifiers();
 	}
 	| "interface"
 	{
 	  jjtThis.setKind(TypeKind.INTERFACE);
 	   modifiers.checkInterfaceModifiers(); 	   
 	 } )

  [ LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ] //package specification
  t = <IDENTIFIER> { jjtThis.setImage(t.image); jjtThis.setModifiers(modifiers); }
  [ TypeParameters() ]
  [ Version() ]
  [ ExtendsList(jjtThis.getKind()) ]
  [ ImplementsList(jjtThis.getKind()) ]
  ClassOrInterfaceBody(jjtThis.getKind())
}

void ExtendsList(TypeKind kind):
{
   boolean extendsMoreThanOne = false;
   debugPrint("EXTENDS LIST");
}
{ 
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && kind != TypeKind.INTERFACE)
         throw new ParseException("A class cannot extend more than one other class");
      if (kind == TypeKind.ERROR)
         throw new ParseException("An error cannot extend another type");
      if (kind == TypeKind.SINGLETON)
         throw new ParseException("A singleton cannot extend another type");
   }
}

void ImplementsList(TypeKind kind):
{ debugPrint("IMPLEMENTS"); }
{
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*
   {
      if (kind == TypeKind.INTERFACE)
         throw new ParseException("An interface cannot implement other interfaces");
      if( kind == TypeKind.ERROR )
      	throw new ParseException("An error cannot implement interfaces");
      if( kind == TypeKind.EXCEPTION )
      	throw new ParseException("An exception cannot implement interfaces");
   }
}

void Version():
{ debugPrint("VERSION"); }
{
   "$" < VERSION_LITERAL >
}

void EnumDeclaration(Modifiers modifiers):
{
    debugPrint("ENUM DECLARATION");
    Token t;
	modifiers.checkEnumModifiers();
}
{
{ jjtThis.setModifiers(modifiers); }

  "enum"
  [ LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ]
  t = <IDENTIFIER> { jjtThis.setImage(t.image);  }
  [ ImplementsList(TypeKind.ENUM) ]
  EnumBody()
}

void EnumBody():
{ debugPrint("ENUM BODY"); }
{
   "{"
   EnumConstant() ( "," EnumConstant() )*
   [ ";" ( ClassOrInterfaceBodyDeclaration(TypeKind.ENUM) )* ]
   "}"
}

void EnumConstant():
{
	debugPrint("ENUM CONSTANT");
	Token t;
}
{
  t = <IDENTIFIER>  { jjtThis.setImage(t.image); } [ Arguments() ] [ ClassOrInterfaceBody(TypeKind.ENUM) ]
}

void TypeParameters():
{ debugPrint("TYPE PARAMETERS"); }
{
   "<" TypeParameter() ( "," TypeParameter() )* ">"
}

void TypeParameter():
{
	debugPrint("TYPE PARAMETER");
	Token t;
}
{
   t = <IDENTIFIER>  { jjtThis.setImage(t.image); } [ TypeBound() ]
   {
     jjtThis.addModifier(Modifiers.TYPE_NAME);   }
}

void TypeBound():
{ debugPrint("TYPE BOUND"); }
{
   "is" ClassOrInterfaceType() ( "and" ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(TypeKind kind):
{ debugPrint("CLASS OR INTERFACE BODY"); }
{
  "{" ( ClassOrInterfaceBodyDeclaration(kind) )* "}"
}

void ClassOrInterfaceBodyDeclaration(TypeKind kind):
{
   Modifiers modifiers;
   debugPrint("CLASS OR INTERFACE BODY DECLARATION"); 
}
{
  LOOKAHEAD(2) Initializer() { if (kind == TypeKind.INTERFACE) throw new ParseException("An interface cannot have initializers"); }
// Just get all the modifiers out of the way. If you want to do
// more checks, pass the modifiers down to the member  
| modifiers = Modifiers()
  (  ClassOrInterfaceDeclaration(modifiers)
    | EnumDeclaration(modifiers)
    | LOOKAHEAD( "create" ) CreateDeclaration(modifiers)
    | LOOKAHEAD( "destroy" ) DestroyDeclaration(modifiers)
    | LOOKAHEAD( Type() <IDENTIFIER> ( "," | "=" | ";" ) ) FieldDeclaration(modifiers) 
    | MethodDeclaration(modifiers)
    | ViewDeclaration(modifiers)
  )
}

void FieldDeclaration(Modifiers modifiers):
{
    debugPrint("FIELD DECLARATION");
	modifiers.checkFieldModifiers();
}
{
  { jjtThis.setModifiers(modifiers); }
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator():
{ debugPrint("VARIABLE DECLARATOR"); }
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{
    debugPrint("VARIABLE DECLARATOR ID");
    Token t;
}
{
  t = <IDENTIFIER> { jjtThis.setImage(t.image); }
}

void VariableInitializer():
{ debugPrint("VARIABLE INITIALIZER"); }
{ 
  ArrayInitializer()
| ConditionalExpression()
}

void ArrayInitializer():
{ debugPrint("ARRAY INITIALIZER"); }
{  	
  LOOKAHEAD(2) "{" ArrayInitializer() ( LOOKAHEAD(2) "," ArrayInitializer() )*  [ "," ] "}"
| "{" ConditionalExpression() ( LOOKAHEAD(2) "," ConditionalExpression() )*  [ "," ] "}"
}

void MethodDeclarator(boolean isLocal):
{
	debugPrint("METHOD DECLARATOR");
	Token t;	
}
{
	{ jjtThis.setLocal(isLocal); }  
  t = <IDENTIFIER> { jjtThis.setImage(t.image); } [ TypeParameters() ] FormalParameters(isLocal) "=>" ResultTypes()
}

void InlineMethodDeclarator():
{
	debugPrint("INLINE METHOD DECLARATOR");
	Token t;
}
{
  t = <IDENTIFIER> { jjtThis.setImage(t.image); } [ TypeParameters() ] FormalParameters(true) "=>" InlineResults()
}
	
void InlineResults():
{
	debugPrint("INLINE RESULTS");
	Token t;
}
{
 "(" [ ConditionalExpression() ( "," ConditionalExpression() )* ]  ")"
}

void FormalParameters(boolean isLocal):
{
  debugPrint("FORMAL PARAMETERS");
   
 }
{
	{ jjtThis.setLocal(isLocal); }
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter():
{
    debugPrint("FORMAL PARAMETER");
	Modifiers modifiers;
}
{
   modifiers = Modifiers()
   Type() VariableDeclaratorId()
   {
     modifiers.checkParameterAndReturnModifiers();
     jjtThis.setModifiers(modifiers);
   }
}

void MethodDeclaration(Modifiers modifiers):
{
  debugPrint("METHOD DECLARATION");
	modifiers.checkMethodModifiers(); 
 }
{
  { jjtThis.setModifiers(modifiers); }  
  MethodDeclarator(false) [ "throws" NameList() ]
  ( Block() | ";" )
}

void CreateDeclaration(Modifiers modifiers):
{
  debugPrint("CREATE DECLARATION");
  modifiers.checkCreateModifiers();  
}
{
  { jjtThis.setModifiers(modifiers); jjtThis.setImage("create"); }  
  // Modifiers matched in the caller
  CreateDeclarator() [ "throws" NameList() ]
  ( CreateBlock() | ";" )
}

void CreateDeclarator():
{
	debugPrint("CREATE DECLARATOR");
	Token t;
}
{
  "create" { jjtThis.setImage("create"); } FormalParameters(false)
}

void CreateBlock():
{
  debugPrint("CREATE BLOCK");    
}
{
	"{" [ LOOKAHEAD(ExplicitCreateInvocation()) ExplicitCreateInvocation() ]
    ( BlockStatement() )*  "}" }

void DestroyDeclaration(Modifiers modifiers):
{
  debugPrint("DESTROY DECLARATION");
  modifiers.checkDestroyModifiers();
}
{
  { jjtThis.setModifiers(modifiers); jjtThis.setImage("destroy"); }  
  // Modifiers matched in the caller
  "destroy" //no (checked) exceptions from destroys!
  ( Block() | ";" )
}

void ExplicitCreateInvocation():
{ debugPrint("EXPLICIT CREATE INVOCATION"); }
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";" { jjtThis.setImage("this"); }
| "super" Arguments() ";" { jjtThis.setImage("super"); } 
}



//do we need initializers at all?
void Initializer():
{ debugPrint("INITIALIZER"); }
{
  	Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{ debugPrint("TYPE"); }
{
   LOOKAHEAD(ReferenceType()) ReferenceType()
 //   |   LOOKAHEAD(PrimitiveType() "[") StaticArrayType()
    |   PrimitiveType()
    |	FunctionType()
}

void ReferenceType():
{ debugPrint("REFERENCE TYPE"); }
{
    PrimitiveType() ( LOOKAHEAD(2) "[" ( "," { jjtThis.incrementDimensions(); } )* { jjtThis.pushDimensions(); } "]" )+
  | ClassOrInterfaceType() ( LOOKAHEAD(2) "[" ( "," { jjtThis.incrementDimensions(); } )* { jjtThis.pushDimensions(); } "]" )*
}

void StaticArrayType():
{
	debugPrint("STATIC ARRAY TYPE");
	Token t;
}
{
    PrimitiveType() "[" IntegerLiteral() "]"
}



void FunctionType():
{
	debugPrint("FUNCTION TYPE");
}
{
    ResultTypes() "=>" ResultTypes()
    {
      jjtThis.addModifier(Modifiers.TYPE_NAME);    }
}

void ClassOrInterfaceType():
{
	debugPrint("CLASS OR INTERFACE TYPE");
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
   [ LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@"  ] ClassOrInterfaceTypeSuffix() (  LOOKAHEAD(2) ":" ClassOrInterfaceTypeSuffix() )*
}

void ClassOrInterfaceTypeSuffix():
{
	debugPrint("CLASS OR INTERFACE TYPE SUFFIX");	
	Token t;  
}
{
   t = <IDENTIFIER> [ LOOKAHEAD(TypeArguments()) TypeArguments() ]
   { jjtThis.setImage(t.image); }  
}

void TypeArguments():
{ debugPrint("TYPE ARGUMENTS"); }
{
   "<" Type() ( "," Type() )* ">"
}


void PrimitiveType():
{
  	debugPrint("PRIMITIVE TYPE");
	Token t;
}
{

(    
  t = "boolean"
| t = "byte"
| t = "code"
| t = "double"
| t = "float"
| t = "int"
| t = "long"
| t = "short"
| t = "ubyte"
| t = "uint" 
| t = "ulong" 
| t = "ushort" 
)
{
  jjtThis.setImage(t.image);
  jjtThis.addModifier(Modifiers.TYPE_NAME);}
}

void ResultType():
{ debugPrint("RESULT TYPE");
	Modifiers modifiers;
}
{
	modifiers = Modifiers() Type() [ <IDENTIFIER > ] //optional identifier used only for documentation
	{
	  modifiers.checkParameterAndReturnModifiers();
	  jjtThis.setModifiers(modifiers);	} 
}

void ResultTypes():
{ debugPrint("RESULT TYPES"); }
{
  "(" [ ResultType() ( "," ResultType() )* ] ")"
}

void Name():
{
	debugPrint("NAME");
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
  [ LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ] t = <IDENTIFIER> { sb.append(t.image); debugPrint(t.image); } ( LOOKAHEAD(2) ":" t = <IDENTIFIER> { sb.append(':').append(t.image); } )*
  { jjtThis.setImage(sb.toString()); }
}

void UnqualifiedName():
{
	debugPrint("UNQUALIFIED NAME");
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
  "default"  { jjtThis.setImage("default");  }
| t = <IDENTIFIER> { sb.append(t.image); debugPrint(t.image); } ( LOOKAHEAD(2) "." t = <IDENTIFIER> { sb.append('.').append(t.image); } )*
  { jjtThis.setImage(sb.toString()); }
}

void NameList():
{ debugPrint("NAME LIST"); }
{
  ClassOrInterfaceType() ( "," ClassOrInterfaceType() )*
}


/*
 * Expression syntax follows.
 */

/*
void Expression():
{ debugPrint("EXPRESSION"); }
{

	LOOKAHEAD( AllocationExpression() ) AllocationExpression()
|   ConditionalExpression()
}
*/

void AssignmentOperator():
{ debugPrint("ASSIGNMENT OPERATOR"); }
{
    "="    { jjtThis.setImage("="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.EQUAL); }
  | "#="   { jjtThis.setImage("#="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.CATASSIGN); }
  | "*="   { jjtThis.setImage("*="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.STARASSIGN); }
  | "/="   { jjtThis.setImage("/="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.SLASHASSIGN); }
  | "%="   { jjtThis.setImage("%="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.MODASSIGN); }
  | "+="   { jjtThis.setImage("+="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.PLUSASSIGN); }
  | "-="   { jjtThis.setImage("-="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.MINUSASSIGN); }
  | "<<="  { jjtThis.setImage("l="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.LEFTSHIFTASSIGN); }
  | ">>="  { jjtThis.setImage("r="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.RIGHTSHIFTASSIGN); }
  | ">>>=" { jjtThis.setImage("L="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.RIGHTROTATEASSIGN); }
  | "<<<=" { jjtThis.setImage("R="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.LEFTROTATEASSIGN); }
  | "&="   { jjtThis.setImage("&="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.ANDASSIGN); }
  | "^="   { jjtThis.setImage("^="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.XORASSIGN); }
  | "|="   { jjtThis.setImage("|="); jjtThis.setAssignmentType(ASTAssignmentOperator.AssignmentType.ORASSIGN); }
}

void ConditionalExpression():
{}
{
  CoalesceExpression() [ "?" ConditionalExpression() "," ConditionalExpression() ]
}

void CoalesceExpression():
{}
{
  ConditionalOrExpression()  ( "??" ConditionalOrExpression() )*
}

void ConditionalOrExpression():
{}
{
  ConditionalExclusiveOrExpression() ( "or" { jjtThis.addToImage('o'); } ConditionalExclusiveOrExpression() )*
}


void ConditionalExclusiveOrExpression():
{}
{
  ConditionalAndExpression() ( "xor" { jjtThis.addToImage('x'); } ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  BitwiseOrExpression() ( "and" { jjtThis.addToImage('a'); } BitwiseOrExpression() )*
}

void BitwiseOrExpression():
{}
{
  BitwiseExclusiveOrExpression() ( "|" { jjtThis.addToImage('|'); } BitwiseExclusiveOrExpression() )*
}

void BitwiseExclusiveOrExpression():
{}
{
  BitwiseAndExpression() ( "^" { jjtThis.addToImage('^'); } BitwiseAndExpression() )*
}

void BitwiseAndExpression():
{}
{
  EqualityExpression() ( "&" { jjtThis.addToImage('&'); } EqualityExpression() )*
}

void EqualityExpression():
{}
{
  IsExpression() ( ( "==" { jjtThis.addToImage('='); } |
  					 "===" { jjtThis.addToImage('e'); } |
                     "!=" { jjtThis.addToImage('!'); } |
                     "!==" { jjtThis.addToImage('n'); } ) IsExpression() )*
}

void IsExpression():
{}
{
  RelationalExpression() [ "is" { jjtThis.addToImage('i'); } Type() ]
}

void RelationalExpression():
{ debugPrint("RELATIONAL EXPRESSION"); }
{
  ConcatenationExpression() ( ( "<" { jjtThis.addToImage('<'); } |
                        ">" { jjtThis.addToImage('>'); } |
                        "<=" { jjtThis.addToImage('{'); } |
                        ">="  { jjtThis.addToImage('}'); }) ConcatenationExpression() )*
}


void ConcatenationExpression():
{ debugPrint("CONCATENATION EXPRESSION"); }
{
  ShiftExpression() ( "#" { jjtThis.addToImage('#'); }  ShiftExpression() )*
}


//
// Since shift & rotate are not single characters (see TAC Symbole2Operator code)
// we are using r & l for right & left shift and
// R & L for right & left rotate
void ShiftExpression():
{ debugPrint("SHIFT EXPRESSION"); }
{
  RotateExpression()
  ( ( "<<" { jjtThis.addToImage('l'); } |
      RightShift() { jjtThis.addToImage('r'); } ) RotateExpression() )*
}

void RotateExpression():
{ debugPrint("ROTATE EXPRESSION"); }
{
  AdditiveExpression()
  ( ( "<<<" { jjtThis.addToImage('L'); } |
      RightRotate() { jjtThis.addToImage('R'); } ) AdditiveExpression() )*
}

//
// There is a parsing issue here when we have expressions like 1 + 2 - 3 + 4
// This will come back as everything being +
// So as a complete hack I'm creating a string of symbols for each pair of expressions
//
void AdditiveExpression():
{}
{
  MultiplicativeExpression()
  ( ( "+" { jjtThis.addToImage('+'); } |
      "-" { jjtThis.addToImage('-'); } ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryToString()
  ( ( "*" { jjtThis.addToImage('*'); } |
      "/" { jjtThis.addToImage('/'); } |
      "%" { jjtThis.addToImage('%'); } ) UnaryToString() )*
}

void UnaryToString():
{}
{
  [ "#" { jjtThis.setImage("#"); } ] UnaryExpression()
}

void UnaryExpression():
{}
{
  ( "+" { jjtThis.setImage("+"); } | "-" { jjtThis.setImage("-"); } ) UnaryExpression()
| UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus():
{ debugPrint("UNARY EXPRESSION NOT PLUS MINUS"); }
{
  ( "~" { jjtThis.setImage("~"); } | "!" { jjtThis.setImage("!"); } ) UnaryExpression()
| InlineMethodDefinition()
}

void InlineMethodDefinition():
{ debugPrint("INLINE METHOD DEFINITION"); }
{
  LOOKAHEAD(FormalParameters(true) "=>" ) FormalParameters(true) "=>" InlineResults() //inline method definition
| PrimaryExpression()
}

void CastExpression():
{
    debugPrint("CAST EXPRESSION");
    jjtThis.setImage("cast< >");   
}
{
 "cast" "<" Type() ">" "(" ConditionalExpression() ")"
}

void CheckExpression():
{
    debugPrint("CHECK EXPRESSION");
    jjtThis.setImage("check");   
}
{ 
 "check" "(" ConditionalExpression() ")"
}

void PrimaryExpression():
{ debugPrint("PRIMARY EXPRESSION"); }
{  
	PrimaryPrefix() ( LOOKAHEAD(PrimarySuffix()) PrimarySuffix() )* 
}

void Sequence():
{
  debugPrint("SEQUENCE");
}
{
	"("	{ { jjtThis.addItem();}	} [ConditionalExpression() { jjtThis.setUsed();} ] ("," { { jjtThis.addItem();}	} [ConditionalExpression() { jjtThis.setUsed();}] )+ ")"
}


void PrimaryPrefix():
{
	debugPrint("PRIMARY PREFIX");
	Token t;
}
{
  Literal()
| "this" { jjtThis.setImage("this"); }
| "super" { jjtThis.setImage("super"); }
| CheckExpression()
| CastExpression()
| LOOKAHEAD( "(" ConditionalExpression() ")" ) "(" ConditionalExpression() ")"
| PrimitiveType()
| FunctionType()
| [LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ] t = <IDENTIFIER> { jjtThis.setImage(t.image); debugPrint(t.image); }
//last production catches class types and identifiers
}

void PrimarySuffix():
{
	debugPrint("PRIMARY SUFFIX");
	Token t;
}
{
  LOOKAHEAD(2) QualifiedKeyword()
| LOOKAHEAD(3) Brackets()
| LOOKAHEAD(3) Subscript()
| LOOKAHEAD(2) Destroy()
| Method()
| LOOKAHEAD(Allocation()) Allocation()
| ScopeSpecifier()
| Property()
| LOOKAHEAD( [ TypeArguments() ] "(" ) MethodCall()
}

void Allocation():
{
  debugPrint("ALLOCATION");
  Token t;}
{
  		LOOKAHEAD(2) Instance()
	|	LOOKAHEAD(ArrayCreate()) ArrayCreate()
	|   Create()
 }


void QualifiedKeyword():
{
  	debugPrint("QUALIFIED KEYWORD");
	Token t;
}
{
  ":"
  ( "this" { jjtThis.setImage("this"); }
	| "super" { jjtThis.setImage("super"); }
	| "class" { jjtThis.setImage("class"); }
	)
// When you have inner classes, you sometimes need to know Outer:this or Inner:this
// Prefix must be a type name that you're currently inside of
}

void Brackets():
{
  debugPrint("BRACKETS");
  Token t;
}
{
  ( LOOKAHEAD(2) "[" ("," { jjtThis.incrementDimensions(); })* "]" { jjtThis.pushDimensions(); } )+
}

void ArrayCreate():
{
  debugPrint("ARRAY CREATE");
  Token t;
}
{
  [ TypeArguments() ] ":" "create" ( LOOKAHEAD(2) "[" ConditionalExpression() ("," ConditionalExpression() { jjtThis.incrementDimensions(); })* "]" { jjtThis.pushDimensions(); })+
}

void Subscript():
{
  debugPrint("SUBSCRIPT");
  Token t;
}
{
  "[" ConditionalExpression() ("," ConditionalExpression() { jjtThis.incrementDimensions(); })* "]" { jjtThis.pushDimensions(); }
}

void Create():
{
  	debugPrint("CREATE");
}
{
  [ TypeArguments() ] ":" "create" "(" [ ConditionalExpression() ( "," ConditionalExpression() )* ] ")"
  { jjtThis.setImage("create"); debugPrint("create");  } 
}

void Instance():
{
  debugPrint("INSTANCE");
}
{
 	":" "instance" { jjtThis.setImage("instance"); debugPrint("instance");} 	
}


void ScopeSpecifier():
{
  	debugPrint("SCOPE SPECIFIER");
	Token t;
}
{
  ":" t = <IDENTIFIER> { jjtThis.setImage(t.image); debugPrint(t.image);} //field, constant, or class
}

void Destroy():
{
  	debugPrint("DESTROY");
	Token t;
}
{
  "." "destroy" { jjtThis.setImage("destroy"); debugPrint("destroy");  }
}

void Method():
{
  	debugPrint("METHOD");
	Token t;
}
{
  "." t = <IDENTIFIER> { jjtThis.setImage(t.image); debugPrint(t.image);  }
}

void Property():
{
  	debugPrint("PROPERTY");
	Token t;
}
{
  "->" t = <IDENTIFIER> { jjtThis.setImage(t.image); debugPrint(t.image);  }
}

void MethodCall():
{
	debugPrint("METHOD CALL");
	Token t;
}
{
  [ TypeArguments() ] "(" [ ConditionalExpression() ( "," ConditionalExpression() )* ] ")"
}




void Literal() :
{
	debugPrint("LITERAL");
	Token t;
	jjtThis.addModifier(Modifiers.IMMUTABLE);
	jjtThis.addModifier(Modifiers.CONSTANT); 
}
{
  (    
  t = <BYTE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.BYTE); }
| t = <CODE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.CODE); }
| t = <SHORT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.SHORT); }
| t = <INT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.INT); }
| t = <LONG_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.LONG); }
| t = <FLOAT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.FLOAT); }
| t = <DOUBLE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.DOUBLE); }
| t = <STRING_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.STRING); }
| t = <UBYTE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.UBYTE); }
| t = <USHORT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.USHORT); }
| t = <UINT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.UINT); }
| t = <ULONG_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.ULONG); }
| BooleanLiteral() { jjtThis.setLiteral(Literal.BOOLEAN); }
| NullLiteral() { jjtThis.setLiteral(Literal.NULL); jjtThis.addModifier(Modifiers.NULLABLE); jjtThis.removeModifier(Modifiers.IMMUTABLE); }  )
}


void IntegerLiteral(): //useful for static arrays, etc.
{
	debugPrint("INTEGER LITERAL");
	Token t;
}
{
     (
		  t = <BYTE_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.BYTE); }
		| t = <UBYTE_LITERAL > { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.UBYTE); }
		| t = <SHORT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.SHORT); }
		| t = <USHORT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.USHORT); }
		| t = <INT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.INT); }
		| t = <UINT_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.UINT); }
		| t = <LONG_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.LONG); }
		| t = <ULONG_LITERAL> { jjtThis.setImage(t.image); jjtThis.setLiteral(Literal.ULONG); }
	)
}

void BooleanLiteral():
{ debugPrint("BOOLEAN LITERAL"); }
{    
  "true" { jjtThis.setTrue(); jjtThis.setImage("true"); }
| "false" { jjtThis.setImage("false"); }
 
}

void NullLiteral():
{ debugPrint("NULL LITERAL"); }
{
  "null" { jjtThis.setImage("null"); }
}

void Arguments():
{ debugPrint("ARGUMENTS"); }
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{ debugPrint("ARGUMENT LIST"); }
{
  ConditionalExpression() ( "," ConditionalExpression() )*
}


/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
/*
void ArrayDimsAndInits():
{ debugPrint("ARRAY DIMS AND INITS"); }
{
  LOOKAHEAD(2)( LOOKAHEAD(2) "[" ConditionalExpression() ("," ConditionalExpression() { jjtThis.incrementDimensions();} )* { jjtThis.pushDimensions();}  "]" )+
  ( LOOKAHEAD(2) "[" ("," { jjtThis.incrementDimensions(); })* "]" { jjtThis.pushDimensions(); } )*
| ( "[" ("," { jjtThis.incrementDimensions(); })* "]" { jjtThis.pushDimensions(); } )+ ArrayInitializer()
}
*/

/*
 * Statement syntax follows.
 */

void Statement():
{ debugPrint("STATEMENT"); }
{  
  AssertStatement()
| Block()
| EmptyStatement()
| StatementExpression() ";"
| SwitchStatement()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| ForeachStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
//| SynchronizedStatement()
| FinallyStatement() //includes try/catch/recover/finally
}

void AssertStatement():
{ debugPrint("ASSERT STATEMENT"); }
{
  "assert" ConditionalExpression() [ "," ConditionalExpression() ] ";"
}

void Block():
{ debugPrint("BLOCK"); }
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{
    debugPrint("BLOCK STATEMENT");    
}
{
  LOOKAHEAD(LocalDeclaration()) LocalDeclaration()    
| Statement()
// No local classes in Shadow
}

void LocalDeclaration():
{
  debugPrint("LOCAL DECLARATION");
  Modifiers modifiers;}
{
  modifiers = Modifiers()    
  (
    LOOKAHEAD(InlineMethodDeclaration(modifiers)) InlineMethodDeclaration(modifiers)
  | LOOKAHEAD(LocalMethodDeclaration(modifiers)) LocalMethodDeclaration(modifiers)
  | LocalVariableDeclaration(modifiers) ";" )  }

void InlineMethodDeclaration(Modifiers modifiers):
{
  	debugPrint("INLINE METHOD DECLARATION");
	modifiers.checkLocalMethodModifiers(); 
 }
{
  { jjtThis.setModifiers(modifiers); }  
  InlineMethodDeclarator() [ "throws" NameList() ]
  ";"
}

void LocalMethodDeclaration(Modifiers modifiers):
{
  	debugPrint("LOCAL METHOD DECLARATION");
	modifiers.checkLocalMethodModifiers(); 
 }
{
  { jjtThis.setModifiers(modifiers); }  
  MethodDeclarator(true) [ "throws" NameList() ]
  Block()
}

void LocalVariableDeclaration(Modifiers modifiers):
{
  debugPrint("LOCAL VARIABLE DECLARATION");
  modifiers.checkLocalVariableModifiers();
}
{  
  (  "var" { jjtThis.setImage("var"); }  | Type() ) VariableDeclarator() ( "," VariableDeclarator() )*
  {
     jjtThis.setModifiers(modifiers);
  }
}

void EmptyStatement():
{}
{
  "skip" ";"
}

void StatementExpression():
{ debugPrint("STATEMENT EXPRESSION"); }
{
  		LOOKAHEAD( SequenceAssignment() ) SequenceAssignment() 	
	| 	Expression()  //method call, assignment, or allocation
}

void SequenceAssignment() :
{ debugPrint("SEQUENCE ASSIGNMENT"); }
{
  	//Sequence() = Sequence() or
  	//Sequence() = PrimaryExpression() [for method calls that return sequences] 
  	Sequence() "=" ( LOOKAHEAD( Sequence() ) Sequence() | PrimaryExpression() ) { jjtThis.setImage("="); }  
}

void Expression() :
{ debugPrint("EXPRESSION"); }
{
	PrimaryExpression() [ AssignmentOperator() { jjtThis.setImage("?="); } ConditionalExpression() ]
}

void SwitchStatement():
{ debugPrint("SWITCH STATEMENT"); }
{
  "switch" "(" ConditionalExpression() ")" "{"
    ( SwitchLabel() ( Block() ) )*
  "}"
}

void SwitchLabel():
{
	Token t;
}
{
  "case" "(" PrimaryExpression() ("," PrimaryExpression())* ")"
| "default"
}

void IfStatement():
{ debugPrint("IF STATEMENT"); }
{
  "if" "(" ConditionalExpression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{ debugPrint("WHILE STATEMENT"); }
{
  "while" "(" ConditionalExpression() ")" Statement()
}

void DoStatement():
{ debugPrint("DO STATEMENT"); }
{
  "do" Statement() "while" "(" ConditionalExpression() ")" ";"
}

void ForeachStatement():
{
	debugPrint("FOREACH STATEMENT");
	Token t;	
}
{
  "foreach" "(" ForeachInit() ")" Statement()
}

void ForeachInit():
{
	debugPrint("FOREACH INIT");
	Token t;
	Modifiers modifiers;	
}
{
 	modifiers = Modifiers() ( "var" | Type() ) t = <IDENTIFIER> { jjtThis.setImage(t.image); } "in" ConditionalExpression()
 	{
 	  modifiers.checkLocalVariableModifiers();
 	  jjtThis.setModifiers(modifiers); 	}
}



void ForStatement() :
{ debugPrint("FOR STATEMENT"); }
{
  "for" "(" [ ForInit() ] ";" ConditionalExpression() ";" [ ForUpdate() ] ")" Statement()
}

void ForInit():
{
	debugPrint("FOR INIT");
	Token t;	
}
{
  LOOKAHEAD( LocalVariableDeclaration(Modifiers.NO_MODIFIERS) ) LocalVariableDeclaration(Modifiers.NO_MODIFIERS)
| StatementExpressionList()
}

void StatementExpressionList():
{ debugPrint("STATEMENT EXPRESSION LIST"); }
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{ debugPrint("FOR UPDATE"); }
{
  StatementExpressionList()
}

void BreakStatement():
{
	Token t;
	debugPrint("BREAK STATEMENT");
	jjtThis.setImage("");
}
{
  "break" ";"
}

void ContinueStatement():
{ debugPrint("CONTINUE STATEMENT"); }
{
  "continue" [ ConditionalExpression() ]  ";"
}

void ReturnStatement():
{ debugPrint("RETURN STATEMENT"); }
{
  "return"
  ( ";"
  | LOOKAHEAD(Sequence()) Sequence() ";"
  |  ConditionalExpression() ";"   
  )
}

void ThrowStatement():
{ debugPrint("THROW STATEMENT"); }
{
  "throw" ConditionalExpression() ";"
}



// for a simpler back end, a finally statement holds
// the try, the catches, and the recover (even if no finally is used)
void FinallyStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/recover/catch is present.
 */
{ debugPrint("FINALLY STATEMENT"); }
{
  RecoverStatement()
  [ "finally" Block() ]
}

void RecoverStatement():
{ debugPrint("RECOVER STATEMENT"); }
{
  CatchStatements()
  [ "recover" Block() ]
}

void CatchStatements():
{ debugPrint("CATCH STATEMENTS"); }
{
  TryStatement()
  ( CatchStatement() )*
}

void CatchStatement():
{ debugPrint("CATCH STATEMENT"); }
{ 
  "catch" "(" FormalParameter() ")" Block()
}

void TryStatement():
{ debugPrint("TRY STATEMENT"); }
{
  "try" Block()
}

/*
void TryStatement():

 // Semantic check required here to make sure that at least one
 // finally/recover/catch is present. 
{ debugPrint("TRY STATEMENT"); }
{
  InnerTryStatement()
  [ "finally" Block() { jjtThis.addFinally(); }]
}

void InnerTryStatement():
{ debugPrint("INNER TRY STATEMENT"); }
{  
  "try" Block()
  ( CatchStatement() { jjtThis.addCatch(); } )*
  [ "recover" Block() { jjtThis.addRecover(); }]
}

void CatchStatement():
{ debugPrint("CATCH STATEMENT"); }
{
 "catch" "(" FormalParameter() ")" Block()   }
*/

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RightRotate():
{ debugPrint("RIGHT ROTATE"); }
{
  ( LOOKAHEAD({ getToken(1).kind == GT && ((GTToken)getToken(1)).realKind == RIGHTROTATE} ) ">" ">" ">" )
}


void RightShift():
{ debugPrint("RIGHT SHIFT"); }
{
  ( LOOKAHEAD({ getToken(1).kind == GT && ((GTToken)getToken(1)).realKind == RIGHTSHIFT} ) ">" ">" )
}