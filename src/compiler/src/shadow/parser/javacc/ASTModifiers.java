/* Generated By:JJTree: Do not edit this line. ASTModifiers.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package shadow.parser.javacc;

import org.apache.commons.logging.Log;

import shadow.Loggers;

public
@SuppressWarnings("all")
class ASTModifiers extends SimpleNode {
  private static final Log logger = Loggers.TYPE_CHECKER;
  
  public ASTModifiers(int id) {
    super(id);
  }

  public ASTModifiers(ShadowParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ShadowParserVisitor visitor, Boolean secondVisit) throws ShadowException {
    return visitor.visit(this, secondVisit);
  }
  
  int modifiers = 0;
  
  public void setModifiers(int modifiers) {
	  this.modifiers = modifiers;
  }
  
  public void dump(String prefix) {
	  StringBuilder sb = new StringBuilder(prefix + "ASTModifiers(" + line + ":" + column + "): ");
	  
	  ShadowParser.ModifierSet ms = new ShadowParser.ModifierSet();
	  	  
	  if(ms.isAbstract(modifiers)) sb.append("abstract ");
	  if(ms.isFinal(modifiers)) sb.append("final ");
	  //if(ms.isNative(modifiers)) sb.append("native ");
	  if(ms.isPrivate(modifiers)) sb.append("private ");
	  if(ms.isProtected(modifiers)) sb.append("protected ");
	  if(ms.isPublic(modifiers)) sb.append("public ");
	  if(ms.isStatic(modifiers)) sb.append("static ");
	  //if(ms.isStrictfp(modifiers)) sb.append("strictfp ");
	  //if(ms.isSynchronized(modifiers)) sb.append("synchronized ");
	  //if(ms.isTransient(modifiers)) sb.append("transient ");
	  //if(ms.isVolatile(modifiers)) sb.append("volatile ");
	  if(modifiers == 0) sb.append("none");

	  logger.debug(sb.toString());
	  dumpChildren(prefix);
  }
}
/* JavaCC - OriginalChecksum=48a1e9a20c9e4e1426715db818f4bb4a (do not edit this line) */
