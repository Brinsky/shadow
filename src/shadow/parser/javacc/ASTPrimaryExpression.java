/* Generated By:JJTree: Do not edit this line. ASTPrimaryExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package shadow.parser.javacc;

public
@SuppressWarnings("all")
class ASTPrimaryExpression extends SimpleNode {
	
	private boolean action = false;
	//private Kind kind;
	private Node suffix;
	
	public void setSuffix(Node node)
	{
		suffix = node;
	}
	
	public Node getSuffix()
	{
		return suffix;
	}
	
	/*
	public enum Kind
	{
		LITERAL,
		THIS,
		SUPER,
		CHECK,
		CONDITIONAL,
		PRIMITIVE_TYPE,
		FUNCTION_TYPE,
		CLASS_TYPE,
		IDENTIFIER,
		QUALIFIED_THIS,
		QUALIFIED_SUPER
		
	}
	
	*/
	/* prefix
	Literal()
	| "this" { jjtThis.setImage("this"); }
	| "super" { jjtThis.setImage("super"); }
	| CheckExpression()
	| LOOKAHEAD( "(" ConditionalExpression() ")" ) "(" ConditionalExpression() ")"
	| PrimitiveType()
	| FunctionType()
	| [LOOKAHEAD(UnqualifiedName() "@") UnqualifiedName() "@" ] t = <I
	
	suffix
	  LOOKAHEAD(2) QualifiedKeyword()
| LOOKAHEAD(3) Brackets()
| LOOKAHEAD(3) Subscript()
| LOOKAHEAD(2) Destroy()
| Method()
| LOOKAHEAD(Allocation()) Allocation()
| ScopeSpecifier()
| Property()
| LOOKAHEAD( [ TypeArguments() ] "(" ) MethodCall()

	*/
	
	/*
	public void setKind(Kind kind)
	{
		this.kind = kind;		
	}
	
	public Kind getKind()
	{
		return kind;		
	}
	*/
	
  public ASTPrimaryExpression(int id) {
    super(id);
  }

  public ASTPrimaryExpression(ShadowParser p, int id) {
    super(p, id);
  }
  
  public void setAction(boolean action)
  {
	  this.action = action;	  
  }
  
  public boolean isAction()
  {
	  return action;
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ShadowParserVisitor visitor, Boolean secondVisit) throws ShadowException {
    return visitor.visit(this, secondVisit);
  }
}
/* JavaCC - OriginalChecksum=e3feeb67cca768ccdc622531cad9952e (do not edit this line) */
