/**
 * Class {@code HashMap<K,V>} stores a map, also known as a symbol table,
 * of key-value pairs with entries mapping keys of type {@code K} to values
 * of type {@code V}. This map is implemented with a hash table that
 * employs the chaining strategy for collision resolution, allowing keys to
 * be added, found, and deleted in constant or near-constant time.
 * {@code HashMap<K,V>} requires that type {@code K} has the {@code CanHash}
 * interface but imposes no ordering requirement on keys.  The
 * {@code TreeMap<K,V>} class should be considered if key ordering is a
 * requirement.
 *
 * @seeDoc shadow:standard@CanHash
 * @seeDoc shadow:utility@TreeMap
 */
class shadow:utility@
	HashMap<K is CanHash and CanEqual<K>, V is CanEqual<V>>
is  Map<K,V>
{
	/// Default number of rows a hash table starts with, 16.	
	protected constant int DEFAULT_INITIAL_CAPACITY = 16;
	/// Maximum rows the hash table can have, 1073741824.
	protected constant int MAXIMUM_CAPACITY = 1 << 30;
	/// Default load factor before the hash table is resized, 0.75.
	protected constant float DEFAULT_LOAD_FACTOR = 0.75f;
	
	/// Gets the number of key-value pairs in the map.
	get int size = 0;
	nullable Node[] table;
	float loadFactor;
	int threshold;
	int modifications = 0;
	
	/**
	 * Creates an empty {@code HashMap} with a default capacity of 16
	 * and maximum load factor of 0.75.  
	 */	
	public create()
	{
		this(DEFAULT_INITIAL_CAPACITY);
	}
	
	/**
	 * Creates an empty {@code HashMap} with the specified capacity and
	 * maximum load factor. 
	 * @param initialCapacity initial capacity of the map
	 * @param loadFactor maximum load factor before the map is resized
	 */
	public create(int initialCapacity)
	{
		this(initialCapacity, DEFAULT_LOAD_FACTOR);
	}
	
	/**
	 * Creates a {@code HashMap} with the specified initial capacity of 
	 * buckets and the specified maximum load factor before all the
	 * key-value pairs are re-hashed.  Note that the capacity will always
	 * be increased to the next power of 2 if it is not a power of 2.
	 * @param initialCapacity initial number of buckets in the hash table
	 * @param loadFactor maximum load factor (buckets / keys) before all
	 * key-value pairs are re-hashed
	 */
	public create(int initialCapacity, float loadFactor)
	{
		int capacity = 1;
		while( capacity < initialCapacity and capacity < MAXIMUM_CAPACITY)
			capacity <<= 1;
		table = Node:null[capacity];
		this:loadFactor = loadFactor;
		threshold = cast<int>(capacity * loadFactor);
	}
	
	/*
	 * Resizes the map so that it can hold the new capacity, which must be a
	 * power of 2. 
	 * @param newCapacity new capacity of the map
	 */
	protected resize(int newCapacity) => ()
	{		
		if(table->size == MAXIMUM_CAPACITY)
		{
			threshold = int:MAX;
			return;
		}
		
		nullable Node[] newTable = Node:null[newCapacity];
		int index;
		int hash;		
		
		for( int i = 0; i < table->size; i += 1 )
		{
			if( table[i] !== null )
			{ 
				nullable Node next = table[i];
				while( next !== null )
				{
					Node node = check(next);
					(index, hash) = findIndex( node->key, newCapacity );				
					newTable[index] = Node:create(hash, node->key, node->value, newTable[index]);
					next = node->next;
				}
			}
		}
		
		table = newTable;
		threshold = cast<int>(newCapacity * loadFactor);		
	}
	
	// Node for the linked-lists in each bucket.	
	private class Node
	{
		immutable get int hash;
		get K key;
		get set V value;
		get set nullable Node next = null;

		public create( int initialHash, K initialKey, V initialValue )
		{
			this( initialHash, initialKey, initialValue, null);
		}
		
		public create( int initialHash, K initialKey, V initialValue, nullable Node after )
		{
			hash = initialHash;
			key = initialKey;
			value = initialValue;			
			next = after;
		}
		
		public readonly toString() => (String)
		{
			return key # "=" # value;		
		}
	}
	
	/*
	 * Finds the hash value and index for a given key based on the provided
	 * length.
	 */
	private readonly findIndex( K key, int length ) => ( int index, int hash )
	{
		uint temp = key->hash;
		temp ^= (temp >> 20) ^ (temp >> 12);
		int hash = cast<int>(temp ^ (temp >> 7) ^ (temp >> 4));
		return ( hash & (length - 1), hash );	
	}
	
	/**
     * Checks whether or not the map is empty.
     * @return {@code true} if the map is empty
     */
    public readonly isEmpty() => (boolean empty)
    {
        return size == 0;
    }	

	/**
	 * Retrieves the value associated with the key.
	 * If the key is not present, {@code null} is returned. This operation
	 * runs in constant or near-constant time.  
	 * @param key key to find
	 * @return value at key location or {@code null} if not found
	 */
	public index( K key ) => ( nullable V value )
	{		
		try
		{
			nullable Node node = findKey(key);
			return check(node)->value;
		}
		recover
		{			
			return null;
		}
	}
	
	/**
	 * Stores value object in the location associated with the key. This
	 * operation runs in constant time in the best case and linear (but
	 * amortized constant) time if adding triggers a table resize.
	 * @param key key location
	 * @param value value to store
	 */ 
	public index( K key, V value ) => ()
	{
		add(key, value);
	}

	/**
	 * Stores value object in the location associated with the key and returns
	 * the old value if there was one at that location. This operation runs
	 * in constant time in the best case and linear (but amortized constant)
	 * time if adding triggers a table resize.  
	 * @param key key location
	 * @param value value to store
	 * @return old value at location or {@code null} if key was not already
	 * present
	 */ 
	public add( K key, V value ) => ( nullable V existing )
	{	
		( int index, int hash ) = findIndex(key, table->size);
		try
		{
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				current = check(current->next);
			V existing = current->value;
			current->value = value;
			return existing;
		}
		recover
		{
			table[index] = Node:create(hash, key, value, table[index]);
			modifications += 1;
			size += 1;			
			if( size > threshold )
				resize(2 * table->size);			
			return null;
		}
	}
	
	/*
	 * Finds Node associated with a key or null if not found.	 
	 */ 
	private readonly findKey( K key ) => ( nullable Node )
	{
		( int index, int hash ) = findIndex(key, table->size);
		try
		{
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				current = check(current->next);
			return current;
		}
		recover
		{			
			return null;
		}
	}
	
	/**
	 * Removes the key-value pair associated with the key location. This
	 * operation runs in constant time or near-constant time.	   
	 * @param key key to remove
	 * @return value being removed or {@code null} if not present
	 */
	public remove( K key ) => ( nullable V removed )
	{	
		( int index, int hash ) = findIndex(key, table->size);
		try
		{
			nullable Node last = null;
			Node current = check(table[index]);
			while ( current->hash != hash and current->key != key )
				( last, current ) = ( current, check(current->next) );				
			V removed = current->value;
			try
			{
				check(last)->next = current->next;
			}
			recover
			{
				table[index] = current->next;
			}
			modifications += 1;
			return removed;
		}
		recover
		{
			return null;
		}
	}
	
	/**
	 * Checks to see if the map contains a key. This operation runs in
	 * constant time or near-constant time.	   
	 * @param key key to find
	 * @return {@code true} if present
	 */
	public readonly containsKey( K key ) => ( boolean found )
	{		
		return findKey(key) !== null;
	}
	
	/**
	 * Checks to see if the map contains a particular value.  This operation
	 * runs in time linear in the capacity of the hash table.	   
	 * @param value value to find
	 * @return {@code true} if present
	 */
	public readonly containsValue( V value ) => ( boolean found )
	{		
		foreach(V element in this)
		{
			if( value == element )
				return true;
		}
		return false;
	}

	/**
	 * Creates an iterator to iterate over all the values in the map.	   
	 * @return iterator
	 */
	public readonly iterator() => ( Iterator<V> )
	{
		return HashMapIterator:create();
	}
	
	/**
	 * Removes all entries from the map and resets the capacity to default.
	 * @return map after being cleared
	 */
	public clear() => ( HashMap<K,V> )
	{
		size = 0;
		table = Node:null[DEFAULT_INITIAL_CAPACITY];
		threshold = cast<int>(table->size * loadFactor);
		modifications += 1;
		return this;
	}
	
	/**
	 * Produces a {@code String} representation of the map, listing all
	 * key-value pairs in an unspecified order.
	 * @return {@code String} representation 
	 */
	public readonly toString() => (String)
	{
		var output = MutableString:create("{");
		boolean first = true;
		for( int i = 0; i < table->size; i += 1 )
		{
			nullable Node node = table[i];
			while( node !== null )
			{
				if( first )
					first = false;
				else
					output.append(", ");
				output.append(node);
				
				node = check(node)->next;							
			}
		}		
		output.append("}");
		return output.toString();
	}	
	
	/*
	 * Iterator that walks over the hash table and through the linked list at
	 * each index.
	 */
	private class HashMapIterator is Iterator<V>
	{
		int index = 0;
		nullable Node current;
		int expectedModifications = modifications;
		public create()
		{
			current = next(null);
		}
		private next( nullable Node position ) => ( nullable Node )
		{		
			try
			{				
				position = check(position)->next;
			}
			recover{}
		
			while( position === null and index < table->size )
			{				
				position = table[index];				
				index += 1;					
			}
			
			return position; //returns null if nothing left			
		}

		private readonly checkForModifications() => ()
		{
			if ( modifications != expectedModifications )
				throw IllegalModificationException:create();
		}

		public readonly hasNext() => ( boolean )
		{
			checkForModifications();
			return current !== null;
		}

		public next() => ( V value )
		{
			checkForModifications();
			try
			{				 
				(V value, current) = ( check(current)->value, next(current) );
				return value;
			}
			recover
			{
				throw NoSuchElementException:create();
			}			
		}
	}
}
