class shadow:utility@
	HashSet<V is CanHash and CanEqual<V>>
is  Set<V>
{
	HashMap<V,V> map;
	
	protected constant int DEFAULT_INITIAL_CAPACITY = 16;	
	protected constant float DEFAULT_LOAD_FACTOR = 0.75f;
	
	public create()
	{
		this(DEFAULT_INITIAL_CAPACITY);
	}
	
	public create(int initialCapacity)
	{
		this(initialCapacity, DEFAULT_LOAD_FACTOR);
	}
	
	public create(int initialCapacity, float loadFactor)
	{
		map = HashMap<V,V>:create(initialCapacity, loadFactor);		
	}	

	public index( V value ) => ( boolean found )
	{
		return map.containsKey(value);
	}
	public index( V value, boolean add ) => ()
	{
		if ( add )
			map[value] = value;
		else
			map.remove(value);
	}

	public add( V value ) => ( boolean added )
	{		
		//returns true if item newly added (no old item)
		return map.add( value, value ) === null;
	}
	
	public remove( V value ) => ( boolean removed )
	{	
		//returns true if item was present in the set (some existing item)
		return map.remove(value) !== null;
	}
	
	public readonly contains( V value ) => ( boolean found )
	{		
		return map.containsKey(value);
	}

	public readonly iterator() => ( Iterator<V> )
	{
		return map.iterator();
	}
	
	public clear() => ()
	{
		map.clear();
	}
	
	public readonly get size() => (int)
	{
		return map.size();	
	}
	
	public readonly toString() => (String)
	{
		var output = MutableString:create("{");
		boolean first = true;
		foreach(V value in map)
		{			
			if( first )
				first = false;
			else
				output.append(", ");
			output.append(value);
		}		
		output.append("}");
		return output.toString();
	}	
}
