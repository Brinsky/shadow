/**
 * Class {@code LinkedList<V>} stores a list of elements of type {@code V},
 * implemented with a circular, doubly linked list as internal storage.
 */
class shadow:utility@
	LinkedList<V>
is  List<V>
and Deque<V>
{
	/// Gets size of the list.
	get long sizeLong = 0L;
	
	Node<V> header = Node<V>:create();
	long modifications = 0L;
	Equate<V> equater;
	
	public readonly get size() => (int)
	{
		return cast<int>(sizeLong);
	}
	
	public create()
	{
		this(DefaultEqualizer<V>:create());
	}
	
	public create(Equate<V> equater)
	{
		this:equater = equater;
	}

	private class Node<V>
	{
		get Node<V> prev = this, next = this;
		get set nullable V value = null;
		LinkedList<V> linkedList;
		
		public create(LinkedList<V> linkedList)
		{ 
			this:linkedList = linkedList;	
		}
		public create(LinkedList<V> linkedList,  V initialValue, Node<V> after )
		{
			this:linkedList = linkedList;
			( after:prev:next, prev,       next,  after:prev ) =
			( this,            after:prev, after, this       );
			value = initialValue;
			linkedList:sizeLong += 1L;
			linkedList:modifications += 1L;
		}
		public set value( V initialValue ) => ()
		{
			value = initialValue;
			linkedList:modifications += 1L;
		}
		public clear() => ()
		{
			( prev, next ) = ( this, this );
			linkedList:sizeLong = 0L;
			linkedList:modifications += 1L;
		}
		public delete() => ()
		{
			( prev:next, next:prev ) = ( next, prev );
			sizeLong -= 1L;
			modifications += 1L;
		}
	}
	
	/*
	 * Finds the Node at location index, starting from the beginning or end,
	 * depending on which is quicker.
	 */
	private readonly findIndex( long index ) => ( Node<V> node )
	{
		if ( cast<ulong>(index) >= cast<ulong>(sizeLong) )
			throw IndexOutOfBoundsException:create(index);
		Node<V> current = header;
		if ( index < sizeLong / 2 )
		{
			while ( index >= 0L )
			{
				current = current->next;
				index -= 1L;
			}
		}
		else
		{
			while ( index != sizeLong )
			{
				current = current->prev;
				index += 1L;
			}
		}
		return current;
	}
	
	
	// Finds a Node storing the given value and returns it and its index.
	private readonly findNode( V value ) => ( long index, nullable Node<V> node )
	{
		long index = 0L;
		Node<V> current = header;		

		while (true)
		{
			current = current->next;
			if (current === header) {
				return ( -1L, null );
			}
			
			if(equater.equal(value, check(current->value))) {
				return ( index, current );
			}
			
			index += 1L;
		}
	}
	
	/**
	 * Checks whether or not the list is empty.
	 * @return {@code true} if the list is empty
	 */
	public readonly isEmpty() => ( boolean )
	{
		return sizeLong == 0L;
	}

	/**
	 * Retrieves the element at the given index. Legal indexes are from 0
	 * to one less than the size of the list. This operation takes linear
	 * time in the worst case.   
	 * @param index location of element
	 * @return element
	 * @throws IndexOutOfBoundsException if an illegal index is specified
	 */	
	public readonly index( long index ) => ( V element )
	{
		return check(findIndex(index)->value);
	}
	
	/**
	 * Stores an element into the given index. Legal indexes are from 0
	 * to the size of the list.  If an element is stored into the index
	 * corresponding to the size of the list, the list's size will increase
	 * by one. This operation is linear time in the worst case.	  	   
	 * @param index location of element
	 * @param value value of element	 
	 * @throws IndexOutOfBoundsException if an illegal index is specified
	 */
	public index( long index, V value ) => ()
	{
		if ( index == size )
			add(value);
		else
			findIndex(index)->value = value;
	}

	/**
	 * Adds an element to the end of the list. This operation is constant
	 * time.	 
	 * @param value value of element
	 * @return list after the add
	 */
	public add( V value ) => ( LinkedList<V> )
	{
		Node:create(value, header);
		return this;
	}
	
	/**
	 * Removes the first occurrence of an element. This operation is linear
	 * time in the worst case.
	 * @param value value of element to remove
	 * @return {@code true} if the element was found and removed	 
	 */	
	public remove( V value ) => ( boolean success )
	{
		try
		{
			nullable Node node;
			(, node) = findNode(value);
			check(node).delete();
			return true;
		}
		recover
		{
			return false;
		}
	}
	
	/**
	 * Removes the element at the given index. This operation is linear time
	 * in the worst case.
	 * @param index index of element to remove
	 * @return element being removed
	 * @throws IndexOutOfBoundsException if an illegal index is specified
	 */	
	public delete( int index ) => ( V value )
	{
		Node node = findIndex(index);
		V value = check(node->value);
		node.delete();
		return value;
	}
	
	/**
	 * Finds the first index where a particular element is present. If the
	 * element is not present, -1 will be returned. 	   
	 * @param value element to search for
	 * @return index of element or -1 if not found
	 */
	public readonly indexOf( V value ) => ( int index )
	{		
		(int index, ) = findNode(value);
		return index;
	}
	
	
	/**
	 * Checks to see if the list contains a particular element.	   
	 * @param value element to search for
	 * @return {@code true} if present
	 */
	public readonly contains( V value ) => ( boolean found )
	{		 
		return indexOf(value) != -1;
	}
	
	/**
	 * Removes all elements from the list. This operation is
	 * constant time.	 
	 * @return list after being cleared	 	   
	 */	
	public clear() => ( LinkedList<V> )
	{
		header.clear();
		return this;
	}

	/**
	 * Creates an iterator to iterate over all the values in the list.	   
	 * @return iterator
	 */
	public readonly iterator() => ( Iterator<V> )
	{
		return LinkedListIterator:create();
	}
	
	/**
	 * Adds an element to the beginning of the list. This operation is
	 * constant time.
	 * @param element element to be added
	 * @return list after the element is added	   
	 */
	public addFirst( V element ) => ( LinkedList<V> )
	{
		Node node = findIndex( 0 );
		Node:create( element, node );
		return this;
	}
	
	/**
	 * Adds an element to the end of the list. This operation is
	 * constant time.
	 * @param element element to be added
	 * @return list after the element is added	   
	 */
	public addLast( V element ) => ( LinkedList<V> )
	{
		return add( element );
	}
	
	/**
	 * Gets the element at the beginning of the list. This operation is
	 * constant time.
	 * @return first element in the list
	 * @throws NoSuchElementException if the list is empty  
	 */
	public readonly getFirst() => (V element )
	{
		if( size == 0 )
			throw NoSuchElementException:create(); 
		return index(0);
	}
	
	/**
	 * Gets the element at the end of the list. This operation is constant
	 * time.
	 * @return last element in the list
	 * @throws NoSuchElementException if the list is empty  
	 */
	public readonly getLast() => (V element )
	{
		return index(size - 1);
	}
	
	/**
	 * Removes the element at the beginning of the list. This operation is
	 * constant time.	 
	 * @return element being removed
	 * @throws NoSuchElementException if the list is empty	   
	 */
	public removeFirst() => (V element )
	{
		if( size == 0 )
			throw NoSuchElementException:create();
		return delete(0);
	}
	
	/**
	 * Removes the element from the end of the list. This operation is
	 * constant time.	 
	 * @return element being removed
	 * @throws NoSuchElementException if the list is empty	   
	 */
	public removeLast() => ( V element )
	{
		if( size == 0 )
			throw NoSuchElementException:create();
		return delete(size - 1);
	}	
	
	/**
	 * Produces a {@code String} representation of the list, listing all
	 * elements in order.
	 * @return {@code String} representation 
	 */
	public readonly toString() => ( String )
	{	
		var string = MutableString:create("[");
		boolean first = true;
		
		foreach( V value in this )
		{
			if( first )
				first = false;
			else
				string.append(", ");
			string.append(#value);
		}
		
		return #string.append("]");
	}
	
	/*
	 * Simple iterator class uses a Node reference index to keep track of the
	 * current location in the list.
	 */
	private class LinkedListIterator<V> is Iterator<V>
	{
		Node<V> current;
		long expectedModifications;
		LinkedList<V> linkedList;
		
		public create(LinkedList<V> linkedList)
		{
			this:linkedList = linkedList;
			current = header->next;
			expectedModifications = linkedList:modifications;
		}

		private readonly checkForModifications() => ()
		{
			if ( modifications != expectedModifications )
				throw IllegalModificationException:create();
		}
		
		public readonly hasNext() => ( boolean )
		{
			checkForModifications();
			return current !== header;
		}
		
		public next() => ( V value )
		{
			checkForModifications();
			if ( !hasNext() )
				throw IndexOutOfBoundsException:create();
						
			V value = check(current->value);			
			current = current->next;			
			return value;			
		}
	}
}
