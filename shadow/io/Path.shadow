/**
 * Class {@code Path} provides utilities for managing a path to a file in
 * the operating system.
 */
immutable class shadow:io@Path
{
	String[] components;
	/**
	 * Creates a {@code Path} object corresponding to the path specified by
	 * the given {@code String}.
	 * @param path path to file 
	 */
	public create( String path )
	{
		int index = 0, count = 1, start = 0;
		for ( int i = 0; i < path->size; i += 1 )
		{
			if ( path.index(i) == cast<byte>(this->separator) )
			{
				if ( i != start )
					count += 1;
				start = i + 1;
			}
		}
		Console.printLine("Before freeze");
		components = freeze(String:create[count]);
		Console.printLine("After freeze");
		

		start = 0;
		for ( int i = 0; i < path->size; i += 1 )
		{
			if ( path.index(i) == cast<byte>(this->separator) )
			{
				if ( i != start )
				{
					String part = path.substring(start, i);
					Console.printLine(part);
					components[index] = part;
					index += 1;
				}
				start = i + 1;
			}
		}
		if ( index != count )		
			components[index] = path.substring(start);

		Console.printLine("End of path create");

	}
	
	/**
	 * Gets the operating system-specific UTF-8 code point corresponding to
	 * the path separator, {@code \} in Windows and {@code /} in Linux and
	 * Mac OS X.
	 * @return separator character 
	 */
	public native locked get separator() => ( code );
	
	/**
	 * Returns a {@code String} representation of the path.
	 * @return path as a {@code String}
	 */
	public readonly toString() => ( String )
	{
		
	
		Console.printLine("start path to string");
		
		
		if ( components->size == 0 )
			return "";
		Console.printLine("Make mutable string");
		Console.printLine(Object:create());
		
		var string = MutableString:create(components[0]);
		Console.printLine("start loop");
		
		Console.debugPrint(string->size);
		for ( int i = 1; i < components->size; i += 1 ) {
			Console.printLine("iterate");
			string.append(this->separator).append(components[i]);
		}
		Console.printLine("do to string");
		Console.printLine(Object:create());
		
		String output = #string;
		Console.printLine("return result");
		return output;
	}
}
