immutable class shadow:io@Path
{
	String[] components;
	public create()
	{
	}
	public create( String path )
	{
		int index = 0, count = 1, start = 0;
		for ( int i = 0; i < path->size; i += 1 )
		{
			if ( path.index(i) == cast<byte>(this->separator) )
			{
				if ( i != start )
					count += 1;
				start = i + 1;
			}
		}
		components = freeze(String:create[count]);
		start = 0;
		for ( int i = 0; i < path->size; i += 1 )
		{
			if ( path.index(i) == cast<byte>(this->separator) )
			{
				if ( i != start )
				{
					components[index] = path.substring(start, i);
					index += 1;
				}
				start = i + 1;
			}
		}
		if ( index != count )		
			components[index] = path.substring(start);
	}
	public native get separator() => ( code );
	public readonly toString() => ( String )
	{
		if ( components->size == 0 )
			return "";
		var string = MutableString:create(components[0]);
		for ( int i = 1; i < components->size; i += 1 )
			string.append(this->separator).append(components[i]);
		return #string;
	}
}
