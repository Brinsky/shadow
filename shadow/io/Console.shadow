/**
 * Singleton {@code Console} provides methods for reading text data from
 * {@code stdin} and writing text data to {@code stdout} and {@code stderr}.
 * Unlike other singletons, {@code Console} is automatically created at the
 * beginning of a Shadow console program, since its functionality is used for
 * reporting uncaught exceptions. Some {@code Console} behavior is platform
 * specific.
 */
singleton shadow:io@Console
{
	private readonly extern __ShadowConsole_Initialize() => ();
	
	private readonly extern __ShadowConsole_Print(String str) => ();
	private readonly extern __ShadowConsole_PrintLine() => ();
	
	private readonly extern __ShadowConsole_PrintError(String str) => ();
	private readonly extern __ShadowConsole_PrintErrorLine() => ();
	
	boolean wasLF = false;
	
	/**
	 * Creates a new {@code Console}.
	 */
	public create()
	{
		__ShadowConsole_Initialize();
	}

	/**
	 * Reads the next line of text from {@code stdin}, stopping when a new line
	 * or line feed character is reached.
	 * @return line as a {@code String}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readLine() => ( String, boolean eof )
	{
		var string = MutableString:create();
		( code c, boolean eof ) = readCode();
		if ( wasLF and c == '\n' )
			( c, eof ) = readCode();
		while ( c != '\n' and c != '\r' and !eof )
		{
			string.append(c);
			( c, eof ) = readCode();
		}
		wasLF = ( c == '\r' );
		return ( #string, eof );
	}
	
	/**
	 * Reads the next white-spaced delimited text from {@code stdin}, stopping
	 * when a space, a tab, a new line, or a line feed character is reached.	 
	 * @return text as a {@code String}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readString() => ( String, boolean eof )
	{
		var string = MutableString:create();
		( code c, boolean eof ) = readCode();
		while( !eof and (c == '\n' or c == '\r' or c == ' ' or c == '\t'))
			( c, eof ) = readCode();
		while( !eof and c != '\n' and c != '\r' and c != ' ' and c != '\t')
		{
			string.append(c);
			( c, eof ) = readCode();
		}
		wasLF = ( c == '\r' );
		return ( #string, eof );
	}
	
	/**
	 * Reads the next UTF-8 code point from {@code stdin}.	 	 
	 * @return character as a {@code code}
	 * @return {@code true} if the end of the file was reached 
	 */
	public readCode() => ( code, boolean eof )
	{
		int value;
		boolean eof;
		( value, eof ) = readByte();
		if ( value < 0 )
		{
			int bytes = 0;
			byte mask = 1y << 7y >> 1y;
			while ( value >= mask )
			{
				bytes += 1;
				mask >>= 1y;
			}
			value &= ~mask;
			while ( bytes > 0 )
			{
				value <<= 6;
				byte b;
				( b, eof ) = readByte();
				value |= b & 0b00111111y;
				bytes -= 1;
			}
		}
		return ( cast<code>(value), eof );
	}
	
	/**
	 * Reads the next byte from {@code stdin}.	 	 
	 * @return next byte
	 * @return {@code true} if the end of the file was reached 
	 */
	public native readByte() => (byte, boolean eof);

	/**
	 * Prints an object's {@code String} representation to {@code stdout}.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public print( nullable Object value ) => ( Console )
	{
		return print(#value);
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stdout},
	 * followed by a new line character.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printLine( nullable Object value ) => ( Console )
	{
		return print(value).printLine();
	}
	
	/**
	 * Prints a {@code String} value to {@code stdout}.	 	 
	 * @param value {@code String} to print
	 * @return {@code Console} object 
	 */
	public print(String value) => (Console)
	{
		__ShadowConsole_Print(value);
		return this;
	}
	
	/**
	 * Prints a new line character to {@code stdout}.
	 * @return {@code Console} object 
	 */
	public printLine() => (Console)
	{
		__ShadowConsole_PrintLine();
		return this;
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stderr}.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printError( nullable Object value ) => ( Console )
	{
		return printError(#value);
	}
	
	/**
	 * Prints an object's {@code String} representation to {@code stderr},
	 * followed by a new line character.	 	 
	 * @param value object to print
	 * @return {@code Console} object 
	 */
	public printErrorLine( nullable Object value ) => ( Console )
	{
		return printError(value).printErrorLine();
	}
	
	/**
	 * Prints a {@code String} value to {@code stderr}.	 	 
	 * @param value {@code String} to print
	 * @return {@code Console} object 
	 */
	public printError(String value) => (Console)
	{
		__ShadowConsole_PrintError(value);
		return this;
	}
	
	/**
	 * Prints a new line character to {@code stdout}.
	 * @return {@code Console} object 
	 */
	public printErrorLine() => (Console)
	{
		__ShadowConsole_PrintErrorLine();
		return this;
	}
}
