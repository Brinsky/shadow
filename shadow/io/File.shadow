/**
 * Class {@code File} provides utilities for interacting with a file in the
 * operating system, such as creating a new file, deleting an existing file,
 * reading from a file, and writing to a file.
 */
class shadow:io@
	File
is	CanRead
and CanWrite
and CanClose
{
	/// handle contains OS-specific file handle information 
	long handle = -1L;
	get Path path;
	
	private readonly extern __shadowFile_Exists(String path) => (boolean);
	private readonly extern __shadowFile_Close(long handle) => ();
	
	/**
	 * Creates a {@code File} object associated with the file on the given
	 * path.
	 * @param path of the file
	 */
	public create( String path )
	{
		this(Path:create(path));
	}
	
	/**
	 * Creates a {@code File} object associated with the file specified by the
	 * given {@code Path} object.
	 * @param path of the file
	 */
	public create( Path path )
	{
		this:path = path;
		
		var mess1 = MutableString:create();
		var mess2 = MutableString:create();
	}
	
	/**
	 * Closes the {@code File} on destroy.
	 */
	public destroy
	{
		close();
	}
	
	/**
	 * Returns a {@code String} representation of the path of this file.
	 */
	public readonly toString() => ( String )
	{
		return #path;
	}

	/**
	 * Determines a file in the operating system matches the
	 * path in this {@code File} object.
	 * @return {@code true} if the file exists
	 */	
	public readonly get exists() => ( boolean )
	{
		return __shadowFile_Exists(#path);
	}
	
	/**
	 * Creates or deletes a file in the operating system with the path of 
	 * this {@code File} object.
	 * @param createOrDelete {@code true} if the file should be created,
	 * {@code false} if it should be deleted
	 */	
	public native set exists( boolean createOrDelete ) => ();
	
	/**
	 * Gets the current position of the read/write pointer inside the file. 
	 * @return position in file
	 */	
	public native get readonly position() => ( long );
	
	/**
	 * Sets the current position of the read/write pointer inside the file. 
	 * @param position in file
	 */
	public native set position( long position ) => ();
	
	/**
	 * Gets the size of the file in bytes. 
	 * @return file size
	 */
	public native get readonly size() => ( long );
	
	/**
	 * Sets the size of the file in bytes, extending or truncating it. 
	 * @param new file size
	 */
	public native set size( long size ) => ();
	
	/**
	 * Reads data from the file into the buffer and updates the read pointer
	 * location.	     
	 * @param buffer array of {@code byte} values to hold file data
	 * @return number of {@code byte} values successfully read, always less
	 * than or equal the length of the buffer
	 */
	public native readonly read( byte[] buffer ) => ( int );
	
	/**
	 * Writes data from the buffer into the file and updates the write pointer
	 * location.	     
	 * @param buffer array of {@code byte} values to be written
	 * @return number of {@code byte} values successfully written
	 */
	public native write( readonly byte[] buffer ) => ( int );
	
	/**
	 * Closes the file.
	 */
	public close() => ()
	{
		if(handle != -1L) {
			__shadowFile_Close(handle);
			handle = -1L;
		}
	}
	
	// C FRAMEWORK EXTENSIONS
	private extern _shadowFile_SetHandle(long handle) => ()
	{
		this:handle = handle;
	}
}
