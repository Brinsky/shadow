locked class shadow:natives@
	AbsoluteTime
{
	private native readonly getAbsoluteTime() => (int sec, int usec);
	private native readonly setAbsoluteTime(Pointer time, int sec, int nsec) => ();
	
	private native readonly get handleSize() => (int);
	
	Handle handle;
	
	public create(int sec, int nsec) 
	{
		handle = Handle:create(this->handleSize);
		
		try {
			addTimeToNow(sec, nsec);
		} catch(Exception e) {
			handle.free();
			throw e;
		}
	}
	
	public create(int ms)
	{
		handle = Handle:create(this->handleSize);
		
		try {
			if(ms >= 1000) {
				int sec = ms / 1000;
				int nsec = (ms - sec * 1000) * 1000000;
				addTimeToNow(sec, nsec);
			}
			else {
				addTimeToNow(0, ms * 1000000);
			}
		} catch(Exception e) {
			handle.free();
			throw e;
		}
	}
	
	public addTimeToNow(int sec, int nsec) => ()
	{
		if(!handle->isValid) {
			throw InvalidOperationException:create("This AbsoluteTime is no longer valid.");
		}
		
		if(sec < 0) {
			throw IllegalArgumentException:create("The argument {sec} should be bigger than or equal to zero");
		}
		
		if(nsec < 0 or nsec >= 1000000000) {
			throw IllegalArgumentException:create("The argument {nsec} should lie between zero and 999,999 inclusive.");
		}
		
		(int secAbs, int usecAbs) = getAbsoluteTime();
		sec += secAbs;
		nsec += usecAbs * 1000;
		
		if(nsec >= 1000000000) {
			nsec -= 1000000000;
			sec += 1;
		}
		
		setAbsoluteTime(handle->ptr, sec, nsec);
	}
	
	public readonly get ptr() => (Pointer ptr) {
		return handle->ptr;
	}
	
	public free() => ()
	{
		if(handle->isValid) {
			handle.free();
		}
	}
}