/**
 * Class {@code Pointer} is used to hold a pointer to a block of memory intialized on the heap.
 * This eases interaction between Shadow, C and native LLVM methods.
 *
 * @author Claude Abounegm
 *
 * @seeDoc shadow:natives@AbsoluteTime
 * @seeDoc shadow:natives@Mutex
 * @seeDoc shadow:natives@Signaler
 * @seeDoc shadow:standard@Thread
 */
locked immutable class shadow:natives@
	Pointer
{
	private extern __ShadowPointer_Free(long address) => ();
	private native invalidateAddress() => ();
	
	long address;
	boolean shouldFree;
	
	public create()
	{
		this(0, false);
	}
	
	private create(long address, boolean shouldFree)
	{
		this:address = address;
		this:shouldFree = shouldFree;
	}

	/// @unused	
	private createNative(long address, boolean shouldFree) => (Pointer)
	{
		return Pointer:create(address, shouldFree);
	}

	/**
	* Gets whether this pointer is valid. i.e. has not been freed.
	*
	* @return {@code true} if this pointer points to valid memory; otherwise, {@code false}.
	*/
	public get isValid() => (boolean)
	{
		return (address != 0);
	}
	
	/**
	* Throws an exception if this {@code Pointer} has been freed.
	*
	* @throws FreedResourceException if this resource has been freed.
	*/
	public assertValid(String className) => ()
	{
		if(!isValid()) {
			throw FreedResourceException:create(className);
		}
	}
	
	/**
	* Frees the memory allocated by this pointer. Calling this method more than once does
	* not have any side effects.
	*/
	public free() => ()
	{
		if(isValid()) {
			if(shouldFree) {
				__ShadowPointer_Free(address);
			}
			
			invalidateAddress();
		}
	}
	
	/// @unused
	private getAddressNative() => (long)
	{
		if(!isValid()) {
			throw FreedResourceException:create("Pointer");
		}

		return address;
	}
	
	public destroy
	{
		free();
	}
}