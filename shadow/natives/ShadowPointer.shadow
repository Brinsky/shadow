/**
 * Class {@code ShadowPointer} is used to initialize a block of memory on the heap, and
 * pass it to native LLVM code. This eases interaction between Shadow an native LLVM methods.
 *
 * @author Claude Abounegm
 *
 * @seeDoc shadow:natives@AbsoluteTime
 * @seeDoc shadow:natives@Mutex
 * @seeDoc shadow:natives@Signaler
 * @seeDoc shadow:standard@Thread
 */
locked immutable class shadow:natives@
	ShadowPointer
{
	private native readonly allocMemory(int size) => (long address);
	private native readonly freeMemory() => ();
	private native readonly invalidateHandle(immutable LongPointer ptr) => ();
	
	immutable LongPointer pointer;
	
	/**
	* Allocates a block of memory on the heap which is {@code size} bytes long, 
	* and initializes all its bits to zero.
	*
	* @param {@code size} The size, in bytes, that needs to be allocated on the heap.
	*/
	public create(int size)
	{
		pointer = freeze(LongPointer:create(size));
	}
	
	/**
	* Initializes a new, invalid, ShadowPointer. This does not allocate any memory.
	*/
	public create()
	{
		pointer = freeze(LongPointer:create(0L));
	}
	
	/**
	* Gets whether this pointer is valid. i.e. has not been freed.
	*
	* @return {@code true} if this pointer points to valid memory; otherwise, {@code false}.
	*/
	public locked get isValid() => (boolean)
	{
		return (pointer.valid());
	}
	
	/**
	* Throws an exception if this {@code Pointer} has been freed.
	*
	* @throws FreedResourceException if this resource has been freed.
	*/
	public locked assertValid(String className) => ()
	{
		if(!isValid()) {
			throw FreedResourceException:create(className);
		}
	}
	
	/**
	* Frees the memory allocated by this pointer. Calling this method more than once does
	* not have any side effects.
	*/
	public locked free() => ()
	{
		if(isValid()) {
			freeMemory();
			invalidateHandle(pointer);
		}
	}
	
	private getAddressNative() => (long)
	{
		return pointer->address;
	}
	
	private create(long address)
	{
		pointer = freeze(LongPointer:create(address));
	}
	
	private createNative(long address) => (ShadowPointer)
	{
		return ShadowPointer:create(address);
	}

	private class LongPointer
	{
		long address = -1;
		
		public create(int size)
		{
			if(size <= 0) {
				throw IllegalArgumentException:create("The {size} of the memory to be allocated should be greater than zero.");
			}

			this:address = allocMemory(size);
			if(this:address == 0) {
				throw OutOfMemoryException:create();
			}
		}
		
		public create(long address)
		{
			if(address != 0) {
				this:address = address;
			}
		}
		
		public readonly get address() => (long)
		{
			if(!valid()) {
				throw FreedResourceException:create("Pointer");
			}
			
			return address;
		}
		
		public readonly valid() => (boolean)
		{
			return (address != -1);
		}
		
		private invalidateNative() => ()
		{
			this:address = -1;
		}
	}
}