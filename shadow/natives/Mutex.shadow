/**
 * Class {@code Mutex} is a way to get Mutual-Exclusion in Shadow.
 *
 * @author Claude Abounegm
 */
locked immutable class shadow:natives@
	Mutex
{
	private readonly native lockMutex(Pointer ptr) => (int);
	private readonly native unlockMutex(Pointer ptr) => (int);
	private readonly native initMutex(Pointer ptr) => (int);
	private readonly native destroyMutex(Pointer ptr) => (int);
	
	private readonly native setOwner(immutable Owner owner, nullable Thread t) => ();
	private readonly native get handleSize() => (int);

	get Pointer ptr;
	immutable Owner owner;
	
	public create()
	{
		ptr = Pointer:create(this->handleSize);
		owner = freeze(Owner:create());
		
		initMutex(ptr);
	}
	
	public lock() => ()
	{
		ptr.assertValid("Mutex");
		
		if(owner.isCurrentThread()) {
			throw MutexException:create("The current thread already owns this mutex.");
		}
		
		lockMutex(ptr);
		setOwner(owner, CurrentThread->instance);
	}
	
	public unlock() => ()
	{
		ptr.assertValid("Mutex");

		if(!owner.isCurrentThread()) {
			throw MutexException:create("This mutex is not owned by '" # CurrentThread->name # "' and cannot be unlocked.");
		}
		
		setOwner(owner, null);
		unlockMutex(ptr);
	}
	
	public takeOwnership() => ()
	{
		ptr.assertValid("Mutex");
		setOwner(owner, CurrentThread->instance);
	}
	
	public giveUpOwnership() =>()
	{
		ptr.assertValid("Mutex");
		setOwner(owner, null);
	}
	
	public free() => ()
	{
		if(ptr->isValid) {
			destroyMutex(ptr);
			ptr.free();
		}
	}
	
	private class Owner
	{
		nullable Thread owner;
		
		public create()
		{
			owner = null;
		}
		
		public readonly isCurrentThread() => (boolean)
		{
			return CurrentThread.isEqualTo(owner);
		}
		
		private setOwnerNative(nullable Thread o) => ()
		{
			owner = o;
		}
	}
}