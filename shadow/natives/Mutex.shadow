/**
 * @author Claude Abounegm
 */
locked class shadow:natives@
	Mutex
{
	private readonly native lockMutex(Pointer ptr) => (int);
	private readonly native unlockMutex(Pointer ptr) => (int);
	private readonly native initMutex(Pointer ptr) => (int);
	private readonly native destroyMutex(Pointer ptr) => (int);
	
	private readonly native setOwner(nullable Thread t) => ();
	private readonly native get handleSize() => (int);

	Handle handle;
	nullable Thread owner;
	
	public create()
	{
		handle = Handle:create(this->handleSize);
		owner = null;
		
		initMutex(handle->ptr);
	}
	
	public readonly lock() => ()
	{
		if(CurrentThread.isEqualTo(owner)) {
			throw MutexException:create("The current thread already owns this mutex.");
		}
		
		lockMutex(this->ptr);
		setOwner(CurrentThread->instance);
	}
	
	public readonly unlock() => ()
	{		
		if(!CurrentThread.isEqualTo(owner)) {
			throw MutexException:create("This mutex is not owned by '" # CurrentThread->name # "' and cannot be unlocked.");
		}
		
		setOwner(null);
		unlockMutex(this->ptr);
	}
	
	public readonly takeOwnership() => ()
	{
		setOwner(CurrentThread->instance);
	}
	
	public readonly giveUpOwnership() =>()
	{
		setOwner(null);
	}
	
	public readonly get ptr() => (Pointer ptr)
	{
		if(!handle->isValid) {
			throw InvalidStateException:create("Mutex");
		}
	
		return handle->unsafePtr;
	}
	
	public readonly free() => ()
	{
		try {
			destroyMutex(this->ptr);
			handle.free();
		} catch(Exception e) {}
	}
	
	private setOwnerNative(nullable Thread o) => ()
	{
		owner = o;
	}
}