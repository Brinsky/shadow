/**
 * @author Claude Abounegm
 */
locked class shadow:natives@
	Mutex
{
	private readonly native lockMutex(Pointer ptr) => (int);
	private readonly native unlockMutex(Pointer ptr) => (int);
	private readonly native initMutex(Pointer ptr) => (int);
	private readonly native destroyMutex(Pointer ptr) => (int);
	
	private readonly native setOwner(nullable Thread t) => ();
	private readonly native get handleSize() => (int);

	get Pointer ptr;
	nullable Thread owner;
	
	public create()
	{
		ptr = Pointer:create(this->handleSize);
		owner = null;
		
		initMutex(ptr);
	}
	
	public readonly lock() => ()
	{
		ptr.assertValid("Mutex");
		
		if(CurrentThread.isEqualTo(owner)) {
			throw MutexException:create("The current thread already owns this mutex.");
		}
		
		lockMutex(ptr);
		setOwner(CurrentThread->instance);
	}
	
	public readonly unlock() => ()
	{
		ptr.assertValid("Mutex");

		if(!CurrentThread.isEqualTo(owner)) {
			throw MutexException:create("This mutex is not owned by '" # CurrentThread->name # "' and cannot be unlocked.");
		}
		
		setOwner(null);
		unlockMutex(ptr);
	}
	
	public readonly takeOwnership() => ()
	{
		ptr.assertValid("Mutex");
		setOwner(CurrentThread->instance);
	}
	
	public readonly giveUpOwnership() =>()
	{
		ptr.assertValid("Mutex");
		setOwner(null);
	}
	
	public readonly free() => ()
	{
		if(ptr->isValid) {
			destroyMutex(ptr);
			ptr.free();
		}
	}
	
	private setOwnerNative(nullable Thread o) => ()
	{
		owner = o;
	}
}