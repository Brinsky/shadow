import shadow:utility@ArrayDeque;

/**
* @author Claude Abounegm
*/
locked class shadow:natives@
	Signaler
{
	class SignalToken
	{
		get set boolean shouldWait = true;
	}

	private native readonly initSignaler(Pointer cond) => (int);
	private native readonly destroySignaler(Pointer cond) => (int);
	
	private native readonly wait(Pointer cond, Pointer mutex) => (int);
	private native readonly timedWait(Pointer cond, Pointer mutex, Pointer time) => (int);
	private native readonly broadcast(Pointer cond) => (int);
	
	private readonly native get handleSize() => (int);
	//private native readonly signal(Pointer cond) => (int);
	
	int waitingThreads = 0;
	Mutex mutex;
	Handle condHandle;
	ArrayDeque<SignalToken> tokensQueue;
	
	public create()
	{
		mutex = Mutex:create();
		condHandle = Handle:create(this->handleSize);
		tokensQueue = ArrayDeque<SignalToken>:create();
		
		initSignaler(condHandle->ptr);
	}
	
	public get waitingThreadsCount() => (int)
	{
		mutex.lock();
		var count = waitingThreads;
		mutex.unlock();
		
		return count;
	}
	
	/**
	* Suspends the current thread until another thread calls notify() 
	* or notifyAll().
	*
	* @throws InvalidOperationException if this Signaler has been freed.
	*/
	public waitForNotify() => () 
	{
		if(!condHandle->isValid) {
			throw InvalidOperationException:create("This Signaler is no longer valid.");
		}

		mutex.lock();
		var token = SignalToken:create();
		tokensQueue.addLast(token);
		waitingThreads += 1;
		
		while(token->shouldWait) {
			// mutex unlocks when waiting
			wait(condHandle->ptr, mutex->ptr);
			// mutex locks back when finished waiting
		}
		
		waitingThreads -= 1;
		mutex.unlock();
	}
	
	/**
	* Suspends the current thread until another thread calls notify() 
	* or notifyAll(), or until the specified amount of time elapsed.
	*
	* @param time The amount of time to wait for being timing out.
	* @return {@code true} if the operation timed-out; otherwise, {@code false}.
	* @throws InvalidOperationException if this Signaler has been freed.
	*/
	public waitForNotify(TimeSpan time) => (boolean)
	{
		return waitSleep(time, true);
	}
	
	public waitForNotify(int ms) => (boolean)
	{		
		return waitSleep(TimeSpan:create(ms), true);
	}
	
	public waitForNotify(int sec, int nsec) => (boolean)
	{
		return waitSleep(TimeSpan:create(sec, nsec), true);
	}
	
	public sleep(TimeSpan time) => () 
	{
		waitSleep(time, false);
	}
	
	public sleep(int ms) => ()
	{		
		waitSleep(TimeSpan:create(ms), false);
	}
	
	public sleep(int sec, int nsec) => ()
	{
		waitSleep(TimeSpan:create(sec, nsec), false);
	}
	
	public notify() => () 
	{
		if(!condHandle->isValid) {
			throw InvalidOperationException:create("This Signaler is no longer valid.");
		}
		
		mutex.lock();
		// we would like to assure having a more or less organised wake up pattern.
		// Thus, notify should wake the threads up in the order that they went to sleep in.
		// we dequeue the first token, and broadcast to wake up all threads. However, since
		// we're in a loop, only one thread wakes up, which is the one we want.
		if(!tokensQueue.isEmpty()) {
			// we would like to avoid to notify wait which has already timedout.
			// when a wait timesout, it sets its own flag to false, so its token
			// could still be in the queue, but it is invalid and no threads are
			// listening on it. So we check for that. If the flag is false, we ignore
			// it and move on to the next one.
			SignalToken token;
			do {
				token = tokensQueue.removeFirst();
			} while(!tokensQueue.isEmpty() and !token->shouldWait);
			
			// found a valid flag, set to false, and notify it.
			token->shouldWait = false;
			
			broadcast(condHandle->ptr);
		}
		mutex.unlock();
	}
	
	public notifyAll() => ()
	{
		if(!condHandle->isValid) {
			throw InvalidOperationException:create("This Signaler is no longer valid.");
		}

		mutex.lock();
		if(!tokensQueue.isEmpty()) {
			// we set all the wait flags to false
			do {
				var token = tokensQueue.removeFirst();
				token->shouldWait = false;
			} while(!tokensQueue.isEmpty());

			// wake all the threads up
			broadcast(condHandle->ptr);
		}
		mutex.unlock();
	}
	
	public free() => ()
	{
		if(condHandle->isValid) {		
			mutex.lock();
			if(!tokensQueue.isEmpty()) {
				mutex.unlock();
				throw InvalidOperationException:create("The signaler cannot be freed when there are threads waiting on it.");
			}
			mutex.unlock();
			
			destroySignaler(condHandle->ptr);
			condHandle.free();
			mutex.free();
		}
	}
	
	private waitSleep(TimeSpan timeout, boolean listenToNotify) => (boolean)
	{
		if(!condHandle->isValid) {
			throw InvalidOperationException:create("This Signaler is no longer valid.");
		}
		
		mutex.lock();
		var time = AbsoluteTime:create(timeout);
		var token = SignalToken:create();
		
		if(listenToNotify) {
			tokensQueue.addLast(token);
		} else {
			token->shouldWait = false;
		}
		
		int retVal = 0; // retVal is not zero when the wait times out		
		waitingThreads += 1;
		while(retVal == 0 or (listenToNotify and token->shouldWait)) {
			// mutex unlocks when waiting
			retVal = timedWait(condHandle->ptr, mutex->ptr, time->ptr);
			// mutex locks back when finished waiting
		}
		waitingThreads -= 1;

		token->shouldWait = false;
		time.free();
		mutex.unlock();
		
		return (retVal != 0);
	}
}