import shadow:utility;
import shadow:io@Console;

/**
* @author Claude Abounegm
*/
locked class shadow:natives@
	Signaler
{
	class SignalToken is CanEqual<SignalToken>
	{
		get Thread thread = CurrentThread->instance;
		get boolean shouldWait = true;
		get boolean interrupted = false;

		public invalidate() => ()
		{
			shouldWait = false;
		}
		
		public interrupt() => ()
		{
			invalidate();
			interrupted = true;
		}
		
		public readonly equal(SignalToken other) => (boolean)
		{
			return (this === other);
		}
	}

	private native readonly initSignaler(Pointer cond) => (int);
	private native readonly destroySignaler(Pointer cond) => (int);
	
	private native readonly wait(Pointer cond, Pointer mutex) => (int);
	private native readonly timedWait(Pointer cond, Pointer mutex, Pointer time) => (int);
	private native readonly broadcast(Pointer cond) => (int);
	
	private readonly native get handleSize() => (int);
	
	int waitingThreads = 0;
	Mutex mutex;
	Handle condHandle;
	LinkedList<SignalToken> tokensQueue;
	LinkedList<SignalToken> sleepTokensQueue;
	
	public create()
	{
		mutex = Mutex:create();
		condHandle = Handle:create(this->handleSize);
		tokensQueue = LinkedList<SignalToken>:create();
		sleepTokensQueue = LinkedList<SignalToken>:create();
		
		initSignaler(condHandle->ptr);
	}
	
	public readonly get waitingThreadsCount() => (int)
	{
		mutex.lock();
		var count = waitingThreads;
		mutex.unlock();
		
		return count;
	}
	
	/**
	* Suspends the calling thread until another thread calls notify(),
	* notifyAll(), or interrupt(). 
	*
	* @throws InvalidStateException if this Signaler has been freed.
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public waitForNotify() => ()
	{
		if(!condHandle->isValid) {
			throw InvalidStateException:create("Signaler");
		}

		var token = SignalToken:create();

		mutex.lock();
		try {
			tokensQueue.addLast(token);
			waitingThreads += 1;

			while(token->shouldWait) {
				mutex.giveUpOwnership();
				wait(condHandle->ptr, mutex->ptr);
				mutex.takeOwnership();
			}
			
			if(token->interrupted) {
				throw InterruptedException:create();
			}
		} finally {
			waitingThreads -= 1;
			mutex.unlock();
		}
	}
	
	/**
	* Suspends the calling thread until another thread calls notify(),
	* notifyAll(), interrupt(), or for the specified amount of time elapsed.
	*
	* @param timeout The amount of time to wait before timing out.
	* @return {@code true} if the operation timed-out; otherwise, {@code false}.
	* @throws InvalidStateException if this Signaler has been freed.
	*/
	public waitForNotify(TimeSpan timeout) => (boolean)
	{
		return waitSleep(timeout, false);
	}
	
	/**
	* Suspends the calling thread until another thread calls notify(),
	* notifyAll(), interrupt(), or for the specified amount of time elapsed.
	*
	* @param millisecondsTimeout The amount of time to wait, in milliseconds, before timing out.
	* @return {@code true} if the operation timed-out; otherwise, {@code false}.
	*
	* @throws InvalidStateException if this Signaler has been freed.
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public waitForNotify(int millisecondsTimeout) => (boolean)
	{		
		return waitSleep(Time.fromMilliSeconds(millisecondsTimeout), false);
	}
	
	/**
	* Suspends the calling thread for the specified amount of time.
	*
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public sleep(TimeSpan timeout) => ()
	{
		waitSleep(timeout, true);
	}
	
	public sleep(int millisecondsTimeout) => ()
	{		
		waitSleep(Time.fromMilliSeconds(millisecondsTimeout), true);
	}
	
	public notify() => () 
	{
		if(!condHandle->isValid) {
			throw InvalidStateException:create("Signaler");
		}
		
		mutex.lock();
		try {
			// we would like to assure having a more or less organised wake up pattern.
			// Thus, notify should wake the threads up in the order that they went to sleep in.
			// we dequeue the first token, and broadcast to wake up all threads. However, since
			// we're in a loop, only one thread wakes up, which is the one we want.
			if(!tokensQueue.isEmpty()) {
				// We would like to avoid notifying a thread which has already timedout.
				// When a wait() timesout, it sets its own `shouldWait` flag to false, but 
				// does not remove itself from the queue. Thus the token could still be in queue.
				// This is an invalid token and no threads are listening on it. So we check for that. 
				// If the flag is false, we ignore it and move on to the next one.
				SignalToken token;
				do {
					token = tokensQueue.removeFirst();
				} while(!tokensQueue.isEmpty() and !token->shouldWait);
				
				// found a valid flag, set to false, and notify it.
				token.invalidate();
				
				// notify all threads, but only one thread gets unlocked.
				broadcast(condHandle->ptr);
			}
		} finally {
			mutex.unlock();
		}
	}
	
	/**
	* Wakes up all the waiting threads, which were put to sleep using {@code waitForNotify()}. 
	*/
	public notifyAll() => ()
	{
		if(!condHandle->isValid) {
			throw InvalidStateException:create("Signaler");
		}

		mutex.lock();
		try {
			while(!tokensQueue.isEmpty()) {
				tokensQueue
					.removeFirst()
					.invalidate();
				
				// notify all threads, but only one threads gets unlocked.
				broadcast(condHandle->ptr);
			}
		} finally {
			mutex.unlock();
		}
	}
	
	public interrupt(Thread thread) => ()
	{
		if(!condHandle->isValid) {
			throw InvalidStateException:create("Signaler");
		}
		
		mutex.lock();
		try {
			if(!findThreadAndInterrupt(thread)) {
				throw InvalidOperationException:create("The thread could not be found, and thus could not be interrupted.");
			}
			
			broadcast(condHandle->ptr);
		} finally {
			mutex.unlock();
		}
	}
	
	public free() => ()
	{
		if(condHandle->isValid) {
			// we notify any waiting thread first
			notifyAll();
			
			// destroy errrything muahahahah
			destroySignaler(condHandle->ptr);
			condHandle.free();
			mutex.free();
		}
	}
	
	private waitSleep(TimeSpan timeout, boolean sleepOnly) => (boolean)
	{
		if(!condHandle->isValid) {
			throw InvalidStateException:create("Signaler");
		}

		var time = AbsoluteTime:create(timeout);
		var token = SignalToken:create();
		int retVal = 0;
		
		mutex.lock();
		try {
			// we only add the token if we want to be able to wake this thread up later.
			// since we do not want any notify to wake that thread up, we do not add it to
			// the queue if we only want to sleep.
			if(!sleepOnly) {
				tokensQueue.addLast(token);
			} else {
				sleepTokensQueue.addLast(token);
			}

			waitingThreads += 1;
			 // retVal is not zero when the wait times out
			while((retVal == 0 or !sleepOnly) and token->shouldWait) {
				mutex.giveUpOwnership();
				retVal = timedWait(condHandle->ptr, mutex->ptr, time->ptr);
				mutex.takeOwnership();
			}
			
			if(token->interrupted) {
				throw InterruptedException:create();
			}
		} finally {
			waitingThreads -= 1;
			token.invalidate();
			mutex.unlock();
			time.free();
		}

		return (retVal != 0);
	}
	
	private findThreadAndInterrupt(Thread thread) => (boolean)
	{
		foreach(var t in tokensQueue) {
			if(t->thread === thread) {
				t.interrupt();
				return true;
			}
		}
		
		foreach(var t in sleepTokensQueue) {
			if(t->thread === thread) {
				t.interrupt();
				return true;
			}
		}
		
		return false;
	}
}