import shadow:io@Console;

class shadow:test@ThreadTest
{
	class ThreadTestRunner is CanRun
	{
		public run() => ()
		{
			var id = curthread()->id;
			System.sleep(id * 50);
			Console.printLine(curthread()->name);
			
			if(id == 4) {
				Thread:create(this).join(); // Thread#5; throws from Thread#6
			}
			else if(id == 5) {
				Console.printLine(curthread()->parent->id == 4);
				Console.printLine(System->mainThread->id == curthread()->parent->parent->id);
				
				Thread:create(this).join(); // Thread#6; throws from Thread#8
			}
			else if(id == 6) {
				Thread:create(this); // Thread#7; does not throw until joined
				Thread:create(this).join(); // Thread#8; throws and propagates
			}
			
			if(id > 2) {
				throw Exception:create("from " # curthread()->name);
			}
		}
	}

	public main(String[] args) => ()
	{
		var runner = ThreadTestRunner:create();
		runner.run(); // print main

		nullable var threads = Thread:null[4];
		for (int i = 0; i < threads->size; i += 1) {
			threads[i] = Thread:create(runner);
		}
		
		/*foreach(var x in curthread().children()) {
			try {
				x.join();
			} catch(Exception e) {}
		}
	
		Console.printLine("First class children");
		foreach(var x in curthread().children()) {
			Console.printLine(x->name);
		}

		Console.printLine("All children");
		foreach(var x in curthread().children(true)) {
			Console.printLine(x->name);
		}*/
		// if we do not join here, Shadow should join on all threads
	}
}