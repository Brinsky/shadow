import shadow:io@Console;

class shadow:test@MessagePassingTest
{
	class ThreadTestRunner is CanRun
	{
		public run() => ()
		{
			int start = cast<int>(receive(int:class, CurrentThread->main));
			int end = cast<int>(receive(int:class, CurrentThread->main));
			
			if(start % 2 == 0) {
				start += 1;
			}
			
			var count = 0;
			for(int i = start; i < end; i += 2) {
				boolean isPrime = true;
				for(int j = 3; isPrime and j*j <= i; j += 2) {
					if(i % j == 0) {
						isPrime = false;
					}
				}
				
				if(isPrime) {
					count += 1;
				}
			}
			
			send(count, CurrentThread->main);
		}
	}
	
	public main(String[] args) => ()
	{
		int numbers = 100000;
		int threads = 4;
		int intervals = numbers / threads;

		var runner = ThreadTestRunner:create();
		
		int i;
		for(i = 0; i < threads; i += 1) {
			Thread:create(runner);
		}

		for(i = 0; i < threads; i += 1) {
			send(intervals * i, CurrentThread[i]);
			send(intervals * (i + 1), CurrentThread[i]);
		}
		
		int total = 0;
		foreach(var from in CurrentThread.children()) {
			int count = cast<int>(receive(int:class, from));
			total += count;
		}
		
		Console.printLine(total);
	}
}