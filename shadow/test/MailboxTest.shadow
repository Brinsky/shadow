import shadow:io@Console;

class shadow:test@MailboxTest
{
	private readonly native initMailbox(int count, boolean blocking) => ();
	private readonly native get staticMailbox() => (Mailbox);
	
	public main(String[] args) => ()
	{	
		// mailbox is blocking, and for testing purposes,
		// can only take up to 10 elements.
		initMailbox(10, true);
		var mailbox = this->staticMailbox;

		// !!!! TEST #1 !!!!
		Console.printLine("Test1");
		var t1 = Thread:create(Test1Runner:create());
		
		// we wait till the children get spawned
		while(t1->childrenCount != 4) {}
		foreach(var t in t1) {
			t.join();
		}
		
		// send a stop signal
		mailbox.enqueue("stop");
		// send an invalid signal to make sure that exceptions
		// work correctly.
		mailbox.enqueue("wrong");
		
		try {
			t1.join();
		} catch(ThreadException e) {
			Console.printErrorLine(e->actual);
		}
		// !!!! TEST #1 !!!!
		
		// !!!! TEST #2 !!!!
		Console.printLine("Test2");
		Console.printLine(cast<String>(mailbox.dequeue(String:class, System->mainThread)) == "wrong");

		var t2 = Thread:create(Test2Runner:create());
		// !!!! TEST #2 !!!!
	}
	
	private class Test1Runner is CanRun
	{
		private class SenderRunner is CanRun
		{
			public run() => ()
			{
				var mailbox = staticMailbox();
				System.sleep(curthread()->id * 100);
				 
				mailbox.enqueue("hello");
				mailbox.enqueue(" ");
				mailbox.enqueue("world");
				mailbox.enqueue("!");
				mailbox.enqueue("\n");
			}
		}
	
		public run() => ()
		{
			nullable var threads = Thread:null[4];
			
			var sendRunner = SenderRunner:create();
			for (int i = 0; i < threads->size; i += 1) {
				threads[i] = Thread:create(sendRunner);
			}
			
			var mailbox = staticMailbox();
			
			var message = "";
			nullable Thread thread = null;
			
			while(message != "stop") {
				(var tempStr, var tempThread) = mailbox.dequeue(String:class);
				if(thread !== tempThread) {
					thread = tempThread;
					Console.print(tempThread->name # ": ");
				}
				
				message = cast<String>(tempStr);
				Console.print(message);
			}
			Console.printLine();
			
			mailbox.dequeue(int:class);
		}
	}
	
	private class Test2Runner is CanRun
	{		
		private class SenderRunner2 is CanRun
		{
			int secretNumber;
			public create(int i) {
				secretNumber = i;
			}
 			
			public run() => ()
			{
				var mailbox = staticMailbox();
				
				var x = int:create[5];
				for(int i = 0; i < x->size; i += 1) {
					x[i] = i;
					if(secretNumber == 1) {
						x[i] += 10;
					}
				}
				
				mailbox.enqueue("A string from " # curthread()->name);
				mailbox.enqueue("Secret number: ");
				mailbox.enqueue(secretNumber);
				mailbox.enqueue(x);
				x[0] = 55;
				mailbox.enqueue("done");
			}
		}

		private receive(Mailbox mailbox, int index, Class c, boolean lf) => (Object) {
			var o = mailbox.dequeue(c, curthread(index));
			Console.print(o);
			if(lf) {
				Console.print("\n");
			}
			
			return o;
		}
		
		public run() => ()
		{
			for (int i = 0; i < 2; i += 1) {
				Thread:create(SenderRunner2:create(i));
			}
			
			var mailbox = staticMailbox();
			
			for (int i = 0; i < curthread()->childrenCount; i += 1) {
				receive(mailbox, i, String:class, true);
				receive(mailbox, i, String:class, false);
				receive(mailbox, i, int:class, true);
				var arr = receive(mailbox, i, Array<int>:class, true);
				receive(mailbox, i, String:class, true);
				Console.printLine(arr);
			}
		}
	}
}