import shadow:io@Console;

class shadow:test@InterruptTest
{
	class ThreadSleepTestRunner is CanRun
	{
		public run() => ()
		{
			Console.printLine("waiting");
			CurrentThread.sleep(Time.fromSeconds(10));
			Console.printLine("done");
		}
	}
	
	class ThreadTestRunner is CanRun
	{
		public run() => ()
		{
			Console.printLine("I am " # CurrentThread->name);

			var index = cast<int>(receive(int:class, CurrentThread->main));
			Console.printLine(CurrentThread->name # ": " # index);
			CurrentThread->main[index].join();

			Console.printLine("I should quit before reaching this" # CurrentThread->name);
		}
	}

	public main(String[] args) => ()
	{
		Thread:create(ThreadSleepTestRunner:create()); // 0
		
		Thread:create(ThreadTestRunner:create()); // 1
		CurrentThread[1].interrupt();
		send(0, CurrentThread[1]);
		
		Thread:create(ThreadTestRunner:create()); // 2
		send(1, CurrentThread[2]);
		
		CurrentThread.sleep(Time.fromSeconds(4));
		Console.printLine("end");
		
		try {
			CurrentThread[2].join();
		} catch(ThreadException e) {
			if(e->actual is InterruptedException) {
				Console.printLine("InterruptedException thrown");
			} else {
				throw e;
			}
		}
	}
}