locked immutable class shadow:standard@
	Code
implements
	Integer<code>,
	CanHash
{
	public native bitComplement() => (code);
	public native bitShiftLeft(uint amount) => (code);
	public native bitShiftRight(uint amount) => (code);
	public native bitRotateLeft(uint amount) => (code);
	public native bitRotateRight(uint amount) => (code);
	public bitShiftLeft(int amount) => (code)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftLeft(abs), bitShiftRight(abs);
	}
	public bitShiftRight(int amount) => (code)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftRight(abs), bitShiftLeft(abs);
	}
	public bitRotateLeft(int amount) => (code)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateLeft(abs), bitRotateRight(abs);
	}
	public bitRotateRight(int amount) => (code)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateRight(abs), bitRotateLeft(abs);
	}

	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);
	public native bitOr(code other) => (code);
	public native bitXor(code other) => (code);
	public native bitAnd(code other) => (code);

	// implement CanAdd<code>
	public native add(code other) => (code);
	// implement CanSubtract<code>
	public native subtract(code other) => (code);
	// implement CanMultiply<code>
	public native multiply(code other) => (code);
	// implement CanDivide<code>
	public native divide(code other) => (code);
	// implement CanModulus<code>
	public native modulus(code other) => (code);
	// implement CanCompare<code>
	public native compare(code other) => (int);
	// implement CanEqual<code>
	public native equal(code other) => (boolean);

	// implement CanHash
	public get hash() => (uint)
	{
		return cast<uint>(this);
	}

	public toLowerCase() => (code)
	{
		if (this >= 'A' and this <= 'Z')
			return this - 'A' + 'a';
		return this;
	}
	public toUpperCase() => (code)
	{
		if (this >= 'a' and this <= 'z')
			return this - 'a' + 'A';
		return this;
	}

	public toString() => ( String )
	{
		code[] array = code:create[1];
		array[0] = this;
		return String:create(array);
	}	
}