abstract locked class shadow:standard@ArrayNullable<T> implements CanIndexNullable<int[],T>, CanIndexStoreNullable<int[],T>, CanIterateNullable<T>
{
	get immutable int[] lengths;
	Object data;
	
	
	protected create( immutable int[] lengths, Object data )	
	{		
		this:lengths = lengths;		
		this:data = data;		
	}
	
	public readonly get size() => ( int )
	{
		int size = lengths[0];
		for ( int i = 1; i < lengths->size; i += 1 )
			size *= lengths[i];
		return size;
	}	
	
	//All these methods are implemented with the same code as Array<T>
	//It's essentially simulating inheritance
	protected native create( immutable int[] lengths );
	public native readonly get dimensions() => ( int );	
	public native readonly subarray( int start, int end ) => ( Array<T> );
	public native readonly index( int[] indices ) => (nullable T);
	public native index( int[] indices, nullable T value ) => ();
	
	//by keeping them protected, they are not accessible to the user
	//but they still appear in .meta files and are accessible to the compiler
	protected readonly native index( int index ) => (T);
	protected native index( int index, nullable T value) => ();
	
	public native readonly getBaseClass() => ( Class );
	
	public readonly toString() => ( String )
	{
		if ( this->size == 0 )
			return "[]";
		
		MutableString string = MutableString:create("[");
		boolean first = true;
		foreach( nullable T value in this )
		{	
			if ( first )
				first = false;
			else
				string.append(", ");
				
			string.append(value);
		}
		return string.append("]").toString();
	}
	
	
	public readonly iterator() => (IteratorNullable<T>)
	{
		return ArrayIterator:create();
	} 
	
	private class ArrayIterator implements IteratorNullable<T>
	{
		int position = 0;
		int limit = size();
		
		public readonly hasNext() => (boolean)
		{	
			return position < limit;		
		}
		
		public next() => (nullable T)
		{
			if( position >= limit )
				throw IndexOutOfBoundsException:create();
			
			nullable T value = index( position );			
			position += 1;			
			
			return value;  
		}
	}
}
