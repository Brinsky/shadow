import shadow:io@Console;
import shadow:utility;
import shadow:natives;

/**
 * 
 * @author Claude Abounegm
 */
locked class shadow:standard@
	Thread
is CanEqual<Thread>
{
	public constant int READY = 0;
	public constant int RUNNING = 1;
	public constant int WAITING = 2;
	public constant int DEAD = 3;
	
	// START: Native methods
	private readonly native spawnThread(Pointer ptr) => (int);
	private readonly native get handleSize() => (int);
	private native get staticNextId() => (int);
	// END: Native methods
	
	// START: Private variables
	nullable Exception ex = null;
	nullable Signaler interruptSignaler = null;
	
	int state;
	int joined;
	boolean shouldInterrupt;
	
	Handle handle;
	CanRun runner;
	
	ThreadSafeList<Thread> childrenList;
	CanIterate<Thread> childrenIterate;
	CanIterate<Thread> childrenIterateRecurse;
	
	Mutex mutex;
	Mutex stateMutex;
	
	Signaler signaler;
	Mailbox mailbox;
	// END: Private variables
	
	/**
	* Gets the Shadow-specific thread ID.
	*/
	get int id;
	
	/**
	* Gets the {@code Thread} which spawned this thread. The Main thread does not
	* have a parent, and is null.
	*/
	get nullable Thread parent = null;
	
	/**
	* Gets the name of the thread set at spawn time. If no name is set
	* at spawn time, the name takes the format "Thread#{id}".
	*/
	get String name;
	
	/**
	* Gets whether this thread is running.
	*
	* @return {@code true} if the thread is alive; otherwise, {@code false}.
	*/
	public readonly get isAlive() => (boolean)
	{
		return (this->state != DEAD);
	}
	
	public readonly get state() => (int)
	{
		stateMutex.lock();
		var state = this:state;
		stateMutex.unlock();
		
		return state;
	}
	
	public readonly get stateStr() => (String)
	{
		switch(this->state) {
			case (READY)
				return "READY";
			
			case (RUNNING)
				return "RUNNING";
				
			case (WAITING)
				return "WAITING";
				
			case (DEAD)
				return "DEAD";
		}
		
		throw InvalidOperationException:create("Invalid state");
	}
	
	/**
	* Creates a new {@code Thread} object which takes on a {@code CanRun}
	* instance, containing a run function that is going to be ran
	* on a different thread.
	* 
	* @param runner The instance that contains a run function.
	*/
	public create(CanRun runner)
	{
		this(runner, null);
	}
	
	/**
	* Creates a new {@code Thread} object which takes on a {@code CanRun}
	* instance, containing a run function that is going to be ran
	* on a different thread, and takes a {@code String} which is the name
	* of the thread for reference purposes.
	* 
	* @param runner The instance that contains a run function.
	* @param name The name of the thread.
	*/
	public create(CanRun runner, nullable String name)
	{
		this:id = this->staticNextId;
		this:childrenList = ThreadSafeList<Thread>:create();
		
		try {
			this:name = check(name);
		} recover {
			this:name = "Thread#" # id;
		}
		
		this:joined = 0;
		this:mutex = Mutex:create();
		this:stateMutex = Mutex:create();
		this:signaler = Signaler:create();
		this:mailbox = Mailbox:create(32);
		this:handle = Handle:create(this->handleSize);
		this:state = READY;
		this:childrenIterate = TraverseChildren:create(false);
		this:childrenIterateRecurse = TraverseChildren:create(true);
		
		if(this:id == 0) {
			this:runner = runner;
			this:state = RUNNING;
			this:handle.free();
		} else {
			this:runner = copy(runner);
			this:parent = curthread();
			addToParent();
			
			// spawn the thread and give it the handle
			spawnThread(handle->ptr);
			
			// pthreads clean up their resources after the
			// spawned thread exits, so we do not need to
			// call any other functions.
		}
	}
	
	/**
	* Suspends the execution of the calling thread until this thread terminates.
	* Joining on a dead thread has no side effects. If the thread is terminated because of an exception, 
	* the exception is thrown when this method is called.
	* 
	* @throws InvalidOperationException if this is the main thread or is the same as the calling thread.
	* @throws ThreadException if the thread terminated due to an exception.
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public join() => () 
	{
		join(false, Time->InfiniteTimeout);
	}
	
	/**
	* Suspends the execution of the calling thread until this thread terminates or until it times out.
	* Joining on a dead thread has no side effects. If the thread is terminated because of an exception, 
	* the exception is thrown when this method is called.
	*
	* @param timeout the time to wait for.
	* @return {@code true} if the join returned because of a timeout; otherwise, {@code false}.
	*
	* @throws InvalidOperationException if this is the main thread or is the same as the calling thread.
	* @throws ThreadException if the thread terminated due to an exception.
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public join(TimeSpan timeout) => (boolean)
	{
		return join(false, timeout);
	}
	
	/**
	* Suspends the execution of the calling thread until this thread terminates or until it times out.
	* Joining on a dead thread has no side effects. If the thread is terminated because of an exception, 
	* the exception is thrown when this method is called.
	*
	* @param millisecondsTimeout the time to wait for in milliseconds.
	* @return {@code true} if the join returned because of a timeout; otherwise, {@code false}.
	*
	* @throws InvalidOperationException if this is the main thread or is the same as the calling thread.
	* @throws ThreadException if the thread terminated due to an exception.
	* @throws InterruptedException if another thread requested to interrupt this thread.
	*/
	public join(int millisecondsTimeout) => (boolean)
	{
		return join(false, Time.fromMilliSeconds(millisecondsTimeout));
	}
	
	private join(boolean finalizing, TimeSpan timeout) => (boolean)
	{
		if(this === System->mainThread) {
			throw InvalidOperationException:create("A thread cannot call join on the main thread.");
		}
		
		if(this === curthread()) {
			throw InvalidOperationException:create("A thread cannot call join on itself.");
		}
		
		mutex.lock();
		boolean throwException = !finalizing or (finalizing and joined == 0);
		boolean timedOut = false;
		
		joined += 1;
		mutex.unlock();
		
		if(isAlive()) {
			try {
				curthread().setState(WAITING, this:signaler);

				if(timeout->isPositive) {
					timedOut = signaler.waitForNotify(timeout);
				} else {
					signaler.waitForNotify();
				}
			} catch(InterruptedException e) {
				curthread().resetInterrupt();

				// An interrupted join is not succesful, so we
				// decrease its count.
				mutex.lock();
				joined -= 1;
				mutex.unlock();

				throw e;
			} finally {
				curthread().setState(RUNNING, null);
			}
		}

		// we then check here if we have an exception. If we do, we throw it, and
		// it is the job of runnerNative() to take care of the handling.
		if(throwException and ex !== null) {
			throw check(ex);
		}

		return timedOut;
	}
	
	/**
	* Tries to interrupt this thread. 
	*/
	public interrupt() => ()
	{
		if(!isAlive()) {
			return;
		}
		
		shouldInterrupt = true;
		mutex.lock();
		try {
			if(this->state == WAITING) {
				check(interruptSignaler).interrupt(this);
			}
			
			// When the InterruptedException is raised, the runnerNative() catches that exception. 
			// Just like any other exception, `ex` is set to that exception, and runnerNative() then cleans
			// up the resources it used. It calls signaler.free(), which in turn causes Signaler to release
			// all the threads it is holding through a waitForNotify(). Since all threads get woken up after
			// the exception `ex` has been set, all the joined thread also get an InterruptedException correctly.
		} finally {
			mutex.unlock();
		}
	}
	
	private sleepNative(TimeSpan timeout) => ()
	{
		setState(WAITING, signaler);
		signaler.sleep(timeout);
		setState(RUNNING, null);
	}
	
	private sleepNative(int millisecondsTimeout) => ()
	{
		sleepNative(Time.fromMilliSeconds(millisecondsTimeout));
	}

	private receiveNative(Class expectedType) => (Object, Thread)
	{
		curthread().setState(WAITING, mailbox->signaler);
		var retVal = mailbox.dequeue(expectedType);
		curthread().setState(RUNNING, null);
		
		return retVal;
	}
	
	private receiveNative(Class expectedType, Thread from) => (Object)
	{
		curthread().setState(WAITING, mailbox->signaler);
		var retVal = mailbox.dequeue(expectedType, from);
		curthread().setState(RUNNING, null);
		
		return retVal;
	}
	
	private sendNative(Object data) => ()
	{
		if(!isAlive()) {
			throw InvalidOperationException:create("Cannot send a message to a dead thread.");
		}
		
		curthread().setState(WAITING, mailbox->signaler);
		mailbox.enqueue(data);
		curthread().setState(RUNNING, null);
	}
	
	private resetInterrupt() => ()
	{
		mutex.lock();
		try {
			shouldInterrupt = false;
		} finally {
			mutex.unlock();
		}
	}
	
	/**
	* This method is natively executed from the newly spawned thread.
	* !!DO NOT MANUALLY EXECUTE!!
	*/
	private runnerNative() => ()
	{
		try {
			this->state = RUNNING;
			runner.run();
		} catch(Exception e) {
			ex = ThreadException:create(this, e);
		} finally {
			this->state = DEAD;

			mutex.lock();
			handle.free();
			signaler.free();
			mutex.unlock();
		}
	}
	
	// THIS METHOD GETS CALLED WITH A NULL `this` POINTER, DO NOT USE
	// `this` or any instance methods on this thread.
	private waitForThreadsNative() => ()
	{
		if(curthread() !== System->mainThread) {
			throw Exception:create("waitForThreadsNative() can only be called on the main thread.");
		}
		
		var exceptionQueue = ArrayDeque<ThreadException>:create();
		
		foreach(var thread in curthread().children(true)) {
			try {
				thread.join(true, Time->InfiniteTimeout);
				// the `true` causes this thread to wait for the other thread
				// to terminate and it will only throw an exception if the target 
				// thread had not been joined on before.
			} catch (ThreadException e) {
				exceptionQueue.addLast(e);
			}
		}

		// traverse the exceptions, if any and print them as Uncaught Thread Exceptions.
		while(!exceptionQueue.isEmpty()) {
			Console.printErrorLine("Uncaught " # exceptionQueue.removeFirst());
		}
	}
	
	public readonly get childrenCount() => (int)
	{
		return childrenList->size;
	}
	
	public readonly children(int index) => (Thread)
	{
		return childrenList[index];
	}
	
	public readonly children(boolean recurse) => (CanIterate<Thread>)
	{
		if(recurse) {
			return childrenIterateRecurse;
		}
		
		return childrenIterate;
	}
	
	public readonly children() => (CanIterate<Thread>)
	{
		return children(false);
	}
	
	public readonly equal(Thread other) => (boolean) 
	{
		return (this === other);
	}
	
	public readonly toString() => (String)
	{
		return name # ": (" # this->stateStr # ")";
	}
	
	private addToParent() => () 
	{
		check(parent):childrenList.add(this);
	}
	
	private set state(int state) => ()
	{
		stateMutex.lock();
		this:state = state;
		stateMutex.unlock();
	}
	
	private setState(int state, nullable Signaler interruptSignaler) => ()
	{
		mutex.lock();
		try {
			if(shouldInterrupt) {
				shouldInterrupt = false;
				this->state = RUNNING;
				
				throw InterruptedException:create();
			}
		} finally {
			mutex.unlock();
		}
		
		stateMutex.lock();
		this:state = state;
		this:interruptSignaler = interruptSignaler;
		stateMutex.unlock();
	}
	
	private readonly createNative() => (Thread) 
	{ 
		return Thread:create(NopRunner:create(), "Thread#main"); 
	}
	
	// A Runner which performs no operations.
	private class NopRunner
		is CanRun
	{
		public run() => () {}
	}
	
	private readonly instance() => (Thread)
	{
		return this;
	}
	
	private class TraverseChildren is CanIterate<Thread>
	{
		boolean recurse;
		
		public create(boolean recurse)
		{
			this:recurse = recurse;
		}
		
		public readonly iterator() => (Iterator<Thread>)
		{
			if(recurse) {
				return ChildrenIterator:create();
			}
			
			return instance():childrenList.iterator();
		}
		
		private class ChildrenIterator is Iterator<Thread>
		{
			ArrayDeque<Thread> threadsQueue;
			Thread current = instance();
			
			public create()
			{
				threadsQueue = ArrayDeque<Thread>:create();
			}
			
			public readonly hasNext() => (boolean)
			{
				return (!threadsQueue.isEmpty() or current->childrenCount > 0);
			}
			
			public next() => (Thread)
			{
				addChildrenToQueue(current);
				
				if(threadsQueue.isEmpty()) {
					throw NoSuchElementException:create();
				}
				
				current = threadsQueue.removeFirst();
				return current;
			}
			
			private addChildrenToQueue(Thread parent) => ()
			{
				foreach(var child in parent.children()) {
					threadsQueue.addLast(child);
				}
			}
		}
	}
}