import shadow:io@Console;

locked immutable class shadow:standard@
	Double
is	Number<double>
and	CanNegate<double>
and	CanHash
{
	public constant double PI = 3.141592653589793;
	public constant double E = 2.718281828459045;

	public constant double NaN = 0d / 0d;
	public constant double INFINITY = 1d / 0d;
	public constant double NEGATIVE_INFINITY = -1d / 0d;

	private constant ulong SIGN_MASK = 0x8000000000000000uL;
	private constant ulong EXPONENT_MASK = 0x7ff0000000000000uL;
	private constant ulong SIGNIFICAND_MASK = 0xfffffffffffffuL;

	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);

	// implement CanAdd<double>
	public native add(double other) => (double);
	// implement CanSubtract<double>
	public native subtract(double other) => (double);
	// implement CanMultiply<double>
	public native multiply(double other) => (double);
	// implement CanDivide<double>
	public native divide(double other) => (double);
	// implement CanModulus<double>
	public native modulus(double other) => (double);
	// implement CanCompare<double>
	public native compare(double other) => (int);
	// implement CanEqual<double>
	public native equal(double other) => (boolean);
	
	//other math operations
	public native squareRoot() => (double);
	public native power(int value) => (double);
	public native power(double value) => (double);
	public native sin() => (double);
	public native cos() => (double);
	public native logBaseE() => (double);
	public native logBase2() => (double);
	public native logBase10() => (double);
	public native multiplyAdd(double multiplicand, double addend) => (double);
	public native floor() => (double);
	public native ceiling() => (double);
	
	public round() => (double)
	{
		if( this < 0.0 )
			return (this - 0.5).ceiling();
		else
			return (this + 0.5).floor();	
	}

	// implement CanHash
	public get hash() => (uint)
	{
		return this->bits->hash;
	}

	public isNaN() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) != 0l;
	}
	public isInfinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) == EXPONENT_MASK and
				(this->raw & SIGNIFICAND_MASK) == 0l;
	}
	public isFinite() => (boolean)
	{
		return (this->raw & EXPONENT_MASK) != EXPONENT_MASK;
	}
	
	/*	
	Fix this with something not as hacky 
	Consider: Printing Floating-Point Numbers Quickly and Accurately with Integers by Florian Loitsch
	*/
	
	public  toString() => (String)
	{
		return toString(17, 7, 3);
	}	
	
	public  toString(int maxPrecision, int integerThreshold, int fractionalThreshold ) => (String)
	{
		if( isNaN() )
			return "NaN";
			
		if( this === INFINITY )
			return "Infinity";
		
		if( this === NEGATIVE_INFINITY )
			return "-Infinity";
	
		boolean negative = false;
		
		ulong bits = this->bits;
		if( (bits & SIGN_MASK) != 0uL )
			negative = true;
							
		int exponent = cast<int>((bits & EXPONENT_MASK) >> 52);
		ulong significand = bits & SIGNIFICAND_MASK;	
		
		if( exponent == 0 )
		{
			if( significand == 0uL )
				 return negative ? "-0.0", "0.0";
									
			exponent = -1022 - 52; 			
		}
		else
		{
			significand |= (SIGNIFICAND_MASK + 1uL);			
			exponent -= (1023 + 52);
		}
				
		//There are faster ways to do double output, but this is a hack for now
		BigInteger result = BigInteger:create(significand);						
		int base10Shift = 0;
		
		if( exponent < 0 )
		{				
			base10Shift = cast<int>(-exponent * 0.3010299956639812) + 1;  //ceiling of log_10(2) times exponent
			//left shift
			BigInteger ten = BigInteger:create(10);
			BigInteger tenPower = ten.power(BigInteger:create(base10Shift));			
			result = result * tenPower;
			result = result.bitShiftLeft(exponent); //shifts right because exponent is negative
		}		 
		else
		{
			base10Shift = 0;
			result = result.bitShiftLeft(exponent);
		}	
		
		MutableString output = MutableString:create(#result);
	
		int rightZeroes = 0;
		for( int i = output->size - 1; i >= 0 and output[i] == '0'; i -= 1 )
			rightZeroes += 1;

		int integerDigits = output->size - base10Shift;
		int length = maxPrecision;						 
		length = length.min(output->size - rightZeroes);
		length = length.max(2);
		
		if( round( output, length ) )
			integerDigits += 1;			
		
		// Number is too big or too small, use scientific notation		
		if( integerDigits > integerThreshold or -integerDigits > fractionalThreshold )
		{	
		 	output.insert(cast<byte>('.'), 1);
		 	if( output->size == 2 )
		 		output.append(cast<byte>('0'));
		 	removeZeroes( output );			 	
		 	output.append(cast<byte>('E'));
			output.append(#(integerDigits - 1));
		}		
		// Number is smaller than 1
		else if( integerDigits <= 0 )
		{
			// Pad with zeroes on the left.
			for( int i = 0; i < -integerDigits; i += 1 )			
				output.prepend(cast<byte>('0'));
							
			length = maxPrecision + 1;						 
			length = length.min(output->size - rightZeroes);
			length = length.max(-integerDigits + 1);
							
			round( output, length );						
			output.prepend(cast<byte>('.'));
			output.prepend(cast<byte>('0'));
			removeZeroes( output );	
		}
		//Number is larger than 1
		else
		{		
			// Pad with zeroes on the right, if necessary.
			for( int i = output->size; i <= integerDigits; i += 1 )			
				output.append(cast<byte>('0'));
		 	output.insert('.', integerDigits);
		 	removeZeroes( output );
		}		
			
		if( negative )	
			return output.prepend(cast<byte>('-')).toString();
		else
			return output.toString();
	}
	
	private round(MutableString number, int length) => (boolean)
	{
		if( length >= number->size )
			return false;			
		else if( length > number->size )
		{
			while( length > number->size )
				number.append(cast<byte>('0'));
			return false;
		}
		else
		{
			if( length < 18 and number[length] >= '5' )
			{
				int index = length;
				number.index( index - 1, number[index - 1] + 1y );				
			
				while( index > 1 and number[index - 1] > '9' )
				{
					number.index( index - 1, cast<byte>('0') );
					index -= 1;
					number.index( index - 1, number[index - 1] + 1y);
				}
				
				if( number[0] > '9' )
				{				
					number.index( 0, cast<byte>('0'));				
					number.prepend(cast<byte>('1'));
					number.delete(length, number->size);
					return true;	
				}
			}
			
			number.delete(length, number->size);
			return false;
		}	
	} 
	
	private removeZeroes( MutableString string ) => ()
	{
		int index = string->size - 1;
		while( index > 1 and string[index] == '0' and string[index - 1] != '.' )
			index -= 1;			

		if( index < string->size - 1 )
			string.delete( index + 1, string->size );
	}

	public native get raw() => (ulong);
	public get bits() => (ulong)
	{
		if (isNaN())
			return NaN->raw;
		return this->raw;
	}
	
	// implement CanNegate<double>
	public native negate() => (double);	
}
