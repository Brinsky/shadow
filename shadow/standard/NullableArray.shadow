abstract locked class shadow:standard@NullableArray<T> implements NullableCanIndexStore<int[],T>, NullableCanIterate<T>
{
	get immutable int[] lengths;
	Object data;
	
	//All these methods are implemented with the same code as Array<T>
	//It's essentially simulating inheritance
	protected native create( immutable int[] lengths, Object data );
	protected native create( immutable int[] lengths );
	public native readonly get size() => ( int );	
	public native readonly get dimensions() => ( int );	
	public native readonly subarray( int start, int end ) => ( Array<T> );
	public native readonly index( int[] indices ) => (nullable T);
	public native index( int[] indices, nullable T value ) => ();
	private readonly native index( int index ) => (T);
	private native index( int index, nullable T value) => ();
	public native readonly getBaseClass() => ( Class );
	public native readonly toString() => ( String );
	
	public readonly iterator() => (NullableIterator<T>)
	{
		return ArrayIterator:create();
	} 
	
	private class ArrayIterator implements NullableIterator<T>
	{
		int position = 0;
		int limit = size();
		
		public readonly hasNext() => (boolean)
		{	
			return position < limit;		
		}
		
		public next() => (nullable T)
		{
			if( position >= limit )
				throw IndexOutOfBoundsException:create();
			
			nullable T value = index( position );			
			position += 1;			
			
			return value;  
		}
	}
}
