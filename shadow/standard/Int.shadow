locked immutable class shadow:standard@
	Int
implements
	Integer<int>,
	Integer<long>,
	Number<float>,
	Number<double>,
	CanNegate<int>,
	CanHash
{
	public constant int MAX =  2147483647;
	public constant int MIN =  -2147483648;

	// implement Integer
	public native bitComplement() => (int);
	public native bitShiftLeft(uint amount) => (int);
	public native bitShiftRight(uint amount) => (int);
	public native bitRotateLeft(uint amount) => (int);
	public native bitRotateRight(uint amount) => (int);
	public bitShiftLeft(int amount) => (int)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftLeft(abs), bitShiftRight(abs);
	}
	public bitShiftRight(int amount) => (int)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftRight(abs), bitShiftLeft(abs);
	}
	public bitRotateLeft(int amount) => (int)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateLeft(abs), bitRotateRight(abs);
	}
	public bitRotateRight(int amount) => (int)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateRight(abs), bitRotateLeft(abs);
	}
	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);

	// implement Integer<int>
	public native bitOr(int other) => (int);
	public native bitXor(int other) => (int);
	public native bitAnd(int other) => (int);
	// implement CanAdd<int>
	public native add(int other) => (int);
	// implement CanSubtract<int>
	public native subtract(int other) => (int);
	// implement CanMultiply<int>
	public native multiply(int other) => (int);
	// implement CanDivide<int>
	public native divide(int other) => (int);
	// implement CanModulus<int>
	public native modulus(int other) => (int);
	// implement CanCompare<int>
	public native compare(int other) => (int);
	// implement CanEqual<int>
	public native equal(int other) => (boolean);

	// implement Integer<long>
	public bitOr(long other) => (long)
	{
		return cast<long>(this) | other;
	}
	public bitXor(long other) => (long)
	{
		return cast<long>(this) ^ other;
	}
	public bitAnd(long other) => (long)
	{
		return cast<long>(this) & other;
	}
	// implement CanAdd<long>
	public add(long other) => (long)
	{
		return cast<long>(this) + other;
	}
	// implement CanSubtract<long>
	public subtract(long other) => (long)
	{
		return cast<long>(this) - other;
	}
	// implement CanMultiply<long>
	public multiply(long other) => (long)
	{
		return cast<long>(this) * other;
	}
	// implement CanDivide<long>
	public divide(long other) => (long)
	{
		return cast<long>(this) / other;
	}
	// implement CanModulus<long>
	public modulus(long other) => (long)
	{
		return cast<long>(this) % other;
	}
	// implement CanCompare<long>
	public compare(long other) => (int)
	{
		return cast<long>(this).compare(other);
	}
	// implement CanEqual<long>
	public equal(long other) => (boolean)
	{
		return cast<long>(this) == other;
	}

	// implement CanAdd<float>
	public add(float other) => (float)
	{
		return cast<float>(this) + other;
	}
	// implement CanSubtract<float>
	public subtract(float other) => (float)
	{
		return cast<float>(this) - other;
	}
	// implement CanMultiply<float>
	public multiply(float other) => (float)
	{
		return cast<float>(this) * other;
	}
	// implement CanDivide<float>
	public divide(float other) => (float)
	{
		return cast<float>(this) / other;
	}
	// implement CanModulus<float>
	public modulus(float other) => (float)
	{
		return cast<float>(this) % other;
	}
	// implement CanCompare<float>
	public compare(float other) => (int)
	{
		return cast<float>(this).compare(other);
	}
	// implement CanEqual<float>
	public equal(float other) => (boolean)
	{
		return cast<float>(this) == other;
	}

	// implement CanAdd<double>
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	// implement CanSubtract<double>
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	// implement CanMultiply<double>
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	// implement CanDivide<double>
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	// implement CanModulus<double>
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}
	// implement CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}
	// implement CanEqual<double>
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}
	
	// implement CanNegate<int>
	public native negate() => (int);
	
	public squareRoot() => (double)
	{
		return toDouble().squareRoot();
	}
	
	public power(int value) => (double)
	{
		return toDouble().power(value);
	}
	
	public power(double value) => (double)
	{
		return toDouble().power(value);
	}
	
	public sin() => (double)
	{
		return toDouble().sin();
	}
	
	public cos() => (double)	
	{
		return toDouble().cos();
	}
	
	public logBaseE() => (double)	
	{
		return toDouble().logBaseE();
	}
	
	public logBase2() => (double)	
	{
		return toDouble().logBase2();
	}
	
	public logBase10() => (double)	
	{
		return toDouble().logBase10();
	}
	
	public native flipEndian() => (int);
	public native ones() => (int);
	public native leadingZeroes() => (int);
	public native trailingZeroes() => (int);
	public native addWithOverflow(int value) => (int, boolean);
	public native subtractWithOverflow(int value) => (int, boolean);
	public native multiplyWithOverflow(int value) => (int, boolean);
		

	// implement CanHash
	public get hash() => (uint)
	{
		return cast<uint>(this);
	}

	public abs() => (uint)
	{
		return cast<uint>(this < 0 ? -this, this);
	}
	public min(int other) => (int)
	{
		return this < other ? this, other;
	}
	public max(int other) => (int)
	{
		return this > other ? this, other;
	}

	public toUnsigned() => (uint)
	{
		return toUInt();
	}
	public toString() => (String)
	{
		return toString(10u);
	}
	public toString(uint base) => (String)
	{				
		String string = abs().toString(base);			
		return this >= 0 ? string, '-' # string;
	}	
}
