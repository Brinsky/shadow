immutable class shadow:standard@GenericClass extends Class
{	
	get Object[] parameters; //double the size for class and methods

	//never gets called
	protected create(int flags, int size, String name, Class parent, immutable Class[] interfaces, immutable Object[] data, immutable Object[] parameters )
	{
		super(flags, size, name, parent, interfaces, data);
		this:parameters = parameters;
	}

	public isSubtype( Class other ) => ( boolean )
	{
		if( other.isArray() or other.isMethod() )
			return false;
	
		if ( this === other )
			return true;
		
		try
		{
			if ( !other.isInterface() )							
				return check(this->parent).isSubtype(other); //run up parental chain
			else
			{
				readonly Class[] interfaces = this->interfaces;
			 	for ( int i = 0; i < interfaces->size; i += 1 )
				{					 
					if( interfaces[i] === other )
						return true;			
				}
			}				
		}
		recover
		{}
		
		return false;
	}
	
	private findClass( GenericClass[] classes, Class[] parameters ) => (nullable Class)
	{		
		for( int i = 0; i < classes->size; i += 1 )
		{
			boolean matching = true;							
			for( int j = 0; j < parameters->size and matching; j += 1 )
			{	
				try
				{									
					readonly Class class_ = cast<Class>(check(check(classes[i]):parameters[j * 2]));										
					if( !check(parameters[j]).equal(class_) )
					{						
						matching = false;
					}					
				}
				recover
				{
					matching = false;
				}					
			}
					
			if( matching )
				return cast<Class>(classes[i]);
		}		
		
		
		MutableString string = MutableString:create("Type arguments not found: <");
		for( int i = 0; i < parameters->size; i += 1 )
		{
			if( i > 0 )
				string.append(", ");
			string.append( #parameters[i] );
		}
		string.append(">");
		
		throw CastException:create(string.toString());
	}
}
