immutable class shadow:standard@
	GenericClass is Class
{	
	get Object[] parameters; //double the size for class and methods
	
	public create(Class base, String name, nullable Class parent, immutable Class[] interfaces, immutable Object[] parameters )
	{
		this(name, base->flags | Class:GENERIC, base->size, parent, interfaces, base->data, parameters);		
	}
	
	protected create(String name, int flags, int size, nullable Class parent, immutable Class[] interfaces, immutable Object[] data, immutable Object[] parameters )
	{
		super(name, flags, size, parent, interfaces, data);
		this:parameters = parameters;	
	}

	public isSubtype( Class other ) => ( boolean )
	{
		if( other.isArray() or other.isMethod() )
			return false;
	
		if ( this === other )
			return true;
		
		if ( !other.isInterface() )							
			return check(this->parent).isSubtype(other); //run up parental chain
		else
		{
			readonly Class[] interfaces = this->interfaces;
		 	for ( int i = 0; i < interfaces->size; i += 1 )
			{					 
				if( interfaces[i] === other )
					return true;			
			}
		}		
		
		return false;
	}
}
