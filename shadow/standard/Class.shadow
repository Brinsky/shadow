immutable class shadow:standard@Class implements CanHash
{
	get String name;
	get nullable Class parent;
	get Class[] interfaces;
	Object[] data;
	int flags;
	get int size;
	
	//array allocation methods
	private locked native allocate( int size ) => ( Object );
	
	public locked isInterface() => ( boolean )
	{
		return (flags & 0b01) != 0;
	}
	public locked isPrimitive() => ( boolean )
	{
		return (flags & 0b10) != 0;
	}
	public locked isNormal() => ( boolean )
	{
		return !isGeneric() and !isArray() and !isMethod();
	}
	public locked isGeneric() => ( boolean )
	{
		return (flags & 0b100) != 0;
	}
	public locked isArray() => ( boolean )
	{
		return (flags & 0b1000) != 0;
	}
	
	public locked isSingleton() => ( boolean )
	{
		return (flags & 0b10000) != 0;
	}
	
	public locked isMethod() => ( boolean )
	{
		return (flags & 0b100000) != 0;
	}

	//only called for array classes (and even then, only sometimes)
	public create(int flags, int size, String name, nullable Class parent, immutable Class[] interfaces, immutable Object[] data ) 
	{	
		this:parent = parent;
		this:interfaces = interfaces;
		this:data = data;
		this:flags = flags;
		this:size = size;
		
		if( isMethod() )
		{
			MutableString methodType = MutableString:create("(");
			for( int i = 0; i < size; i += 1 )
			{
				if( i > 0 )
					methodType.append(", ");
				methodType.append(#data[i]);			
			}
			methodType.append(") => (");
			for( int i = size; i < data->size; i += 1 )
			{
				if( i > size )
					methodType.append(", ");
				methodType.append(#data[i]);			
			}
			methodType.append(")");
			this:name = methodType.toString();		
		}
		else if( isArray() )
		{
			MutableString arrayType = MutableString:create(name);
			arrayType.append("[");
			for( int i = 1; i < size; i += 1 )
				arrayType.append(",");
			arrayType.append("]");
			this:name = arrayType.toString();		
		}
		else		
			this:name = name;
	}
	
	protected locked interfaceData( Class interfaceClass ) => ( immutable Object )
	{
		for ( int i = 0; i < interfaces->size; i += 1 )
			if ( interfaces[i] === interfaceClass )
				return data[i];
		
		throw CastException:create("Class " # this # " does not implement interface " # interfaceClass);
	}
	
	public equal( Class other ) => ( boolean )
	{
		if( this === other )
			return true;
			
		if( flags != other:flags )
			return false;
		
		try
		{	
			if( isArray() )
			{
				return other.isArray() and size == other:size and check(parent).equal(check(other:parent));			
			}
			else if( isMethod() )
			{
				if( !other.isMethod() or size != other:size or data->size != other:data->size )
					return false;
					
				for( int i = 0; i < data->size; i += 1 )
				{
					Class parameter = cast<Class>(data[i]);
					Class otherParameter = cast<Class>(other:data[i]);
					
					if( !parameter.equal(otherParameter) )
						return false;				
				}
				
				return true;
			}
		}
		recover
		{}
		
		return false;	
	}

	public isSubtype( Class other ) => ( boolean )
	{		
		if ( this === other )
			return true;
			
		try
		{	
			if( isArray() )
			{
				return equal( other );
			}	
			else if( isMethod() )
			{
				if( !other.isMethod() or size != other:size or data->size != other:data->size )
					return false;
			
				for( int i = 0; i < size; i += 1 )
				{
					Class parameter = cast<Class>(data[i]);
					Class otherParameter = cast<Class>(other:data[i]);
					
					if( !otherParameter.isSubtype(parameter) )
						return false;				
				}
				
				for( int i = size; i < data->size; i += 1 )
				{
					Class return_ = cast<Class>(data[i]);
					Class otherReturn = cast<Class>(other:data[i]);
					
					if( !return_.isSubtype(otherReturn) )
						return false;				
				}
				
				return true;					
			}
			else //regular classes and interfaces
			{
				if( other.isInterface() )
				{
					for ( int i = 0; i < interfaces->size; i += 1 )
						if ( interfaces[i] === other  )
							return true;								
				}
				else if( !isInterface() )
				{
					return check(parent).isSubtype(other);
				}
			}
		}
		recover
		{
		}
		
		return false;
	}

	public toString() => ( String )
	{
		return name;
	}
	
	public locked native pointerSize() => ( int );	

	public locked get size() => ( int )
	{
		if( isArray() ) //actual size member is # of dimensions		
			return pointerSize() + 4 * size;		
		else if( isMethod() )		
			return 3 * pointerSize() + 4 * size;
		else if( isInterface() )
			return 2 * pointerSize();		
		else if( isPrimitive() )
		{
			if( this === boolean:class or 
				this === byte:class or
				this === ubyte:class )
				return 1;
			else if( this === short:class or
				this === ushort:class )
				return 2;
			else if( this === code:class or
				this === float:class or
				this === int:class or
				this === uint:class )
				return 4;
			else
				return 8; 
		}
		else
			return size;			
	}
	
	public locked get width() => ( int )
	{		
		if( isArray() or isMethod() or isPrimitive() or isInterface() )							
			return this.size();
		else		
			return pointerSize();		
	}
	
	public locked get hash() => ( uint )
	{
		return toString().hash();
	}	
}
