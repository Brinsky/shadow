locked immutable class shadow:standard@
	ULong
is	Integer<ulong>
and	Number<double>
and	CanHash
{
	public constant ulong MAX = 18446744073709551615ul;
	public constant ulong MIN = 0ul;
	// implement Bitwise
	public native bitComplement() => (ulong);
	public native bitShiftLeft(uint amount) => (ulong);
	public native bitShiftRight(uint amount) => (ulong);
	public native bitRotateLeft(uint amount) => (ulong);
	public native bitRotateRight(uint amount) => (ulong);
	public bitShiftLeft(int amount) => (ulong)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftLeft(abs), bitShiftRight(abs);
	}
	public bitShiftRight(int amount) => (ulong)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitShiftRight(abs), bitShiftLeft(abs);
	}
	public bitRotateLeft(int amount) => (ulong)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateLeft(abs), bitRotateRight(abs);
	}
	public bitRotateRight(int amount) => (ulong)
	{
		uint abs = amount.abs();
		return amount >= 0 ? bitRotateRight(abs), bitRotateLeft(abs);
	}
	// implement Number
	public native toByte() => (byte);
	public native toUByte() => (ubyte);
	public native toShort() => (short);
	public native toUShort() => (ushort);
	public native toInt() => (int);
	public native toUInt() => (uint);
	public native toLong() => (long);
	public native toULong() => (ulong);
	public native toCode() => (code);
	public native toFloat() => (float);
	public native toDouble() => (double);

	// implement Integer<ulong>
	public native bitOr(ulong other) => (ulong);
	public native bitXor(ulong other) => (ulong);
	public native bitAnd(ulong other) => (ulong);
	// implement CanAdd<ulong>
	public native add(ulong other) => (ulong);
	// implement CanSubtract<ulong>
	public native subtract(ulong other) => (ulong);
	// implement CanMultiply<ulong>
	public native multiply(ulong other) => (ulong);
	// implement CanDivide<ulong>
	public native divide(ulong other) => (ulong);
	// implement CanModulus<ulong>
	public native modulus(ulong other) => (ulong);
	// implement CanCompare<ulong>
	public native compare(ulong other) => (int);
	// implement CanEqual<ulong>
	public native equal(ulong other) => (boolean);

	// implement CanAdd<double>
	public add(double other) => (double)
	{
		return cast<double>(this) + other;
	}
	// implement CanSubtract<double>
	public subtract(double other) => (double)
	{
		return cast<double>(this) - other;
	}
	// implement CanMultiply<double>
	public multiply(double other) => (double)
	{
		return cast<double>(this) * other;
	}
	// implement CanDivide<double>
	public divide(double other) => (double)
	{
		return cast<double>(this) / other;
	}
	// implement CanModulus<double>
	public modulus(double other) => (double)
	{
		return cast<double>(this) % other;
	}
	// implement CanCompare<double>
	public compare(double other) => (int)
	{
		return cast<double>(this).compare(other);
	}
	// implement CanEqual<double>
	public equal(double other) => (boolean)
	{
		return cast<double>(this) == other;
	}
	
	public squareRoot() => (double)
	{
		return toDouble().squareRoot();
	}
	
	public power(int value) => (double)
	{
		return toDouble().power(value);
	}
	
	public power(double value) => (double)
	{
		return toDouble().power(value);
	}
	
	public sin() => (double)
	{
		return toDouble().sin();
	}
	
	public cos() => (double)	
	{
		return toDouble().cos();
	}
	
	public logBaseE() => (double)	
	{
		return toDouble().logBaseE();
	}
	
	public logBase2() => (double)	
	{
		return toDouble().logBase2();
	}
	
	public logBase10() => (double)	
	{
		return toDouble().logBase10();
	}
	
	public native flipEndian() => (ulong);
	public native ones() => (ulong);
	public native leadingZeroes() => (ulong);
	public native trailingZeroes() => (ulong);	
	

	// implement CanHash
	public get hash() => (uint)
	{
		return cast<uint>(this) ^ cast<uint>(this >> 32);
	}

	public min(ulong other) => (ulong)
	{
		return this < other ? this, other;
	}
	public max(ulong other) => (ulong)
	{
		return this > other ? this, other;
	}

	public toSigned() => (long)
	{
		return toLong();
	}
	public toString() => (String)
	{
		return toString(10u);
	}
	public toString(uint base) => (String)
	{
		MutableString string = MutableString:create();
		ulong longBase = base; // casts to ulong a single time
		ulong value = this;
		do
		{
			string.append(digit(value % longBase));
			value /= longBase;
		}
		while (value != 0uL);
		return string.reverse().toString();
	}
	private digit(ulong digit) => (code)
	{
		if (digit < 10uL)
			return cast<code>(digit + '0');
		return cast<code>(digit - 10uL + 'a');
	}	
}
