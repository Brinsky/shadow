import shadow.io@Console;

abstract class shadow.standard@Array<T> implements CanIndexStore<int[],T>, CanIterate<T>
{
	get immutable int[] lengths;
	Object data;
	protected create( immutable int[] lengths, Object data )	
	{
		this:lengths = lengths;		
		this:data = data;		
	}	
	
	protected native create( immutable int[] lengths );
	
	/*
	protected native create( immutable int[] lengths )
	{
		this:lengths = lengths;
		this:data = allocate(T:class, this->size);
	}
	*/	
		
	//private immutable native allocate( Class type, int size ) => ( Object );

	public immutable get size() => ( int )
	{
		int size = lengths[0];
		for ( int i = 1; i < this->dims; i += 1 )
			size *= lengths[i];
		return size;
	}
	
	public immutable native get dims() => ( int );
	
	
	/* //copy implementation based off the following code
	private immutable copyProxy(AddressMap addresses) => ( Array<T> )
	{
		Array<T> duplicate = Array<T>:create( lengths );
		for( int i = 0; i < this->size; i += 1 )
			duplicate.index(i, index(i).copy(addresses)));
				
		return duplicate;
	}
	*/
	
	//only makes sense for 1D arrays?
	public immutable native subarray( int start, int end ) => ( Array<T> );

	public immutable native index( int[] indices ) => (T);
	public native index( int[] indices, T value ) => ();
	
	//private methods that take the final offset after all the dimensions have been computed
	//unsafe to give to the user, but useful for internals
	private immutable native index( int index ) => (T);
	private native index( int index, T value) => ();	

	public native immutable getBaseClass() => ( Class );

	public immutable toString() => ( String )
	{
		if ( this->size == 0 )
			return "[]";
			
		//Console out = Console:instance;
		
		MutableString string = MutableString:create("[ ");						
		Class baseClass = getBaseClass();
		
		//out.printLine("Base class: " # baseClass);
		//out.printLine("Size: " # size() );
		
		boolean first = true;
		foreach( T value in this )
		{	
			if ( first )
				first = false;
			else
				string.append(", ");
			string.append(value);			
		}
		return string.append(" ]").toString();
	}
	
	public readonly iterator() => (Iterator<T>)
	{
		return ArrayIterator:create();
	} 
	
	private class ArrayIterator implements Iterator<T>
	{
		int position = 0;
		int limit = size();
		
		public immutable hasNext() => (boolean)
		{	
			return position < limit;		
		}
		
		public next() => (T)
		{
			//Console out = Console:instance;
			if( position >= limit )
				throw IndexOutOfBoundsException:create();
			
			//out.printLine("Position: " # position);
			
			T value = index( position );			
			position += 1;			
			
			return value;  
		}
	}
}
