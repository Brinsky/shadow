import shadow:utility@Set;
import shadow:utility@IllegalModificationException;
import shadow:io@Console;

/**
 * Class {@code ClassSet} is used to hold a collection of class objects.
 * The run-time system uses {@code ClassSet} containers to hold all generic
 * classes and all array classes.  Under circumstances when a new generic or
 * array class might be created, the appropriate {@code ClassSet} objects are
 * checked to be sure that the class does not already exist.
 * This class is designed for use with the run-time system. Application
 * programmers who need to store a set of  {@code Class} objects are
 * encouraged to use the {@code HashSet<Class>} container. {@code ClassSet} is
 * essentially a reimplementation of {@code HashMap}, which cannot be used
 * because generic types create problems for the compiler if used for these
 * fundamental tasks.
 */
locked class shadow:standard@
	ClassSet
is  Set<Class>	
{
	// Default size of hash table, 16.
	private constant long DEFAULT_INITIAL_CAPACITY = 16;
	// Maximum capacity of hash table, 1073741824 buckets.
	private constant long MAXIMUM_CAPACITY = 1L << 30;
	// Default maximum load factor before re-size, 0.75.
	private constant float DEFAULT_LOAD_FACTOR = 0.75f;
	
	/// Gets the number of values in the set.
	get long longSize = 0;
	nullable Node[] table;
	float loadFactor;
	long threshold;
	long modifications = 0;
	
	/**
	 * Creates an empty {@code ClassSet} with a default capacity of 16
	 * and maximum load factor of 0.75.  
	 */	
	public create()
	{
		this(DEFAULT_INITIAL_CAPACITY);
	}
	
	/**
	 * Creates an empty {@code ClassSet} with the specified capacity and
	 * maximum load factor of 0.75. 
	 * @param initialCapacity initial capacity of the set
	 */
	public create(long initialCapacity)
	{
		this(initialCapacity, DEFAULT_LOAD_FACTOR);		
	}
	
	/**
	 * Creates an empty {@code ClassSet} with the specified capacity and
	 * maximum load factor. 
	 * @param initialCapacity initial capacity of the map
	 * @param loadFactor maximum load factor before the map is resized
	 */
	public create(long initialCapacity, float loadFactor)
	{		
		Console.printLine("Start!");
		long capacity = 1L;
		while( capacity < initialCapacity ) // Makes capacity a power of 2.
			capacity <<= 1;	
		Console.printLine("About to allocate");
		table = Node:null[capacity];		
		Console.printLine("Node array allocated");
		this:loadFactor = loadFactor;
		threshold = cast<long>(capacity * loadFactor);		
	}
	
	/*
	 * Retrieves the number of elements held in the map, as an {@code int}.	  
	 * @return size
	 */
	public get readonly size() => (int)
	{
		return cast<int>( longSize );
	}	
	
	/*
	 * Resizes the set so that it can hold the new capacity, which must be a
	 * power of 2. 
	 * @param newCapacity new capacity of the set
	 */
	private resize(long newCapacity) => ()
	{		
		if(table->longSize == MAXIMUM_CAPACITY)
		{
			threshold = long:MAX;
			return;
		}
		
		nullable Node[] newTable = Node:null[newCapacity];
		long index;
		long hash;		
		
		for( long i = 0L; i < table->longSize; i += 1L )
		{
			try
			{
				Node node = check(table[i]);
				while( true )
				{
					(index, hash) = findIndex( node->value->name, newCapacity );
					newTable[index] = Node:create(hash, node->value, newTable[index]);
					node = check(node->next);
				}
			}
			recover  //jumps here when node->next is null
			{}
		}
		
		table = newTable;
		threshold = cast<long>(newCapacity * loadFactor);		
	}
	

	private class Node
	{
		immutable get long hash;		
		get Class value;
		get set nullable Node next;
		
		public readonly get value() => (Class)
		{
			return value;
		}
		
		public readonly get next() => (nullable Node)
		{
			return next;
		}

		public create( long hash, Class value )
		{
			this(hash, value, null);
		}
		
		public create( long hash, Class value, nullable Node after )
		{			
			this:hash = hash;			
			this:value = value;
			next = after;			
		}
	}	
	
	/**
     * Checks whether or not the class set is empty.
     * @return {@code true} if the class set is empty
     */
    public readonly isEmpty() => (boolean empty)
    {
        return longSize == 0L;
    }
	
	/*
	 * Finds the hash value and index for a given key based on the provided
	 * length.
	 */
	private readonly findIndex( String value, long length ) => ( long index, long hash )
	{		
		uint temp = value->hash;			
		temp ^= (temp >> 20) ^ (temp >> 12);
		long hash = cast<long>(temp ^ (temp >> 7) ^ (temp >> 4));
		return ( hash & (length - 1), hash );	
	}	

	/**
	 * Checks to see if the specified {@code Class} object is in
	 * the set.	   
	 * @param value object to look for
	 * @return {@code true} if present
	 */
	public index( Class value ) => ( boolean )
	{
		(long index, long hash) = findIndex( #value, table->longSize );
		try
		{
			Node current = check(table[index]);
			while ( current->hash != hash and current->value !== value )
				current = check(current->next);
			
			// Found correct node.
			return true; 
		}
		recover // Hit null before finding existing value.
		{}
		
		return false;				
	}
	
	/**
	 * Adds or removes an object to or from the set. 	   
	 * @param value object to be added or removed
	 * @param add add object if {@code true}, remove if {@code false}
	 */
	public index( Class value, boolean add ) => ()
	{
		if( add )
			this.add( value );
		else
			remove( value );	
	}
	
	/**
	 * Adds an object to the set. 	   
	 * @param value object to be added
	 * @return {@code true} if added to the set, {@code false} if already
	 * present
	 */
	public add( Class value ) => (boolean success)
	{
		Console.printLine("Add!");
		( long index, long hash ) = findIndex(#value, table->longSize);
		try
		{			
			Node current = check(table[index]);
			while ( current->hash != hash and current->value !== value )
				current = check(current->next);
			// Node already present.
			return false; 
		}
		recover // Hits null before finding existing value.
		{
			Node node = Node:create(hash, value, table[index]);
			table[index] = node;
			
			modifications += 1L;
			longSize += 1L;
			
			if( longSize > threshold )
				resize(2L * table->longSize);
				
			return true;
		}
	}

	/**
	 * Removes an object from the set. 	   
	 * @param value object to be removed
	 * @return {@code true} if successfully removed, {@code false} if not
	 * present
	 */
	public remove( Class value ) => ( boolean success )
	{	
		( long index, long hash ) = findIndex(#value, table->longSize);
		try
		{
			nullable Node last = null;
			Node current = check(table[index]);
			while ( current->hash != hash and current->value !== value )
				( last, current ) = ( current, check(current->next) );
			try
			{
				check(last)->next = current->next;
			}
			recover
			{
				table[index] = current->next;
			}
			modifications += 1;
			return true;
		}
		recover
		{
			return false;
		}
	}
	
	/**
	 * Checks to see if the set contains the specified object. 	   
	 * @param value object to look for
	 * @return {@code true} if object is present	 
	 */
	public readonly contains( Class value ) => ( boolean found )
	{		
		( long index, long hash ) = findIndex(#value, table->longSize);
		try
		{
			Node current = check(table[index]);			
			while ( current->hash != hash and current->value !== value )
				current = check(current->next);
			return true;
		}
		recover
		{
			return false;			
		}
	}	

	/**
	 * Creates an iterator to iterate over all the values in the set.	   
	 * @return iterator
	 */
	public readonly iterator() => ( Iterator<Class> )
	{
		return ClassSetIterator:create();
	}
	
		
	/**
	 * Removes all values from the set and resets the capacity to default.
	 * @return set after being cleared
	 */
	public clear() => ( ClassSet )
	{
		longSize = 0L;
		table = Node:null[DEFAULT_INITIAL_CAPACITY];
		threshold = cast<long>(table->longSize * loadFactor);
		modifications += 1L;
		return this;
	}
	
	
	private class ClassSetIterator is Iterator<Class>
	{
		long index = 0L;
		nullable Node current;
		long expectedModifications = modifications;
		public create()
		{
			current = next(null);
		}
		public next( nullable Node position ) => ( nullable Node )
		{	
			try
			{				
				if( position !== null )
					position = check(position)->next;
			}
			recover{}
		
			while( position === null and index < table->longSize )
			{				
				position = table[index];				
				index += 1L;					
			}
			return position; // Returns null if nothing left.			
		}

		private readonly checkForModifications() => ()
		{
			if ( modifications != expectedModifications )
				throw IllegalModificationException:create();
		}

		public readonly hasNext() => ( boolean )
		{
			checkForModifications();
			return current !== null;
		}

		public next() => ( Class value )
		{
			checkForModifications();
			try
			{				 
				(Class value, current ) = ( check(current)->value, next(current) );
				return value;
			}
			recover
			{
				throw IndexOutOfBoundsException:create();
			}
		}
	}
	
	
	/**
	 * Finds a generic class with the given name and type parameters. This
	 * method assumes that it will only ever be called on a set containing
	 * all generic classes.
	 * @param name name of class to find
	 * @param parameters array of type parameters and associated method tables
	 * @return matching generic class if found, {@code null} otherwise
	 */	  
	public locked readonly findGeneric(String name, immutable Class[] parameters) => (nullable GenericClass)
	{		
		(long index, long hash) = findIndex( name, table->longSize );	
		try
		{
			Node current = check(table[index]);			
			while ( true )
			{
				if( current->hash == hash )
				{
					GenericClass other = cast<GenericClass>(current->value);
					if( other->parameters->longSize == parameters->longSize )
					{
						long i;
						for( i = 0L; i < parameters->longSize and parameters[i] === other->parameters[i]; i += 1L )
							skip;
						if( i >= parameters->longSize and name == other->name )
							return other;
					}
				}
				current = check(current->next);
			}			
		}
		recover
		{}
		
		return null;		
	}
	
	
	/**
	 * Finds an array class with the given name and base class.
	 * This method assumes that it will only ever be called on
	 * a set containing all array classes.
	 * @param name name of class to find
	 * @param base class of array base type
	 * @return matching array class if found, {@code null} otherwise
	 */
	public locked readonly findArray(String name, Class base) => (nullable Class)
	{
		(long index, long hash) = findIndex( name, table->longSize );
		try
		{
			Node current = check(table[index]);			
			while ( true )
			{	
				if( current->hash == hash )
				{
					Class other = current->value;					
					if( other->parent === base and (other->flags & Class:ARRAY) != 0)
						return other;
				}
				current = check(current->next);
			}			
		}
		recover
		{}

		return null;		
	}
	
	/**
	 * Creates and adds a new generic class with the given raw type, name,
	 * parent, interfaces, and type parameters. This method assumes that 
	 * {@code findGeneric} has already been called and failed to find the
	 * matching class.  Likewise, it is assumed that this method will only
	 * ever be called on a set containing all generic classes.
	 * @param raw raw (unparameterized) version of the class
	 * @param name name of class to add
	 * @param parent parent of the class
	 * @param interfaces array of interfaces supported by the new class
	 * @param parameters array of type parameters and associated method tables
	 * @return newly created generic class
	 */
	public locked addGeneric(Class raw, String name, nullable Class parent, immutable Class[] interfaces, immutable Class[] parameters, immutable MethodTable[] tables) => (GenericClass)
	{
		GenericClass newGeneric = GenericClass:create(raw, name, parent, interfaces, parameters, tables);
		(long index, long hash) = findIndex( name, table->longSize );		
		table[index] = Node:create(hash, newGeneric, table[index]);
		modifications += 1L;
		longSize += 1L;
		
		if( longSize > threshold )
			resize(2 * table->longSize);		

		return newGeneric;			
	}
	
	/*
	 * Utility methods for creating generic and array classes, implemented
	 * natively for efficiency and to avoid complexities in the type-checker.
	 */
	private native getLongMethodTable() => (MethodTable);
	private native getEmptyMethodTableArray() => (immutable MethodTable[]);
	private native makeMethodTableArray(nullable readonly MethodTable object0) => (immutable MethodTable[]);
	private native makeMethodTableArray(nullable readonly MethodTable object0, nullable readonly MethodTable object1) => (immutable MethodTable[]);
	private native getEmptyClassArray() => (immutable Class[]);
	/// @unused
	private native makeClassArray(nullable Class class0) => (immutable Class[]);
	private native makeClassArray(nullable Class class0, nullable Class class1, nullable Class class2) => (immutable Class[]);
	private native makeClassArray(nullable Class class0, nullable Class class1) => (immutable Class[]);
	
	/**
	 * Method that looks for a generic array class with the given name,
	 * type parameters, and nullable status.  If nullable, the raw type
	 * will be {@code ArrayNullable}.  Otherwise, it will be {@code Array}.
	 * If the class is found, it returns it. If the class is not found, it 
	 * creates it. 
	 * @param name name of class to find	 
	 * @param parameters array of type parameters (only contains one item)
	 * @param table associated method table
	 * @param isNull {@code true} if the array type is nullable, {@code false}
	 * otherwise
	 * @return matching generic class, either pre-existing or newly created
	 */
	public locked getGenericArray(String name, immutable Class[] parameters, immutable MethodTable methodTable, boolean isNull) => (GenericClass)
	{
		try
		{	
			return check(findGeneric(name, parameters));
		}
		recover
		{	
			//CanIndex			
			//immutable Object[] canIndexParameters = freeze({ getIntArrayClass(), getNull(), parameter, parameterMethods });
			immutable Class[] canIndexParameters = makeClassArray(long:class, parameters[0]);
			immutable MethodTable[] canIndexTables = makeMethodTableArray(getLongMethodTable(), methodTable);
			immutable MethodTable[] tables = makeMethodTableArray(methodTable);
			//same parameters used for CanIndex and CanIndexStore 
			Class base;
			String canIndexName;
			if( isNull )
				base = CanIndexNullable:class;
			else
				base = CanIndex:class;
				
			canIndexName = base.makeName(#base, canIndexParameters, 0, 2);
			nullable GenericClass canIndex = findGeneric(canIndexName, canIndexParameters);
			if( canIndex === null )
				canIndex = addGeneric(base, canIndexName, null, getEmptyClassArray(), canIndexParameters, canIndexTables);
			
			//CanIndexStore						
			String canIndexStoreName;
			if( isNull )			
				base = CanIndexStoreNullable:class;
			else
				base = CanIndexStore:class;

			canIndexStoreName = base.makeName(#base, canIndexParameters, 0, 2);
			nullable GenericClass canIndexStore = findGeneric(canIndexStoreName, canIndexParameters);
			if( canIndexStore === null )
				canIndexStore = addGeneric(base, canIndexStoreName, null, getEmptyClassArray(), canIndexParameters, canIndexTables);

			//CanIterate
			String canIterateName;
			if( isNull )			
				base = CanIterateNullable:class;
			else
				base = CanIterate:class;
			canIterateName = base.makeName(#base, parameters, 0, 1);
			
			nullable GenericClass canIterate = findGeneric(canIterateName, parameters);
			if( canIterate === null )			
				canIterate = addGeneric(base, canIterateName, null, getEmptyClassArray(), parameters, tables);
									
			//return addGenericArray(name, parameter, freeze({cast<Class>(check(canIndex)), check(canIndexStore), check(canIterate)}), freeze({genericParameter, genericMethods}));
			if( isNull )
				base = ArrayNullable:class;
			else
				base = Array:class;			
			
			return addGeneric(base, name, Object:class, makeClassArray(canIndex, canIndexStore, canIterate), parameters, tables);
		}	
	}	

	/**
	 * Creates and adds a new array class with the name, and base class.
	 * This method assumes that {@code findArray} has already been called 
	 * and failed to find the matching class.  Likewise, it is assumed that
	 * this method will only ever be called on a set containing all array
	 * classes.
	 * @param name name of class to add
	 * @param base class of array base type	 	 
	 * @return newly created array class
	 */
	locked public addArray(String name, Class base) => (Class)
	{
		immutable Class[] interfaces = getEmptyClassArray();
		immutable MethodTable[] tables = getEmptyMethodTableArray();

		Class newArray = Class:create(name, Class:ARRAY, base.arraySize(), base, interfaces, tables);
		(long index, long hash) = findIndex( name, table->longSize );		
		table[index] = Node:create(hash, newArray, table[index]);
		modifications += 1L;
		longSize += 1L;
		
		if( longSize > threshold )
			resize(2L * table->longSize);
			
		return newArray;			
	}
}
