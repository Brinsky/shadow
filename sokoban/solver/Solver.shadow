import shadow:io@Console;

class sokoban:solver@Solver {
	public main(String[] args) => () {
		System system = System:instance;
		Console console = Console:instance;

		List<String> rows = ArrayList<String>:create();
		int cols = 0;
		nullable String line;
		boolean eof;
		(line, eof) = console.readLine();
		try {
			while (!eof) {
				rows.add(line);
				cols = cols.max(check(line)->size);
				(line, eof) = console.readLine();
			}
		} recover {}

		ulong start = system.nanoTime();
		Board board = Board:create(rows, cols);
		Board:State state = board.getInitialState();
		MutableString solution = recurse(state);
		ulong end = System.nanoTime();
		if (solution == null)
			console.writeLine("Unsolved after " # (end - start) / 1000000000.0 # " seconds.");
		else {
			console.writeLine("Solved in " # solution.length() # " moves and " # (end - start) / 1000000000.0 # " seconds.").
					writeLine(solution.reverse()).writeLine("Press Enter to view playback.").readLine();
			for (int i = 0; i < solution.length(); i += 1) {
				console.writeLine(state);
				Coordinate player = state.getPlayer();
				switch (solution[i]) {
					case ('U') {
						state = state.move(player, player.moveUp());
					} case ('D') {
						state = state.move(player, player.moveDown());
					} case ('L') {
						state = state.move(player, player.moveLeft());
					} case ('R') {
						state = state.move(player, player.moveRight());
					}
				}
				system.sleep(100);
			}
			console.writeLine(state).writeLine("Done!");
		}
	}
	int counter = 0;
	private recurse(Board:State state) => (MutableString) {
		if (state == null)
			return null;
		if (state.isWinning())
			return MutableString:create();
		counter += 1;
		if (counter >= 0 and counter % 256 == 0)
			console.write(state);
		for (int dist = 0; dist <= state.getMaxDistance(); dist += 1) {
			for (int num = 0; num < state.getNumCoordinates(dist); num += 1) {
				Coordinate from = state.getCoordinate(dist, num);
				int index = 0;
				foreach (Coordinate to in from) {
					StringBuilder path = recurse(state.tryMove(from, to));
					if (path != null)
						return state.getPath(path.append("UDLR"[index]), state.getPlayer(), from);
					index += 1;
				}
			}
		}
		return null;
	}
}
